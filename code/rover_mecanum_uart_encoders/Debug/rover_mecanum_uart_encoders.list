
rover_mecanum_uart_encoders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000132f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f0  08013498  08013498  00014498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d88  08013d88  000152b4  2**0
                  CONTENTS
  4 .ARM          00000008  08013d88  08013d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d90  08013d90  000152b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d90  08013d90  00014d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013d94  08013d94  00014d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  08013d98  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054ac  200002b4  0801404c  000152b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005760  0801404c  00015760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000152b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001faaa  00000000  00000000  000152e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004419  00000000  00000000  00034d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af8  00000000  00000000  000391a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001536  00000000  00000000  0003aca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005ef6  00000000  00000000  0003c1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c41d  00000000  00000000  000420cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a020d  00000000  00000000  0005e4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe6f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c74  00000000  00000000  000fe73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001073b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b4 	.word	0x200002b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013480 	.word	0x08013480

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002b8 	.word	0x200002b8
 80001dc:	08013480 	.word	0x08013480

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <lwpkt_lwrb_uart_init>:
UART_HandleTypeDef* huart_p;


void lwpkt_lwrb_uart_task(void* argument);

void lwpkt_lwrb_uart_init(const lwpkt_lwrb_uart_init_data_t* init_data){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	lwpkt_lwrb_uart_taskHandle = osThreadNew(lwpkt_lwrb_uart_task, init_data, &lwpkt_lwrb_uart_task_attributes);
 800101c:	4a05      	ldr	r2, [pc, #20]	@ (8001034 <lwpkt_lwrb_uart_init+0x20>)
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4805      	ldr	r0, [pc, #20]	@ (8001038 <lwpkt_lwrb_uart_init+0x24>)
 8001022:	f005 fc55 	bl	80068d0 <osThreadNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a04      	ldr	r2, [pc, #16]	@ (800103c <lwpkt_lwrb_uart_init+0x28>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	080136c0 	.word	0x080136c0
 8001038:	080010c1 	.word	0x080010c1
 800103c:	20000918 	.word	0x20000918

08001040 <uart_tx_rb_evt_fn>:

void uart_tx_rb_evt_fn(lwrb_t* buff, lwrb_evt_type_t type, lwrb_sz_t len){
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	460b      	mov	r3, r1
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	72fb      	strb	r3, [r7, #11]
	switch (type) {
 800104e:	7afb      	ldrb	r3, [r7, #11]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d12d      	bne.n	80010b0 <uart_tx_rb_evt_fn+0x70>
		case LWRB_EVT_WRITE:
			lwrb_sz_t size = lwrb_get_linear_block_read_length(buff);
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f00b ff6d 	bl	800cf34 <lwrb_get_linear_block_read_length>
 800105a:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(huart_p, (uint8_t*)lwrb_get_linear_block_read_address(buff), size, HAL_MAX_DELAY);
 800105c:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <uart_tx_rb_evt_fn+0x7c>)
 800105e:	681c      	ldr	r4, [r3, #0]
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f00b ff4b 	bl	800cefc <lwrb_get_linear_block_read_address>
 8001066:	4601      	mov	r1, r0
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	b29a      	uxth	r2, r3
 800106c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001070:	4620      	mov	r0, r4
 8001072:	f004 f9d1 	bl	8005418 <HAL_UART_Transmit>
			lwrb_skip(buff, size);
 8001076:	6979      	ldr	r1, [r7, #20]
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f00b ff98 	bl	800cfae <lwrb_skip>
			size = lwrb_get_linear_block_read_length(buff);
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f00b ff58 	bl	800cf34 <lwrb_get_linear_block_read_length>
 8001084:	6178      	str	r0, [r7, #20]
			if (size > 0) {
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00c      	beq.n	80010a6 <uart_tx_rb_evt_fn+0x66>
					HAL_UART_Transmit(huart_p, (uint8_t*)lwrb_get_linear_block_read_address(buff), size, HAL_MAX_DELAY);
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <uart_tx_rb_evt_fn+0x7c>)
 800108e:	681c      	ldr	r4, [r3, #0]
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f00b ff33 	bl	800cefc <lwrb_get_linear_block_read_address>
 8001096:	4601      	mov	r1, r0
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	b29a      	uxth	r2, r3
 800109c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010a0:	4620      	mov	r0, r4
 80010a2:	f004 f9b9 	bl	8005418 <HAL_UART_Transmit>
			}
			lwrb_skip(buff, size);
 80010a6:	6979      	ldr	r1, [r7, #20]
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f00b ff80 	bl	800cfae <lwrb_skip>

			break;
 80010ae:	e000      	b.n	80010b2 <uart_tx_rb_evt_fn+0x72>
		default:
			break;
 80010b0:	bf00      	nop
	}
}
 80010b2:	bf00      	nop
 80010b4:	371c      	adds	r7, #28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000091c 	.word	0x2000091c

080010c0 <lwpkt_lwrb_uart_task>:

void lwpkt_lwrb_uart_task(void* argument){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	lwpkt_lwrb_uart_init_data_t* init_data_p = (lwpkt_lwrb_uart_init_data_t*)argument;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	60fb      	str	r3, [r7, #12]
	huart_p = init_data_p->huart_p;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a2d      	ldr	r2, [pc, #180]	@ (8001188 <lwpkt_lwrb_uart_task+0xc8>)
 80010d2:	6013      	str	r3, [r2, #0]

	uart_rb_queueHandle = osMessageQueueNew(UART_RB_SIZE_QUEUE_SIZE, sizeof(uint16_t), &uart_rb_queue_attributes);
 80010d4:	4a2d      	ldr	r2, [pc, #180]	@ (800118c <lwpkt_lwrb_uart_task+0xcc>)
 80010d6:	2102      	movs	r1, #2
 80010d8:	200a      	movs	r0, #10
 80010da:	f005 fe85 	bl	8006de8 <osMessageQueueNew>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001190 <lwpkt_lwrb_uart_task+0xd0>)
 80010e2:	6013      	str	r3, [r2, #0]

	lwrb_init(&uart_rx_buffer, uart_rx_data_buffer, UART_RX_BUFFER_SIZE);
 80010e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010e8:	492a      	ldr	r1, [pc, #168]	@ (8001194 <lwpkt_lwrb_uart_task+0xd4>)
 80010ea:	482b      	ldr	r0, [pc, #172]	@ (8001198 <lwpkt_lwrb_uart_task+0xd8>)
 80010ec:	f00b fce6 	bl	800cabc <lwrb_init>

	lwrb_init(&uart_tx_buffer, uart_tx_data_buffer, UART_TX_BUFFER_SIZE);
 80010f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010f4:	4929      	ldr	r1, [pc, #164]	@ (800119c <lwpkt_lwrb_uart_task+0xdc>)
 80010f6:	482a      	ldr	r0, [pc, #168]	@ (80011a0 <lwpkt_lwrb_uart_task+0xe0>)
 80010f8:	f00b fce0 	bl	800cabc <lwrb_init>
	lwrb_set_evt_fn(&uart_tx_buffer, uart_tx_rb_evt_fn);
 80010fc:	4929      	ldr	r1, [pc, #164]	@ (80011a4 <lwpkt_lwrb_uart_task+0xe4>)
 80010fe:	4828      	ldr	r0, [pc, #160]	@ (80011a0 <lwpkt_lwrb_uart_task+0xe0>)
 8001100:	f00b fd0d 	bl	800cb1e <lwrb_set_evt_fn>

	lwpkt_init(&uart_lwpkt, &uart_tx_buffer, &uart_rx_buffer);
 8001104:	4a24      	ldr	r2, [pc, #144]	@ (8001198 <lwpkt_lwrb_uart_task+0xd8>)
 8001106:	4926      	ldr	r1, [pc, #152]	@ (80011a0 <lwpkt_lwrb_uart_task+0xe0>)
 8001108:	4827      	ldr	r0, [pc, #156]	@ (80011a8 <lwpkt_lwrb_uart_task+0xe8>)
 800110a:	f00b fa2f 	bl	800c56c <lwpkt_init>
	lwpkt_set_evt_fn(&uart_lwpkt, init_data_p->lwpkt_evt_fn);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	4619      	mov	r1, r3
 8001114:	4824      	ldr	r0, [pc, #144]	@ (80011a8 <lwpkt_lwrb_uart_task+0xe8>)
 8001116:	f00b fcc1 	bl	800ca9c <lwpkt_set_evt_fn>
	//osEventFlagsSet(lwpkt_eventsHandle, lwpkt_init_event_flag);

	HAL_UARTEx_ReceiveToIdle_DMA(huart_p, uart_dma_rx_buffer, UART_DMA_RX_BUFFER_SIZE);
 800111a:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <lwpkt_lwrb_uart_task+0xc8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001122:	4922      	ldr	r1, [pc, #136]	@ (80011ac <lwpkt_lwrb_uart_task+0xec>)
 8001124:	4618      	mov	r0, r3
 8001126:	f004 fa02 	bl	800552e <HAL_UARTEx_ReceiveToIdle_DMA>
	/* Infinite loop */
	for(;;)
	{
		uint16_t Size;
		osMessageQueueGet(uart_rb_queueHandle, &Size, NULL, osWaitForever);
 800112a:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <lwpkt_lwrb_uart_task+0xd0>)
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	f107 010a 	add.w	r1, r7, #10
 8001132:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001136:	2200      	movs	r2, #0
 8001138:	f005 ff2a 	bl	8006f90 <osMessageQueueGet>

		static uint16_t pos = 0;
		lwrb_write(&uart_rx_buffer, &uart_dma_rx_buffer[pos], Size >= pos ? Size - pos : Size - pos + UART_DMA_RX_BUFFER_SIZE);
 800113c:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <lwpkt_lwrb_uart_task+0xf0>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <lwpkt_lwrb_uart_task+0xec>)
 8001144:	18d1      	adds	r1, r2, r3
 8001146:	897a      	ldrh	r2, [r7, #10]
 8001148:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <lwpkt_lwrb_uart_task+0xf0>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d305      	bcc.n	800115c <lwpkt_lwrb_uart_task+0x9c>
 8001150:	897b      	ldrh	r3, [r7, #10]
 8001152:	461a      	mov	r2, r3
 8001154:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <lwpkt_lwrb_uart_task+0xf0>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	e006      	b.n	800116a <lwpkt_lwrb_uart_task+0xaa>
 800115c:	897b      	ldrh	r3, [r7, #10]
 800115e:	461a      	mov	r2, r3
 8001160:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <lwpkt_lwrb_uart_task+0xf0>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800116a:	461a      	mov	r2, r3
 800116c:	480a      	ldr	r0, [pc, #40]	@ (8001198 <lwpkt_lwrb_uart_task+0xd8>)
 800116e:	f00b fcef 	bl	800cb50 <lwrb_write>
		pos = Size;
 8001172:	897a      	ldrh	r2, [r7, #10]
 8001174:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <lwpkt_lwrb_uart_task+0xf0>)
 8001176:	801a      	strh	r2, [r3, #0]
		lwpkt_process(&uart_lwpkt, HAL_GetTick());
 8001178:	f001 fb7c 	bl	8002874 <HAL_GetTick>
 800117c:	4603      	mov	r3, r0
 800117e:	4619      	mov	r1, r3
 8001180:	4809      	ldr	r0, [pc, #36]	@ (80011a8 <lwpkt_lwrb_uart_task+0xe8>)
 8001182:	f00b fb6d 	bl	800c860 <lwpkt_process>
	{
 8001186:	e7d0      	b.n	800112a <lwpkt_lwrb_uart_task+0x6a>
 8001188:	2000091c 	.word	0x2000091c
 800118c:	080136a8 	.word	0x080136a8
 8001190:	20000914 	.word	0x20000914
 8001194:	20000500 	.word	0x20000500
 8001198:	200004ec 	.word	0x200004ec
 800119c:	20000714 	.word	0x20000714
 80011a0:	20000700 	.word	0x20000700
 80011a4:	08001041 	.word	0x08001041
 80011a8:	200002d0 	.word	0x200002d0
 80011ac:	200003ec 	.word	0x200003ec
 80011b0:	20000920 	.word	0x20000920

080011b4 <lwrb_uart_callback>:
	}
}

void lwrb_uart_callback(uint16_t Size){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
	osMessageQueuePut(uart_rb_queueHandle, &Size, 0, 0);
 80011be:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <lwrb_uart_callback+0x20>)
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	1db9      	adds	r1, r7, #6
 80011c4:	2300      	movs	r3, #0
 80011c6:	2200      	movs	r2, #0
 80011c8:	f005 fe82 	bl	8006ed0 <osMessageQueuePut>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000914 	.word	0x20000914

080011d8 <uart_lwpkt_write>:

lwpktr_t uart_lwpkt_set_evt_fn(lwpkt_evt_fn uart_lwpkt_evt_fn){
	return lwpkt_set_evt_fn(&uart_lwpkt, uart_lwpkt_evt_fn);
}

lwpktr_t uart_lwpkt_write(const void* data, size_t len){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	return lwpkt_write(&uart_lwpkt, data, len);
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	4804      	ldr	r0, [pc, #16]	@ (80011f8 <uart_lwpkt_write+0x20>)
 80011e8:	f00b fb82 	bl	800c8f0 <lwpkt_write>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200002d0 	.word	0x200002d0

080011fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001200:	f001 fb02 	bl	8002808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001204:	f000 f850 	bl	80012a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001208:	f000 fb64 	bl	80018d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800120c:	f000 fb42 	bl	8001894 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001210:	f000 faec 	bl	80017ec <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001214:	f000 f8b2 	bl	800137c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001218:	f000 f974 	bl	8001504 <MX_TIM2_Init>
  MX_TIM3_Init();
 800121c:	f000 f9c6 	bl	80015ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8001220:	f000 fa18 	bl	8001654 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001224:	f000 fa6a 	bl	80016fc <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8001228:	f000 fb0a 	bl	8001840 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 800122c:	f000 faba 	bl	80017a4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001230:	f005 fb04 	bl	800683c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  mecanum_semHandle = osSemaphoreNew(1, 1, &mecanum_sem_attributes);
 8001234:	4a12      	ldr	r2, [pc, #72]	@ (8001280 <main+0x84>)
 8001236:	2101      	movs	r1, #1
 8001238:	2001      	movs	r0, #1
 800123a:	f005 fcb5 	bl	8006ba8 <osSemaphoreNew>
 800123e:	4603      	mov	r3, r0
 8001240:	4a10      	ldr	r2, [pc, #64]	@ (8001284 <main+0x88>)
 8001242:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* Create the timer(s) */
  /* creation of timer */
  timerHandle = osTimerNew(callback, osTimerOnce, NULL, &timer_attributes);
 8001244:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <main+0x8c>)
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	4810      	ldr	r0, [pc, #64]	@ (800128c <main+0x90>)
 800124c:	f005 fc02 	bl	8006a54 <osTimerNew>
 8001250:	4603      	mov	r3, r0
 8001252:	4a0f      	ldr	r2, [pc, #60]	@ (8001290 <main+0x94>)
 8001254:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  mecanum_encoder_speeds_queueHandle = osMessageQueueNew(1, sizeof(four_wheeled_robot_encoders_speeds_t), &mecanum_encoder_speeds_queue_attributes);
 8001256:	4a0f      	ldr	r2, [pc, #60]	@ (8001294 <main+0x98>)
 8001258:	2110      	movs	r1, #16
 800125a:	2001      	movs	r0, #1
 800125c:	f005 fdc4 	bl	8006de8 <osMessageQueueNew>
 8001260:	4603      	mov	r3, r0
 8001262:	4a0d      	ldr	r2, [pc, #52]	@ (8001298 <main+0x9c>)
 8001264:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001266:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <main+0xa0>)
 8001268:	2100      	movs	r1, #0
 800126a:	480d      	ldr	r0, [pc, #52]	@ (80012a0 <main+0xa4>)
 800126c:	f005 fb30 	bl	80068d0 <osThreadNew>
 8001270:	4603      	mov	r3, r0
 8001272:	4a0c      	ldr	r2, [pc, #48]	@ (80012a4 <main+0xa8>)
 8001274:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001276:	f005 fb05 	bl	8006884 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800127a:	bf00      	nop
 800127c:	e7fd      	b.n	800127a <main+0x7e>
 800127e:	bf00      	nop
 8001280:	08013730 	.word	0x08013730
 8001284:	20000bd0 	.word	0x20000bd0
 8001288:	08013708 	.word	0x08013708
 800128c:	08001cb9 	.word	0x08001cb9
 8001290:	20000bc8 	.word	0x20000bc8
 8001294:	08013718 	.word	0x08013718
 8001298:	20000bcc 	.word	0x20000bcc
 800129c:	080136e4 	.word	0x080136e4
 80012a0:	08001cfd 	.word	0x08001cfd
 80012a4:	20000bc4 	.word	0x20000bc4

080012a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b094      	sub	sp, #80	@ 0x50
 80012ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	2230      	movs	r2, #48	@ 0x30
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f00d ff60 	bl	800f17c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	4b28      	ldr	r3, [pc, #160]	@ (8001374 <SystemClock_Config+0xcc>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	4a27      	ldr	r2, [pc, #156]	@ (8001374 <SystemClock_Config+0xcc>)
 80012d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012da:	6413      	str	r3, [r2, #64]	@ 0x40
 80012dc:	4b25      	ldr	r3, [pc, #148]	@ (8001374 <SystemClock_Config+0xcc>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <SystemClock_Config+0xd0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a21      	ldr	r2, [pc, #132]	@ (8001378 <SystemClock_Config+0xd0>)
 80012f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001378 <SystemClock_Config+0xd0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001304:	2302      	movs	r3, #2
 8001306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001308:	2301      	movs	r3, #1
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130c:	2310      	movs	r3, #16
 800130e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001310:	2302      	movs	r3, #2
 8001312:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001314:	2300      	movs	r3, #0
 8001316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001318:	2310      	movs	r3, #16
 800131a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800131c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001320:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001322:	2304      	movs	r3, #4
 8001324:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001326:	2304      	movs	r3, #4
 8001328:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132a:	f107 0320 	add.w	r3, r7, #32
 800132e:	4618      	mov	r0, r3
 8001330:	f002 f95e 	bl	80035f0 <HAL_RCC_OscConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800133a:	f000 fe05 	bl	8001f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133e:	230f      	movs	r3, #15
 8001340:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001342:	2302      	movs	r3, #2
 8001344:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800134a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800134e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	2102      	movs	r1, #2
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fbc0 	bl	8003ae0 <HAL_RCC_ClockConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001366:	f000 fdef 	bl	8001f48 <Error_Handler>
  }
}
 800136a:	bf00      	nop
 800136c:	3750      	adds	r7, #80	@ 0x50
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40007000 	.word	0x40007000

0800137c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b096      	sub	sp, #88	@ 0x58
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001382:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800139a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]
 80013aa:	615a      	str	r2, [r3, #20]
 80013ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2220      	movs	r2, #32
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f00d fee1 	bl	800f17c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ba:	4b50      	ldr	r3, [pc, #320]	@ (80014fc <MX_TIM1_Init+0x180>)
 80013bc:	4a50      	ldr	r2, [pc, #320]	@ (8001500 <MX_TIM1_Init+0x184>)
 80013be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 80013c0:	4b4e      	ldr	r3, [pc, #312]	@ (80014fc <MX_TIM1_Init+0x180>)
 80013c2:	2209      	movs	r2, #9
 80013c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b4d      	ldr	r3, [pc, #308]	@ (80014fc <MX_TIM1_Init+0x180>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400;
 80013cc:	4b4b      	ldr	r3, [pc, #300]	@ (80014fc <MX_TIM1_Init+0x180>)
 80013ce:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 80013d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b49      	ldr	r3, [pc, #292]	@ (80014fc <MX_TIM1_Init+0x180>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013da:	4b48      	ldr	r3, [pc, #288]	@ (80014fc <MX_TIM1_Init+0x180>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b46      	ldr	r3, [pc, #280]	@ (80014fc <MX_TIM1_Init+0x180>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013e6:	4845      	ldr	r0, [pc, #276]	@ (80014fc <MX_TIM1_Init+0x180>)
 80013e8:	f002 fdcc 	bl	8003f84 <HAL_TIM_Base_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013f2:	f000 fda9 	bl	8001f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013fc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001400:	4619      	mov	r1, r3
 8001402:	483e      	ldr	r0, [pc, #248]	@ (80014fc <MX_TIM1_Init+0x180>)
 8001404:	f003 fac4 	bl	8004990 <HAL_TIM_ConfigClockSource>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800140e:	f000 fd9b 	bl	8001f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001412:	483a      	ldr	r0, [pc, #232]	@ (80014fc <MX_TIM1_Init+0x180>)
 8001414:	f002 fe68 	bl	80040e8 <HAL_TIM_PWM_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800141e:	f000 fd93 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800142a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800142e:	4619      	mov	r1, r3
 8001430:	4832      	ldr	r0, [pc, #200]	@ (80014fc <MX_TIM1_Init+0x180>)
 8001432:	f003 fe75 	bl	8005120 <HAL_TIMEx_MasterConfigSynchronization>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800143c:	f000 fd84 	bl	8001f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001440:	2360      	movs	r3, #96	@ 0x60
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800144c:	2300      	movs	r3, #0
 800144e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800145c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001460:	2200      	movs	r2, #0
 8001462:	4619      	mov	r1, r3
 8001464:	4825      	ldr	r0, [pc, #148]	@ (80014fc <MX_TIM1_Init+0x180>)
 8001466:	f003 f9d1 	bl	800480c <HAL_TIM_PWM_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001470:	f000 fd6a 	bl	8001f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001478:	2204      	movs	r2, #4
 800147a:	4619      	mov	r1, r3
 800147c:	481f      	ldr	r0, [pc, #124]	@ (80014fc <MX_TIM1_Init+0x180>)
 800147e:	f003 f9c5 	bl	800480c <HAL_TIM_PWM_ConfigChannel>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001488:	f000 fd5e 	bl	8001f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800148c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001490:	2208      	movs	r2, #8
 8001492:	4619      	mov	r1, r3
 8001494:	4819      	ldr	r0, [pc, #100]	@ (80014fc <MX_TIM1_Init+0x180>)
 8001496:	f003 f9b9 	bl	800480c <HAL_TIM_PWM_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80014a0:	f000 fd52 	bl	8001f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a8:	220c      	movs	r2, #12
 80014aa:	4619      	mov	r1, r3
 80014ac:	4813      	ldr	r0, [pc, #76]	@ (80014fc <MX_TIM1_Init+0x180>)
 80014ae:	f003 f9ad 	bl	800480c <HAL_TIM_PWM_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80014b8:	f000 fd46 	bl	8001f48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4807      	ldr	r0, [pc, #28]	@ (80014fc <MX_TIM1_Init+0x180>)
 80014e0:	f003 fe8c 	bl	80051fc <HAL_TIMEx_ConfigBreakDeadTime>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80014ea:	f000 fd2d 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014ee:	4803      	ldr	r0, [pc, #12]	@ (80014fc <MX_TIM1_Init+0x180>)
 80014f0:	f000 fecc 	bl	800228c <HAL_TIM_MspPostInit>

}
 80014f4:	bf00      	nop
 80014f6:	3758      	adds	r7, #88	@ 0x58
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000924 	.word	0x20000924
 8001500:	40010000 	.word	0x40010000

08001504 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	@ 0x30
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	2224      	movs	r2, #36	@ 0x24
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f00d fe32 	bl	800f17c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001520:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <MX_TIM2_Init+0xa4>)
 8001522:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001526:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001528:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <MX_TIM2_Init+0xa4>)
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <MX_TIM2_Init+0xa4>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63535;
 8001534:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <MX_TIM2_Init+0xa4>)
 8001536:	f64f 022f 	movw	r2, #63535	@ 0xf82f
 800153a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <MX_TIM2_Init+0xa4>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <MX_TIM2_Init+0xa4>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001548:	2303      	movs	r3, #3
 800154a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001550:	2301      	movs	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001560:	2301      	movs	r3, #1
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	4619      	mov	r1, r3
 8001572:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <MX_TIM2_Init+0xa4>)
 8001574:	f002 ff26 	bl	80043c4 <HAL_TIM_Encoder_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800157e:	f000 fce3 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <MX_TIM2_Init+0xa4>)
 8001590:	f003 fdc6 	bl	8005120 <HAL_TIMEx_MasterConfigSynchronization>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800159a:	f000 fcd5 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3730      	adds	r7, #48	@ 0x30
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000096c 	.word	0x2000096c

080015ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	@ 0x30
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2224      	movs	r2, #36	@ 0x24
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00d fdde 	bl	800f17c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015c8:	4b20      	ldr	r3, [pc, #128]	@ (800164c <MX_TIM3_Init+0xa0>)
 80015ca:	4a21      	ldr	r2, [pc, #132]	@ (8001650 <MX_TIM3_Init+0xa4>)
 80015cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015ce:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <MX_TIM3_Init+0xa0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <MX_TIM3_Init+0xa0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015da:	4b1c      	ldr	r3, [pc, #112]	@ (800164c <MX_TIM3_Init+0xa0>)
 80015dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <MX_TIM3_Init+0xa0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b18      	ldr	r3, [pc, #96]	@ (800164c <MX_TIM3_Init+0xa0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015ee:	2303      	movs	r3, #3
 80015f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015f6:	2301      	movs	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001606:	2301      	movs	r3, #1
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	4619      	mov	r1, r3
 8001618:	480c      	ldr	r0, [pc, #48]	@ (800164c <MX_TIM3_Init+0xa0>)
 800161a:	f002 fed3 	bl	80043c4 <HAL_TIM_Encoder_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001624:	f000 fc90 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_TIM3_Init+0xa0>)
 8001636:	f003 fd73 	bl	8005120 <HAL_TIMEx_MasterConfigSynchronization>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001640:	f000 fc82 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	3730      	adds	r7, #48	@ 0x30
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200009b4 	.word	0x200009b4
 8001650:	40000400 	.word	0x40000400

08001654 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	@ 0x30
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	2224      	movs	r2, #36	@ 0x24
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f00d fd8a 	bl	800f17c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001670:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <MX_TIM4_Init+0xa0>)
 8001672:	4a21      	ldr	r2, [pc, #132]	@ (80016f8 <MX_TIM4_Init+0xa4>)
 8001674:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001676:	4b1f      	ldr	r3, [pc, #124]	@ (80016f4 <MX_TIM4_Init+0xa0>)
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <MX_TIM4_Init+0xa0>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001682:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <MX_TIM4_Init+0xa0>)
 8001684:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001688:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <MX_TIM4_Init+0xa0>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <MX_TIM4_Init+0xa0>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001696:	2303      	movs	r3, #3
 8001698:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800169e:	2301      	movs	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016ae:	2301      	movs	r3, #1
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4619      	mov	r1, r3
 80016c0:	480c      	ldr	r0, [pc, #48]	@ (80016f4 <MX_TIM4_Init+0xa0>)
 80016c2:	f002 fe7f 	bl	80043c4 <HAL_TIM_Encoder_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80016cc:	f000 fc3c 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_TIM4_Init+0xa0>)
 80016de:	f003 fd1f 	bl	8005120 <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80016e8:	f000 fc2e 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	3730      	adds	r7, #48	@ 0x30
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200009fc 	.word	0x200009fc
 80016f8:	40000800 	.word	0x40000800

080016fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	@ 0x30
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	2224      	movs	r2, #36	@ 0x24
 8001708:	2100      	movs	r1, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f00d fd36 	bl	800f17c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001718:	4b20      	ldr	r3, [pc, #128]	@ (800179c <MX_TIM5_Init+0xa0>)
 800171a:	4a21      	ldr	r2, [pc, #132]	@ (80017a0 <MX_TIM5_Init+0xa4>)
 800171c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800171e:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <MX_TIM5_Init+0xa0>)
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <MX_TIM5_Init+0xa0>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <MX_TIM5_Init+0xa0>)
 800172c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001730:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001732:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <MX_TIM5_Init+0xa0>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001738:	4b18      	ldr	r3, [pc, #96]	@ (800179c <MX_TIM5_Init+0xa0>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800173e:	2303      	movs	r3, #3
 8001740:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001746:	2301      	movs	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001756:	2301      	movs	r3, #1
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	4619      	mov	r1, r3
 8001768:	480c      	ldr	r0, [pc, #48]	@ (800179c <MX_TIM5_Init+0xa0>)
 800176a:	f002 fe2b 	bl	80043c4 <HAL_TIM_Encoder_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001774:	f000 fbe8 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	@ (800179c <MX_TIM5_Init+0xa0>)
 8001786:	f003 fccb 	bl	8005120 <HAL_TIMEx_MasterConfigSynchronization>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001790:	f000 fbda 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	3730      	adds	r7, #48	@ 0x30
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000a44 	.word	0x20000a44
 80017a0:	40000c00 	.word	0x40000c00

080017a4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80017a8:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <MX_TIM10_Init+0x40>)
 80017aa:	4a0f      	ldr	r2, [pc, #60]	@ (80017e8 <MX_TIM10_Init+0x44>)
 80017ac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400 - 1;
 80017ae:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <MX_TIM10_Init+0x40>)
 80017b0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80017b4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <MX_TIM10_Init+0x40>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000 - 1;
 80017bc:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <MX_TIM10_Init+0x40>)
 80017be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017c2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c4:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <MX_TIM10_Init+0x40>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <MX_TIM10_Init+0x40>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80017d0:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <MX_TIM10_Init+0x40>)
 80017d2:	f002 fbd7 	bl	8003f84 <HAL_TIM_Base_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80017dc:	f000 fbb4 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000a8c 	.word	0x20000a8c
 80017e8:	40014400 	.word	0x40014400

080017ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	@ (800183c <MX_USART2_UART_Init+0x50>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001810:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 8001812:	2208      	movs	r2, #8
 8001814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8001822:	4805      	ldr	r0, [pc, #20]	@ (8001838 <MX_USART2_UART_Init+0x4c>)
 8001824:	f003 fda0 	bl	8005368 <HAL_HalfDuplex_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800182e:	f000 fb8b 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000ad4 	.word	0x20000ad4
 800183c:	40004400 	.word	0x40004400

08001840 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <MX_USART6_UART_Init+0x4c>)
 8001846:	4a12      	ldr	r2, [pc, #72]	@ (8001890 <MX_USART6_UART_Init+0x50>)
 8001848:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <MX_USART6_UART_Init+0x4c>)
 800184c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001850:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <MX_USART6_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <MX_USART6_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <MX_USART6_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b09      	ldr	r3, [pc, #36]	@ (800188c <MX_USART6_UART_Init+0x4c>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b08      	ldr	r3, [pc, #32]	@ (800188c <MX_USART6_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <MX_USART6_UART_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	@ (800188c <MX_USART6_UART_Init+0x4c>)
 8001878:	f003 fd26 	bl	80052c8 <HAL_UART_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001882:	f000 fb61 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000b1c 	.word	0x20000b1c
 8001890:	40011400 	.word	0x40011400

08001894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <MX_DMA_Init+0x3c>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a0b      	ldr	r2, [pc, #44]	@ (80018d0 <MX_DMA_Init+0x3c>)
 80018a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <MX_DMA_Init+0x3c>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2105      	movs	r1, #5
 80018ba:	2039      	movs	r0, #57	@ 0x39
 80018bc:	f001 f89e 	bl	80029fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80018c0:	2039      	movs	r0, #57	@ 0x39
 80018c2:	f001 f8b7 	bl	8002a34 <HAL_NVIC_EnableIRQ>

}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800

080018d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	@ 0x28
 80018d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b3c      	ldr	r3, [pc, #240]	@ (80019e0 <MX_GPIO_Init+0x10c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a3b      	ldr	r2, [pc, #236]	@ (80019e0 <MX_GPIO_Init+0x10c>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b39      	ldr	r3, [pc, #228]	@ (80019e0 <MX_GPIO_Init+0x10c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b35      	ldr	r3, [pc, #212]	@ (80019e0 <MX_GPIO_Init+0x10c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a34      	ldr	r2, [pc, #208]	@ (80019e0 <MX_GPIO_Init+0x10c>)
 8001910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b32      	ldr	r3, [pc, #200]	@ (80019e0 <MX_GPIO_Init+0x10c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b2e      	ldr	r3, [pc, #184]	@ (80019e0 <MX_GPIO_Init+0x10c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a2d      	ldr	r2, [pc, #180]	@ (80019e0 <MX_GPIO_Init+0x10c>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <MX_GPIO_Init+0x10c>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b27      	ldr	r3, [pc, #156]	@ (80019e0 <MX_GPIO_Init+0x10c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a26      	ldr	r2, [pc, #152]	@ (80019e0 <MX_GPIO_Init+0x10c>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b24      	ldr	r3, [pc, #144]	@ (80019e0 <MX_GPIO_Init+0x10c>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FL_MOTOR_A_Pin|BR_MOTOR_B_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	2130      	movs	r1, #48	@ 0x30
 800195e:	4821      	ldr	r0, [pc, #132]	@ (80019e4 <MX_GPIO_Init+0x110>)
 8001960:	f001 fe14 	bl	800358c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_MOTOR_A_Pin|BL_MOTOR_B_Pin|BR_MOTOR_A_Pin|FL_MOTOR_B_Pin
 8001964:	2200      	movs	r2, #0
 8001966:	f24f 0106 	movw	r1, #61446	@ 0xf006
 800196a:	481f      	ldr	r0, [pc, #124]	@ (80019e8 <MX_GPIO_Init+0x114>)
 800196c:	f001 fe0e 	bl	800358c <HAL_GPIO_WritePin>
                          |FR_MOTOR_A_Pin|FR_MOTOR_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001976:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800197a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4817      	ldr	r0, [pc, #92]	@ (80019e4 <MX_GPIO_Init+0x110>)
 8001988:	f001 fc64 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pins : FL_MOTOR_A_Pin BR_MOTOR_B_Pin */
  GPIO_InitStruct.Pin = FL_MOTOR_A_Pin|BR_MOTOR_B_Pin;
 800198c:	2330      	movs	r3, #48	@ 0x30
 800198e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	4810      	ldr	r0, [pc, #64]	@ (80019e4 <MX_GPIO_Init+0x110>)
 80019a4:	f001 fc56 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_MOTOR_A_Pin BL_MOTOR_B_Pin BR_MOTOR_A_Pin FL_MOTOR_B_Pin
                           FR_MOTOR_A_Pin FR_MOTOR_B_Pin */
  GPIO_InitStruct.Pin = BL_MOTOR_A_Pin|BL_MOTOR_B_Pin|BR_MOTOR_A_Pin|FL_MOTOR_B_Pin
 80019a8:	f24f 0306 	movw	r3, #61446	@ 0xf006
 80019ac:	617b      	str	r3, [r7, #20]
                          |FR_MOTOR_A_Pin|FR_MOTOR_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4619      	mov	r1, r3
 80019c0:	4809      	ldr	r0, [pc, #36]	@ (80019e8 <MX_GPIO_Init+0x114>)
 80019c2:	f001 fc47 	bl	8003254 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2105      	movs	r1, #5
 80019ca:	2028      	movs	r0, #40	@ 0x28
 80019cc:	f001 f816 	bl	80029fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019d0:	2028      	movs	r0, #40	@ 0x28
 80019d2:	f001 f82f 	bl	8002a34 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	@ 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020800 	.word	0x40020800
 80019e8:	40020400 	.word	0x40020400

080019ec <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	4804      	ldr	r0, [pc, #16]	@ (8001a14 <_write+0x28>)
 8001a04:	f003 fd08 	bl	8005418 <HAL_UART_Transmit>
	return len;
 8001a08:	687b      	ldr	r3, [r7, #4]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000ad4 	.word	0x20000ad4

08001a18 <uart_lwpkt_evt_fn>:

static void uart_lwpkt_evt_fn(lwpkt_t* pkt, lwpkt_evt_type_t type){
 8001a18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a1c:	b090      	sub	sp, #64	@ 0x40
 8001a1e:	af04      	add	r7, sp, #16
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	70fb      	strb	r3, [r7, #3]
	switch (type) {
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f040 80d2 	bne.w	8001bd2 <uart_lwpkt_evt_fn+0x1ba>
		case LWPKT_EVT_PKT:
			size_t len = lwpkt_get_data_len(pkt);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <uart_lwpkt_evt_fn+0x24>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001a3a:	e000      	b.n	8001a3e <uart_lwpkt_evt_fn+0x26>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			char* data = (char*)lwpkt_get_data(pkt);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <uart_lwpkt_evt_fn+0x32>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	e000      	b.n	8001a4c <uart_lwpkt_evt_fn+0x34>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
			printf("Packet received, size(%d)", len);//, data(%.*s)\r\n", len, len, data);
 8001a4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001a50:	4863      	ldr	r0, [pc, #396]	@ (8001be0 <uart_lwpkt_evt_fn+0x1c8>)
 8001a52:	f00d f9ff 	bl	800ee54 <iprintf>

			cJSON* parsed_json = cJSON_ParseWithLength(data, len);
 8001a56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001a58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a5a:	f009 fd97 	bl	800b58c <cJSON_ParseWithLength>
 8001a5e:	6278      	str	r0, [r7, #36]	@ 0x24
			if (cJSON_IsObject(parsed_json)){
 8001a60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a62:	f00a fd0f 	bl	800c484 <cJSON_IsObject>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80ab 	beq.w	8001bc4 <uart_lwpkt_evt_fn+0x1ac>
				printf("A json object\r\n");
 8001a6e:	485d      	ldr	r0, [pc, #372]	@ (8001be4 <uart_lwpkt_evt_fn+0x1cc>)
 8001a70:	f00d fa58 	bl	800ef24 <puts>

				cJSON* power_json = cJSON_GetObjectItem(parsed_json, "p");
 8001a74:	495c      	ldr	r1, [pc, #368]	@ (8001be8 <uart_lwpkt_evt_fn+0x1d0>)
 8001a76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a78:	f00a fbab 	bl	800c1d2 <cJSON_GetObjectItem>
 8001a7c:	6238      	str	r0, [r7, #32]
				cJSON* theta_json = cJSON_GetObjectItem(parsed_json, "th");
 8001a7e:	495b      	ldr	r1, [pc, #364]	@ (8001bec <uart_lwpkt_evt_fn+0x1d4>)
 8001a80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a82:	f00a fba6 	bl	800c1d2 <cJSON_GetObjectItem>
 8001a86:	61f8      	str	r0, [r7, #28]
				cJSON* turn_json = cJSON_GetObjectItem(parsed_json, "tu");
 8001a88:	4959      	ldr	r1, [pc, #356]	@ (8001bf0 <uart_lwpkt_evt_fn+0x1d8>)
 8001a8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a8c:	f00a fba1 	bl	800c1d2 <cJSON_GetObjectItem>
 8001a90:	61b8      	str	r0, [r7, #24]
				cJSON* stop_json = cJSON_GetObjectItem(parsed_json, "stop");
 8001a92:	4958      	ldr	r1, [pc, #352]	@ (8001bf4 <uart_lwpkt_evt_fn+0x1dc>)
 8001a94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a96:	f00a fb9c 	bl	800c1d2 <cJSON_GetObjectItem>
 8001a9a:	6178      	str	r0, [r7, #20]

				osSemaphoreAcquire(mecanum_semHandle, osWaitForever);
 8001a9c:	4b56      	ldr	r3, [pc, #344]	@ (8001bf8 <uart_lwpkt_evt_fn+0x1e0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f005 f909 	bl	8006cbc <osSemaphoreAcquire>

				if (cJSON_IsTrue(stop_json)) {
 8001aaa:	6978      	ldr	r0, [r7, #20]
 8001aac:	f00a fcbc 	bl	800c428 <cJSON_IsTrue>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d006      	beq.n	8001ac4 <uart_lwpkt_evt_fn+0xac>
					printf("Robot stopped\r\n");
 8001ab6:	4851      	ldr	r0, [pc, #324]	@ (8001bfc <uart_lwpkt_evt_fn+0x1e4>)
 8001ab8:	f00d fa34 	bl	800ef24 <puts>
					mecanum_robot_stop(&robot);
 8001abc:	4850      	ldr	r0, [pc, #320]	@ (8001c00 <uart_lwpkt_evt_fn+0x1e8>)
 8001abe:	f00b fc31 	bl	800d324 <mecanum_robot_stop>
 8001ac2:	e072      	b.n	8001baa <uart_lwpkt_evt_fn+0x192>
				} else {
					if (cJSON_IsNumber(power_json) || cJSON_IsNumber(theta_json) || cJSON_IsNumber(turn_json)){
 8001ac4:	6a38      	ldr	r0, [r7, #32]
 8001ac6:	f00a fcc6 	bl	800c456 <cJSON_IsNumber>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10b      	bne.n	8001ae8 <uart_lwpkt_evt_fn+0xd0>
 8001ad0:	69f8      	ldr	r0, [r7, #28]
 8001ad2:	f00a fcc0 	bl	800c456 <cJSON_IsNumber>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <uart_lwpkt_evt_fn+0xd0>
 8001adc:	69b8      	ldr	r0, [r7, #24]
 8001ade:	f00a fcba 	bl	800c456 <cJSON_IsNumber>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d05d      	beq.n	8001ba4 <uart_lwpkt_evt_fn+0x18c>
						float power = CJSON_NUMBER_OR_ZERO(power_json);
 8001ae8:	6a38      	ldr	r0, [r7, #32]
 8001aea:	f00a fcb4 	bl	800c456 <cJSON_IsNumber>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00a      	beq.n	8001b0a <uart_lwpkt_evt_fn+0xf2>
 8001af4:	6a38      	ldr	r0, [r7, #32]
 8001af6:	f008 fc4f 	bl	800a398 <cJSON_GetNumberValue>
 8001afa:	ec53 2b10 	vmov	r2, r3, d0
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	f7ff f889 	bl	8000c18 <__aeabi_d2f>
 8001b06:	4603      	mov	r3, r0
 8001b08:	e001      	b.n	8001b0e <uart_lwpkt_evt_fn+0xf6>
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
						float theta = CJSON_NUMBER_OR_ZERO(theta_json);
 8001b10:	69f8      	ldr	r0, [r7, #28]
 8001b12:	f00a fca0 	bl	800c456 <cJSON_IsNumber>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00a      	beq.n	8001b32 <uart_lwpkt_evt_fn+0x11a>
 8001b1c:	69f8      	ldr	r0, [r7, #28]
 8001b1e:	f008 fc3b 	bl	800a398 <cJSON_GetNumberValue>
 8001b22:	ec53 2b10 	vmov	r2, r3, d0
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f7ff f875 	bl	8000c18 <__aeabi_d2f>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	e001      	b.n	8001b36 <uart_lwpkt_evt_fn+0x11e>
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
						float turn = CJSON_NUMBER_OR_ZERO(turn_json);
 8001b38:	69b8      	ldr	r0, [r7, #24]
 8001b3a:	f00a fc8c 	bl	800c456 <cJSON_IsNumber>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00a      	beq.n	8001b5a <uart_lwpkt_evt_fn+0x142>
 8001b44:	69b8      	ldr	r0, [r7, #24]
 8001b46:	f008 fc27 	bl	800a398 <cJSON_GetNumberValue>
 8001b4a:	ec53 2b10 	vmov	r2, r3, d0
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f7ff f861 	bl	8000c18 <__aeabi_d2f>
 8001b56:	4603      	mov	r3, r0
 8001b58:	e001      	b.n	8001b5e <uart_lwpkt_evt_fn+0x146>
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]

						printf("Power: %f, Theta: %f, Turn: %f\r\n", power, theta, turn);
 8001b60:	6938      	ldr	r0, [r7, #16]
 8001b62:	f7fe fd09 	bl	8000578 <__aeabi_f2d>
 8001b66:	4680      	mov	r8, r0
 8001b68:	4689      	mov	r9, r1
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f7fe fd04 	bl	8000578 <__aeabi_f2d>
 8001b70:	4604      	mov	r4, r0
 8001b72:	460d      	mov	r5, r1
 8001b74:	68b8      	ldr	r0, [r7, #8]
 8001b76:	f7fe fcff 	bl	8000578 <__aeabi_f2d>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b82:	e9cd 4500 	strd	r4, r5, [sp]
 8001b86:	4642      	mov	r2, r8
 8001b88:	464b      	mov	r3, r9
 8001b8a:	481e      	ldr	r0, [pc, #120]	@ (8001c04 <uart_lwpkt_evt_fn+0x1ec>)
 8001b8c:	f00d f962 	bl	800ee54 <iprintf>

						mecanum_robot_move(&robot, power, theta, turn);
 8001b90:	ed97 1a02 	vldr	s2, [r7, #8]
 8001b94:	edd7 0a03 	vldr	s1, [r7, #12]
 8001b98:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b9c:	4818      	ldr	r0, [pc, #96]	@ (8001c00 <uart_lwpkt_evt_fn+0x1e8>)
 8001b9e:	f00b fbdf 	bl	800d360 <mecanum_robot_move>
					if (cJSON_IsNumber(power_json) || cJSON_IsNumber(theta_json) || cJSON_IsNumber(turn_json)){
 8001ba2:	e002      	b.n	8001baa <uart_lwpkt_evt_fn+0x192>
					} else {
						printf("All necessary key/value pairs missing\r\n");
 8001ba4:	4818      	ldr	r0, [pc, #96]	@ (8001c08 <uart_lwpkt_evt_fn+0x1f0>)
 8001ba6:	f00d f9bd 	bl	800ef24 <puts>
					}
				}

				osSemaphoreRelease(mecanum_semHandle);
 8001baa:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <uart_lwpkt_evt_fn+0x1e0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f005 f8d6 	bl	8006d60 <osSemaphoreRelease>

				osTimerStart(timerHandle, pdMS_TO_TICKS(300));
 8001bb4:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <uart_lwpkt_evt_fn+0x1f4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f004 ffc5 	bl	8006b4c <osTimerStart>
 8001bc2:	e002      	b.n	8001bca <uart_lwpkt_evt_fn+0x1b2>

			} else {
				printf("Not a json object\r\n");
 8001bc4:	4812      	ldr	r0, [pc, #72]	@ (8001c10 <uart_lwpkt_evt_fn+0x1f8>)
 8001bc6:	f00d f9ad 	bl	800ef24 <puts>
			}

			cJSON_Delete(parsed_json);
 8001bca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001bcc:	f008 fcee 	bl	800a5ac <cJSON_Delete>
			break;
 8001bd0:	e000      	b.n	8001bd4 <uart_lwpkt_evt_fn+0x1bc>
		default:
			break;
 8001bd2:	bf00      	nop
	}
}
 8001bd4:	bf00      	nop
 8001bd6:	3730      	adds	r7, #48	@ 0x30
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bde:	bf00      	nop
 8001be0:	08013500 	.word	0x08013500
 8001be4:	0801351c 	.word	0x0801351c
 8001be8:	0801352c 	.word	0x0801352c
 8001bec:	08013530 	.word	0x08013530
 8001bf0:	08013534 	.word	0x08013534
 8001bf4:	08013538 	.word	0x08013538
 8001bf8:	20000bd0 	.word	0x20000bd0
 8001bfc:	08013540 	.word	0x08013540
 8001c00:	200000b0 	.word	0x200000b0
 8001c04:	08013550 	.word	0x08013550
 8001c08:	08013574 	.word	0x08013574
 8001c0c:	20000bc8 	.word	0x20000bc8
 8001c10:	0801359c 	.word	0x0801359c

08001c14 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART6) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a05      	ldr	r2, [pc, #20]	@ (8001c3c <HAL_UARTEx_RxEventCallback+0x28>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d103      	bne.n	8001c32 <HAL_UARTEx_RxEventCallback+0x1e>
    lwrb_uart_callback(Size);
 8001c2a:	887b      	ldrh	r3, [r7, #2]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fac1 	bl	80011b4 <lwrb_uart_callback>
  }
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40011400 	.word	0x40011400

08001c40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == B1_Pin) {
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c50:	d124      	bne.n	8001c9c <HAL_GPIO_EXTI_Callback+0x5c>
  	if (osSemaphoreAcquire(mecanum_semHandle, 0) == osOK){
 8001c52:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f005 f82f 	bl	8006cbc <osSemaphoreAcquire>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d11b      	bne.n	8001c9c <HAL_GPIO_EXTI_Callback+0x5c>
			GPIO_PinState state = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8001c64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c68:	480f      	ldr	r0, [pc, #60]	@ (8001ca8 <HAL_GPIO_EXTI_Callback+0x68>)
 8001c6a:	f001 fc77 	bl	800355c <HAL_GPIO_ReadPin>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]
			if (state == GPIO_PIN_SET) {
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d103      	bne.n	8001c80 <HAL_GPIO_EXTI_Callback+0x40>
				mecanum_robot_stop(&robot);
 8001c78:	480c      	ldr	r0, [pc, #48]	@ (8001cac <HAL_GPIO_EXTI_Callback+0x6c>)
 8001c7a:	f00b fb53 	bl	800d324 <mecanum_robot_stop>
 8001c7e:	e008      	b.n	8001c92 <HAL_GPIO_EXTI_Callback+0x52>
			} else {
				mecanum_robot_move(&robot, 0.5f, 1.57f, 0.0f);
 8001c80:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8001cb0 <HAL_GPIO_EXTI_Callback+0x70>
 8001c84:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8001cb4 <HAL_GPIO_EXTI_Callback+0x74>
 8001c88:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001c8c:	4807      	ldr	r0, [pc, #28]	@ (8001cac <HAL_GPIO_EXTI_Callback+0x6c>)
 8001c8e:	f00b fb67 	bl	800d360 <mecanum_robot_move>
			}
	    osSemaphoreRelease(mecanum_semHandle);
 8001c92:	4b04      	ldr	r3, [pc, #16]	@ (8001ca4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f005 f862 	bl	8006d60 <osSemaphoreRelease>
  	}
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000bd0 	.word	0x20000bd0
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	200000b0 	.word	0x200000b0
 8001cb0:	00000000 	.word	0x00000000
 8001cb4:	3fc8f5c3 	.word	0x3fc8f5c3

08001cb8 <callback>:

void callback(void* argument){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	printf("callback\r\n");
 8001cc0:	480b      	ldr	r0, [pc, #44]	@ (8001cf0 <callback+0x38>)
 8001cc2:	f00d f92f 	bl	800ef24 <puts>
	if (osSemaphoreAcquire(mecanum_semHandle, 0) == osOK){
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <callback+0x3c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f004 fff5 	bl	8006cbc <osSemaphoreAcquire>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d107      	bne.n	8001ce8 <callback+0x30>
		mecanum_robot_stop(&robot);
 8001cd8:	4807      	ldr	r0, [pc, #28]	@ (8001cf8 <callback+0x40>)
 8001cda:	f00b fb23 	bl	800d324 <mecanum_robot_stop>
		osSemaphoreRelease(mecanum_semHandle);
 8001cde:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <callback+0x3c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f005 f83c 	bl	8006d60 <osSemaphoreRelease>
	}
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	080135b0 	.word	0x080135b0
 8001cf4:	20000bd0 	.word	0x20000bd0
 8001cf8:	200000b0 	.word	0x200000b0

08001cfc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d00:	b094      	sub	sp, #80	@ 0x50
 8001d02:	af06      	add	r7, sp, #24
 8001d04:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("Start\r\n");
 8001d06:	4850      	ldr	r0, [pc, #320]	@ (8001e48 <StartDefaultTask+0x14c>)
 8001d08:	f00d f90c 	bl	800ef24 <puts>

	cJSON_InitHooks(&cjson_hooks);
 8001d0c:	484f      	ldr	r0, [pc, #316]	@ (8001e4c <StartDefaultTask+0x150>)
 8001d0e:	f008 fbf3 	bl	800a4f8 <cJSON_InitHooks>
	printf("cJSON hooks set\r\n");
 8001d12:	484f      	ldr	r0, [pc, #316]	@ (8001e50 <StartDefaultTask+0x154>)
 8001d14:	f00d f906 	bl	800ef24 <puts>

	mecanum_robot_init(&robot, HAL_GetTick());
 8001d18:	f000 fdac 	bl	8002874 <HAL_GetTick>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	484c      	ldr	r0, [pc, #304]	@ (8001e54 <StartDefaultTask+0x158>)
 8001d22:	f00b faca 	bl	800d2ba <mecanum_robot_init>

	lwpkt_lwrb_uart_init(&init_data);
 8001d26:	484c      	ldr	r0, [pc, #304]	@ (8001e58 <StartDefaultTask+0x15c>)
 8001d28:	f7ff f974 	bl	8001014 <lwpkt_lwrb_uart_init>
	printf("lwpkt initialized\r\n");
 8001d2c:	484b      	ldr	r0, [pc, #300]	@ (8001e5c <StartDefaultTask+0x160>)
 8001d2e:	f00d f8f9 	bl	800ef24 <puts>

	HAL_TIM_Base_Start_IT(&htim10);
 8001d32:	484b      	ldr	r0, [pc, #300]	@ (8001e60 <StartDefaultTask+0x164>)
 8001d34:	f002 f976 	bl	8004024 <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	for(;;)
	{
		four_wheeled_robot_encoders_speeds_t speeds;
		osMessageQueueGet(mecanum_encoder_speeds_queueHandle, &speeds, NULL, osWaitForever);
 8001d38:	4b4a      	ldr	r3, [pc, #296]	@ (8001e64 <StartDefaultTask+0x168>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	f107 010c 	add.w	r1, r7, #12
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d44:	2200      	movs	r2, #0
 8001d46:	f005 f923 	bl	8006f90 <osMessageQueueGet>

		cJSON* root_object = cJSON_CreateObject();
 8001d4a:	f00a fb59 	bl	800c400 <cJSON_CreateObject>
 8001d4e:	6378      	str	r0, [r7, #52]	@ 0x34

		cJSON* fl_speed = cJSON_CreateNumber(speeds.fl_speed);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fc10 	bl	8000578 <__aeabi_f2d>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	ec43 2b10 	vmov	d0, r2, r3
 8001d60:	f00a fb06 	bl	800c370 <cJSON_CreateNumber>
 8001d64:	6338      	str	r0, [r7, #48]	@ 0x30
		cJSON* fr_speed = cJSON_CreateNumber(speeds.fl_speed);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fc05 	bl	8000578 <__aeabi_f2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	ec43 2b10 	vmov	d0, r2, r3
 8001d76:	f00a fafb 	bl	800c370 <cJSON_CreateNumber>
 8001d7a:	62f8      	str	r0, [r7, #44]	@ 0x2c
		cJSON* bl_speed = cJSON_CreateNumber(speeds.fl_speed);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fbfa 	bl	8000578 <__aeabi_f2d>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	ec43 2b10 	vmov	d0, r2, r3
 8001d8c:	f00a faf0 	bl	800c370 <cJSON_CreateNumber>
 8001d90:	62b8      	str	r0, [r7, #40]	@ 0x28
		cJSON* br_speed = cJSON_CreateNumber(speeds.fl_speed);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbef 	bl	8000578 <__aeabi_f2d>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	ec43 2b10 	vmov	d0, r2, r3
 8001da2:	f00a fae5 	bl	800c370 <cJSON_CreateNumber>
 8001da6:	6278      	str	r0, [r7, #36]	@ 0x24

		cJSON_AddItemToObject(root_object, "fl_speed", fl_speed);
 8001da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001daa:	492f      	ldr	r1, [pc, #188]	@ (8001e68 <StartDefaultTask+0x16c>)
 8001dac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001dae:	f00a fac7 	bl	800c340 <cJSON_AddItemToObject>
		cJSON_AddItemToObject(root_object, "fr_speed", fr_speed);
 8001db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001db4:	492d      	ldr	r1, [pc, #180]	@ (8001e6c <StartDefaultTask+0x170>)
 8001db6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001db8:	f00a fac2 	bl	800c340 <cJSON_AddItemToObject>
		cJSON_AddItemToObject(root_object, "bl_speed", bl_speed);
 8001dbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001dbe:	492c      	ldr	r1, [pc, #176]	@ (8001e70 <StartDefaultTask+0x174>)
 8001dc0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001dc2:	f00a fabd 	bl	800c340 <cJSON_AddItemToObject>
		cJSON_AddItemToObject(root_object, "br_speed", br_speed);
 8001dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dc8:	492a      	ldr	r1, [pc, #168]	@ (8001e74 <StartDefaultTask+0x178>)
 8001dca:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001dcc:	f00a fab8 	bl	800c340 <cJSON_AddItemToObject>

		char* output = cJSON_Print(root_object);
 8001dd0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001dd2:	f009 fc6f 	bl	800b6b4 <cJSON_Print>
 8001dd6:	6238      	str	r0, [r7, #32]
		size_t size = strlen(output);
 8001dd8:	6a38      	ldr	r0, [r7, #32]
 8001dda:	f7fe fa61 	bl	80002a0 <strlen>
 8001dde:	61f8      	str	r0, [r7, #28]

		uart_lwpkt_write((void*)output, size);
 8001de0:	69f9      	ldr	r1, [r7, #28]
 8001de2:	6a38      	ldr	r0, [r7, #32]
 8001de4:	f7ff f9f8 	bl	80011d8 <uart_lwpkt_write>
		printf("fl:%f;fr:%f;bl:%f;br:%f\r\n", speeds.fl_speed, speeds.fr_speed, speeds.bl_speed, speeds.br_speed);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fbc4 	bl	8000578 <__aeabi_f2d>
 8001df0:	4682      	mov	sl, r0
 8001df2:	468b      	mov	fp, r1
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fbbe 	bl	8000578 <__aeabi_f2d>
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	460d      	mov	r5, r1
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fbb8 	bl	8000578 <__aeabi_f2d>
 8001e08:	4680      	mov	r8, r0
 8001e0a:	4689      	mov	r9, r1
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fbb2 	bl	8000578 <__aeabi_f2d>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001e1c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001e20:	e9cd 4500 	strd	r4, r5, [sp]
 8001e24:	4652      	mov	r2, sl
 8001e26:	465b      	mov	r3, fp
 8001e28:	4813      	ldr	r0, [pc, #76]	@ (8001e78 <StartDefaultTask+0x17c>)
 8001e2a:	f00d f813 	bl	800ee54 <iprintf>

		cJSON_Delete(root_object);
 8001e2e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e30:	f008 fbbc 	bl	800a5ac <cJSON_Delete>
		cjson_hooks.free_fn(output);
 8001e34:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <StartDefaultTask+0x180>)
 8001e36:	6a38      	ldr	r0, [r7, #32]
 8001e38:	4798      	blx	r3

		osDelay(1000);
 8001e3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e3e:	f004 fdd9 	bl	80069f4 <osDelay>
	{
 8001e42:	bf00      	nop
 8001e44:	e778      	b.n	8001d38 <StartDefaultTask+0x3c>
 8001e46:	bf00      	nop
 8001e48:	080135bc 	.word	0x080135bc
 8001e4c:	08013740 	.word	0x08013740
 8001e50:	080135c4 	.word	0x080135c4
 8001e54:	200000b0 	.word	0x200000b0
 8001e58:	08013748 	.word	0x08013748
 8001e5c:	080135d8 	.word	0x080135d8
 8001e60:	20000a8c 	.word	0x20000a8c
 8001e64:	20000bcc 	.word	0x20000bcc
 8001e68:	080135ec 	.word	0x080135ec
 8001e6c:	080135f8 	.word	0x080135f8
 8001e70:	08013604 	.word	0x08013604
 8001e74:	08013610 	.word	0x08013610
 8001e78:	0801361c 	.word	0x0801361c
 8001e7c:	0800a159 	.word	0x0800a159

08001e80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a28      	ldr	r2, [pc, #160]	@ (8001f30 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d102      	bne.n	8001e98 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8001e92:	f000 fcdb 	bl	800284c <HAL_IncTick>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);

	}

  /* USER CODE END Callback 1 */
}
 8001e96:	e047      	b.n	8001f28 <HAL_TIM_PeriodElapsedCallback+0xa8>
  else if (htim->Instance == TIM10) {
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a25      	ldr	r2, [pc, #148]	@ (8001f34 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d142      	bne.n	8001f28 <HAL_TIM_PeriodElapsedCallback+0xa8>
  	mecanum_robot_encoders_callback(&robot, HAL_GetTick());
 8001ea2:	f000 fce7 	bl	8002874 <HAL_GetTick>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4823      	ldr	r0, [pc, #140]	@ (8001f38 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001eac:	f00b fb62 	bl	800d574 <mecanum_robot_encoders_callback>
  	mecanum_robot_get_encoder_speeds(&robot, &speeds);
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4820      	ldr	r0, [pc, #128]	@ (8001f38 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001eb8:	f00b fb7d 	bl	800d5b6 <mecanum_robot_get_encoder_speeds>
  	speeds.fl_speed *= 1000.0f;
 8001ebc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ec0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001f3c <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec8:	edc7 7a04 	vstr	s15, [r7, #16]
  	speeds.fr_speed *= 1000.0f;
 8001ecc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ed0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001f3c <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed8:	edc7 7a05 	vstr	s15, [r7, #20]
  	speeds.bl_speed *= 1000.0f;
 8001edc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ee0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001f3c <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee8:	edc7 7a06 	vstr	s15, [r7, #24]
  	speeds.br_speed *= 1000.0f;
 8001eec:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ef0:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001f3c <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001ef4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef8:	edc7 7a07 	vstr	s15, [r7, #28]
  	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  	xQueueOverwriteFromISR((QueueHandle_t)mecanum_encoder_speeds_queueHandle, &speeds, &xHigherPriorityTaskWoken);
 8001f00:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	f107 020c 	add.w	r2, r7, #12
 8001f08:	f107 0110 	add.w	r1, r7, #16
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	f005 fc3b 	bl	8007788 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8001f18:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f3bf 8f4f 	dsb	sy
 8001f24:	f3bf 8f6f 	isb	sy
}
 8001f28:	bf00      	nop
 8001f2a:	3720      	adds	r7, #32
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40014800 	.word	0x40014800
 8001f34:	40014400 	.word	0x40014400
 8001f38:	200000b0 	.word	0x200000b0
 8001f3c:	447a0000 	.word	0x447a0000
 8001f40:	20000bcc 	.word	0x20000bcc
 8001f44:	e000ed04 	.word	0xe000ed04

08001f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f4c:	b672      	cpsid	i
}
 8001f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <Error_Handler+0x8>

08001f54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <HAL_MspInit+0x54>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f62:	4a11      	ldr	r2, [pc, #68]	@ (8001fa8 <HAL_MspInit+0x54>)
 8001f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa8 <HAL_MspInit+0x54>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <HAL_MspInit+0x54>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <HAL_MspInit+0x54>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f86:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <HAL_MspInit+0x54>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	210f      	movs	r1, #15
 8001f96:	f06f 0001 	mvn.w	r0, #1
 8001f9a:	f000 fd2f 	bl	80029fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a20      	ldr	r2, [pc, #128]	@ (800203c <HAL_TIM_Base_MspInit+0x90>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d11e      	bne.n	8001ffc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8002040 <HAL_TIM_Base_MspInit+0x94>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002040 <HAL_TIM_Base_MspInit+0x94>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fce:	4b1c      	ldr	r3, [pc, #112]	@ (8002040 <HAL_TIM_Base_MspInit+0x94>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2105      	movs	r1, #5
 8001fde:	2019      	movs	r0, #25
 8001fe0:	f000 fd0c 	bl	80029fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fe4:	2019      	movs	r0, #25
 8001fe6:	f000 fd25 	bl	8002a34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	210f      	movs	r1, #15
 8001fee:	201a      	movs	r0, #26
 8001ff0:	f000 fd04 	bl	80029fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ff4:	201a      	movs	r0, #26
 8001ff6:	f000 fd1d 	bl	8002a34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001ffa:	e01a      	b.n	8002032 <HAL_TIM_Base_MspInit+0x86>
  else if(htim_base->Instance==TIM10)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a10      	ldr	r2, [pc, #64]	@ (8002044 <HAL_TIM_Base_MspInit+0x98>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d115      	bne.n	8002032 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	4b0d      	ldr	r3, [pc, #52]	@ (8002040 <HAL_TIM_Base_MspInit+0x94>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	4a0c      	ldr	r2, [pc, #48]	@ (8002040 <HAL_TIM_Base_MspInit+0x94>)
 8002010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002014:	6453      	str	r3, [r2, #68]	@ 0x44
 8002016:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <HAL_TIM_Base_MspInit+0x94>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2105      	movs	r1, #5
 8002026:	2019      	movs	r0, #25
 8002028:	f000 fce8 	bl	80029fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800202c:	2019      	movs	r0, #25
 800202e:	f000 fd01 	bl	8002a34 <HAL_NVIC_EnableIRQ>
}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40010000 	.word	0x40010000
 8002040:	40023800 	.word	0x40023800
 8002044:	40014400 	.word	0x40014400

08002048 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b092      	sub	sp, #72	@ 0x48
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002068:	d14a      	bne.n	8002100 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	633b      	str	r3, [r7, #48]	@ 0x30
 800206e:	4b80      	ldr	r3, [pc, #512]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	4a7f      	ldr	r2, [pc, #508]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6413      	str	r3, [r2, #64]	@ 0x40
 800207a:	4b7d      	ldr	r3, [pc, #500]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	633b      	str	r3, [r7, #48]	@ 0x30
 8002084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800208a:	4b79      	ldr	r3, [pc, #484]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	4a78      	ldr	r2, [pc, #480]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6313      	str	r3, [r2, #48]	@ 0x30
 8002096:	4b76      	ldr	r3, [pc, #472]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020a6:	4b72      	ldr	r3, [pc, #456]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	4a71      	ldr	r2, [pc, #452]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = FL_ENCODER_A_Pin;
 80020be:	2320      	movs	r3, #32
 80020c0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020ce:	2301      	movs	r3, #1
 80020d0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(FL_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 80020d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020d6:	4619      	mov	r1, r3
 80020d8:	4866      	ldr	r0, [pc, #408]	@ (8002274 <HAL_TIM_Encoder_MspInit+0x22c>)
 80020da:	f001 f8bb 	bl	8003254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FL_ENCODER_B_Pin;
 80020de:	2308      	movs	r3, #8
 80020e0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e2:	2302      	movs	r3, #2
 80020e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020ee:	2301      	movs	r3, #1
 80020f0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(FL_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 80020f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020f6:	4619      	mov	r1, r3
 80020f8:	485f      	ldr	r0, [pc, #380]	@ (8002278 <HAL_TIM_Encoder_MspInit+0x230>)
 80020fa:	f001 f8ab 	bl	8003254 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80020fe:	e0b2      	b.n	8002266 <HAL_TIM_Encoder_MspInit+0x21e>
  else if(htim_encoder->Instance==TIM3)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a5d      	ldr	r2, [pc, #372]	@ (800227c <HAL_TIM_Encoder_MspInit+0x234>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d14a      	bne.n	80021a0 <HAL_TIM_Encoder_MspInit+0x158>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24
 800210e:	4b58      	ldr	r3, [pc, #352]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	4a57      	ldr	r2, [pc, #348]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	6413      	str	r3, [r2, #64]	@ 0x40
 800211a:	4b55      	ldr	r3, [pc, #340]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
 800212a:	4b51      	ldr	r3, [pc, #324]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a50      	ldr	r2, [pc, #320]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b4e      	ldr	r3, [pc, #312]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	623b      	str	r3, [r7, #32]
 8002140:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	4b4a      	ldr	r3, [pc, #296]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	4a49      	ldr	r2, [pc, #292]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	6313      	str	r3, [r2, #48]	@ 0x30
 8002152:	4b47      	ldr	r3, [pc, #284]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = FR_ENCODER_B_Pin;
 800215e:	2380      	movs	r3, #128	@ 0x80
 8002160:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800216e:	2302      	movs	r3, #2
 8002170:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(FR_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8002172:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002176:	4619      	mov	r1, r3
 8002178:	4841      	ldr	r0, [pc, #260]	@ (8002280 <HAL_TIM_Encoder_MspInit+0x238>)
 800217a:	f001 f86b 	bl	8003254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FR_ENCODER_A_Pin;
 800217e:	2310      	movs	r3, #16
 8002180:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800218e:	2302      	movs	r3, #2
 8002190:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(FR_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8002192:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002196:	4619      	mov	r1, r3
 8002198:	4837      	ldr	r0, [pc, #220]	@ (8002278 <HAL_TIM_Encoder_MspInit+0x230>)
 800219a:	f001 f85b 	bl	8003254 <HAL_GPIO_Init>
}
 800219e:	e062      	b.n	8002266 <HAL_TIM_Encoder_MspInit+0x21e>
  else if(htim_encoder->Instance==TIM4)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a37      	ldr	r2, [pc, #220]	@ (8002284 <HAL_TIM_Encoder_MspInit+0x23c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d12c      	bne.n	8002204 <HAL_TIM_Encoder_MspInit+0x1bc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	4b30      	ldr	r3, [pc, #192]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	4b29      	ldr	r3, [pc, #164]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	4a28      	ldr	r2, [pc, #160]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d6:	4b26      	ldr	r3, [pc, #152]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BL_ENCODER_A_Pin|BL_ENCODER_B_Pin;
 80021e2:	23c0      	movs	r3, #192	@ 0xc0
 80021e4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021f2:	2302      	movs	r3, #2
 80021f4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021fa:	4619      	mov	r1, r3
 80021fc:	481e      	ldr	r0, [pc, #120]	@ (8002278 <HAL_TIM_Encoder_MspInit+0x230>)
 80021fe:	f001 f829 	bl	8003254 <HAL_GPIO_Init>
}
 8002202:	e030      	b.n	8002266 <HAL_TIM_Encoder_MspInit+0x21e>
  else if(htim_encoder->Instance==TIM5)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1f      	ldr	r2, [pc, #124]	@ (8002288 <HAL_TIM_Encoder_MspInit+0x240>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d12b      	bne.n	8002266 <HAL_TIM_Encoder_MspInit+0x21e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	4b17      	ldr	r3, [pc, #92]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	4a16      	ldr	r2, [pc, #88]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 8002218:	f043 0308 	orr.w	r3, r3, #8
 800221c:	6413      	str	r3, [r2, #64]	@ 0x40
 800221e:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4a0f      	ldr	r2, [pc, #60]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	@ 0x30
 800223a:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x228>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BR_ENCODER_A_Pin|BR_ENCODER_B_Pin;
 8002246:	2303      	movs	r3, #3
 8002248:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002252:	2300      	movs	r3, #0
 8002254:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002256:	2302      	movs	r3, #2
 8002258:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800225e:	4619      	mov	r1, r3
 8002260:	4804      	ldr	r0, [pc, #16]	@ (8002274 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002262:	f000 fff7 	bl	8003254 <HAL_GPIO_Init>
}
 8002266:	bf00      	nop
 8002268:	3748      	adds	r7, #72	@ 0x48
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400
 800227c:	40000400 	.word	0x40000400
 8002280:	40020800 	.word	0x40020800
 8002284:	40000800 	.word	0x40000800
 8002288:	40000c00 	.word	0x40000c00

0800228c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a12      	ldr	r2, [pc, #72]	@ (80022f4 <HAL_TIM_MspPostInit+0x68>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d11e      	bne.n	80022ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <HAL_TIM_MspPostInit+0x6c>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a10      	ldr	r2, [pc, #64]	@ (80022f8 <HAL_TIM_MspPostInit+0x6c>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <HAL_TIM_MspPostInit+0x6c>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = FL_MOTOR_EN_Pin|FR_MOTOR_EN_Pin|BL_MOTOR_EN_Pin|BR_MOTOR_EN_Pin;
 80022ca:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80022ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022dc:	2301      	movs	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	4619      	mov	r1, r3
 80022e6:	4805      	ldr	r0, [pc, #20]	@ (80022fc <HAL_TIM_MspPostInit+0x70>)
 80022e8:	f000 ffb4 	bl	8003254 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022ec:	bf00      	nop
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40010000 	.word	0x40010000
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020000 	.word	0x40020000

08002300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	@ 0x30
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 031c 	add.w	r3, r7, #28
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a5d      	ldr	r2, [pc, #372]	@ (8002494 <HAL_UART_MspInit+0x194>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d12c      	bne.n	800237c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
 8002326:	4b5c      	ldr	r3, [pc, #368]	@ (8002498 <HAL_UART_MspInit+0x198>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	4a5b      	ldr	r2, [pc, #364]	@ (8002498 <HAL_UART_MspInit+0x198>)
 800232c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002330:	6413      	str	r3, [r2, #64]	@ 0x40
 8002332:	4b59      	ldr	r3, [pc, #356]	@ (8002498 <HAL_UART_MspInit+0x198>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233a:	61bb      	str	r3, [r7, #24]
 800233c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	4b55      	ldr	r3, [pc, #340]	@ (8002498 <HAL_UART_MspInit+0x198>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	4a54      	ldr	r2, [pc, #336]	@ (8002498 <HAL_UART_MspInit+0x198>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6313      	str	r3, [r2, #48]	@ 0x30
 800234e:	4b52      	ldr	r3, [pc, #328]	@ (8002498 <HAL_UART_MspInit+0x198>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800235a:	2304      	movs	r3, #4
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800235e:	2312      	movs	r3, #18
 8002360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800236a:	2307      	movs	r3, #7
 800236c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236e:	f107 031c 	add.w	r3, r7, #28
 8002372:	4619      	mov	r1, r3
 8002374:	4849      	ldr	r0, [pc, #292]	@ (800249c <HAL_UART_MspInit+0x19c>)
 8002376:	f000 ff6d 	bl	8003254 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800237a:	e087      	b.n	800248c <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==USART6)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a47      	ldr	r2, [pc, #284]	@ (80024a0 <HAL_UART_MspInit+0x1a0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	f040 8082 	bne.w	800248c <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	4b42      	ldr	r3, [pc, #264]	@ (8002498 <HAL_UART_MspInit+0x198>)
 800238e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002390:	4a41      	ldr	r2, [pc, #260]	@ (8002498 <HAL_UART_MspInit+0x198>)
 8002392:	f043 0320 	orr.w	r3, r3, #32
 8002396:	6453      	str	r3, [r2, #68]	@ 0x44
 8002398:	4b3f      	ldr	r3, [pc, #252]	@ (8002498 <HAL_UART_MspInit+0x198>)
 800239a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002498 <HAL_UART_MspInit+0x198>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ac:	4a3a      	ldr	r2, [pc, #232]	@ (8002498 <HAL_UART_MspInit+0x198>)
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b4:	4b38      	ldr	r3, [pc, #224]	@ (8002498 <HAL_UART_MspInit+0x198>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	4b34      	ldr	r3, [pc, #208]	@ (8002498 <HAL_UART_MspInit+0x198>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	4a33      	ldr	r2, [pc, #204]	@ (8002498 <HAL_UART_MspInit+0x198>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d0:	4b31      	ldr	r3, [pc, #196]	@ (8002498 <HAL_UART_MspInit+0x198>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023dc:	2340      	movs	r3, #64	@ 0x40
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80023ec:	2308      	movs	r3, #8
 80023ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	4619      	mov	r1, r3
 80023f6:	482b      	ldr	r0, [pc, #172]	@ (80024a4 <HAL_UART_MspInit+0x1a4>)
 80023f8:	f000 ff2c 	bl	8003254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80023fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800240e:	2308      	movs	r3, #8
 8002410:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	4619      	mov	r1, r3
 8002418:	4820      	ldr	r0, [pc, #128]	@ (800249c <HAL_UART_MspInit+0x19c>)
 800241a:	f000 ff1b 	bl	8003254 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800241e:	4b22      	ldr	r3, [pc, #136]	@ (80024a8 <HAL_UART_MspInit+0x1a8>)
 8002420:	4a22      	ldr	r2, [pc, #136]	@ (80024ac <HAL_UART_MspInit+0x1ac>)
 8002422:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002424:	4b20      	ldr	r3, [pc, #128]	@ (80024a8 <HAL_UART_MspInit+0x1a8>)
 8002426:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800242a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800242c:	4b1e      	ldr	r3, [pc, #120]	@ (80024a8 <HAL_UART_MspInit+0x1a8>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002432:	4b1d      	ldr	r3, [pc, #116]	@ (80024a8 <HAL_UART_MspInit+0x1a8>)
 8002434:	2200      	movs	r2, #0
 8002436:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002438:	4b1b      	ldr	r3, [pc, #108]	@ (80024a8 <HAL_UART_MspInit+0x1a8>)
 800243a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800243e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002440:	4b19      	ldr	r3, [pc, #100]	@ (80024a8 <HAL_UART_MspInit+0x1a8>)
 8002442:	2200      	movs	r2, #0
 8002444:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002446:	4b18      	ldr	r3, [pc, #96]	@ (80024a8 <HAL_UART_MspInit+0x1a8>)
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800244c:	4b16      	ldr	r3, [pc, #88]	@ (80024a8 <HAL_UART_MspInit+0x1a8>)
 800244e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002452:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002454:	4b14      	ldr	r3, [pc, #80]	@ (80024a8 <HAL_UART_MspInit+0x1a8>)
 8002456:	2200      	movs	r2, #0
 8002458:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800245a:	4b13      	ldr	r3, [pc, #76]	@ (80024a8 <HAL_UART_MspInit+0x1a8>)
 800245c:	2200      	movs	r2, #0
 800245e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002460:	4811      	ldr	r0, [pc, #68]	@ (80024a8 <HAL_UART_MspInit+0x1a8>)
 8002462:	f000 faf5 	bl	8002a50 <HAL_DMA_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_UART_MspInit+0x170>
      Error_Handler();
 800246c:	f7ff fd6c 	bl	8001f48 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a0d      	ldr	r2, [pc, #52]	@ (80024a8 <HAL_UART_MspInit+0x1a8>)
 8002474:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002476:	4a0c      	ldr	r2, [pc, #48]	@ (80024a8 <HAL_UART_MspInit+0x1a8>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800247c:	2200      	movs	r2, #0
 800247e:	2105      	movs	r1, #5
 8002480:	2047      	movs	r0, #71	@ 0x47
 8002482:	f000 fabb 	bl	80029fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002486:	2047      	movs	r0, #71	@ 0x47
 8002488:	f000 fad4 	bl	8002a34 <HAL_NVIC_EnableIRQ>
}
 800248c:	bf00      	nop
 800248e:	3730      	adds	r7, #48	@ 0x30
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40004400 	.word	0x40004400
 8002498:	40023800 	.word	0x40023800
 800249c:	40020000 	.word	0x40020000
 80024a0:	40011400 	.word	0x40011400
 80024a4:	40020800 	.word	0x40020800
 80024a8:	20000b64 	.word	0x20000b64
 80024ac:	40026428 	.word	0x40026428

080024b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	@ 0x30
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002580 <HAL_InitTick+0xd0>)
 80024c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002580 <HAL_InitTick+0xd0>)
 80024ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80024d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002580 <HAL_InitTick+0xd0>)
 80024d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024dc:	f107 020c 	add.w	r2, r7, #12
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f001 fd1a 	bl	8003f20 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80024ec:	f001 fd04 	bl	8003ef8 <HAL_RCC_GetPCLK2Freq>
 80024f0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f4:	4a23      	ldr	r2, [pc, #140]	@ (8002584 <HAL_InitTick+0xd4>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	0c9b      	lsrs	r3, r3, #18
 80024fc:	3b01      	subs	r3, #1
 80024fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8002500:	4b21      	ldr	r3, [pc, #132]	@ (8002588 <HAL_InitTick+0xd8>)
 8002502:	4a22      	ldr	r2, [pc, #136]	@ (800258c <HAL_InitTick+0xdc>)
 8002504:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8002506:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <HAL_InitTick+0xd8>)
 8002508:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800250c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800250e:	4a1e      	ldr	r2, [pc, #120]	@ (8002588 <HAL_InitTick+0xd8>)
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8002514:	4b1c      	ldr	r3, [pc, #112]	@ (8002588 <HAL_InitTick+0xd8>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800251a:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <HAL_InitTick+0xd8>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002520:	4b19      	ldr	r3, [pc, #100]	@ (8002588 <HAL_InitTick+0xd8>)
 8002522:	2200      	movs	r2, #0
 8002524:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8002526:	4818      	ldr	r0, [pc, #96]	@ (8002588 <HAL_InitTick+0xd8>)
 8002528:	f001 fd2c 	bl	8003f84 <HAL_TIM_Base_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002532:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002536:	2b00      	cmp	r3, #0
 8002538:	d11b      	bne.n	8002572 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 800253a:	4813      	ldr	r0, [pc, #76]	@ (8002588 <HAL_InitTick+0xd8>)
 800253c:	f001 fd72 	bl	8004024 <HAL_TIM_Base_Start_IT>
 8002540:	4603      	mov	r3, r0
 8002542:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002546:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800254a:	2b00      	cmp	r3, #0
 800254c:	d111      	bne.n	8002572 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800254e:	201a      	movs	r0, #26
 8002550:	f000 fa70 	bl	8002a34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b0f      	cmp	r3, #15
 8002558:	d808      	bhi.n	800256c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 800255a:	2200      	movs	r2, #0
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	201a      	movs	r0, #26
 8002560:	f000 fa4c 	bl	80029fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002564:	4a0a      	ldr	r2, [pc, #40]	@ (8002590 <HAL_InitTick+0xe0>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e002      	b.n	8002572 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002572:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002576:	4618      	mov	r0, r3
 8002578:	3730      	adds	r7, #48	@ 0x30
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	431bde83 	.word	0x431bde83
 8002588:	20000bd4 	.word	0x20000bd4
 800258c:	40014800 	.word	0x40014800
 8002590:	200000d4 	.word	0x200000d4

08002594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <NMI_Handler+0x4>

0800259c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a0:	bf00      	nop
 80025a2:	e7fd      	b.n	80025a0 <HardFault_Handler+0x4>

080025a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <MemManage_Handler+0x4>

080025ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <BusFault_Handler+0x4>

080025b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <UsageFault_Handler+0x4>

080025bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025d0:	4803      	ldr	r0, [pc, #12]	@ (80025e0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80025d2:	f002 f82b 	bl	800462c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80025d6:	4803      	ldr	r0, [pc, #12]	@ (80025e4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80025d8:	f002 f828 	bl	800462c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000924 	.word	0x20000924
 80025e4:	20000a8c 	.word	0x20000a8c

080025e8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025ec:	4803      	ldr	r0, [pc, #12]	@ (80025fc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80025ee:	f002 f81d 	bl	800462c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80025f2:	4803      	ldr	r0, [pc, #12]	@ (8002600 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80025f4:	f002 f81a 	bl	800462c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000924 	.word	0x20000924
 8002600:	20000bd4 	.word	0x20000bd4

08002604 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002608:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800260c:	f000 ffd8 	bl	80035c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}

08002614 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002618:	4802      	ldr	r0, [pc, #8]	@ (8002624 <DMA2_Stream1_IRQHandler+0x10>)
 800261a:	f000 fbb1 	bl	8002d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000b64 	.word	0x20000b64

08002628 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800262c:	4802      	ldr	r0, [pc, #8]	@ (8002638 <USART6_IRQHandler+0x10>)
 800262e:	f002 ffdb 	bl	80055e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000b1c 	.word	0x20000b1c

0800263c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return 1;
 8002640:	2301      	movs	r3, #1
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <_kill>:

int _kill(int pid, int sig)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002656:	f00c fe5b 	bl	800f310 <__errno>
 800265a:	4603      	mov	r3, r0
 800265c:	2216      	movs	r2, #22
 800265e:	601a      	str	r2, [r3, #0]
  return -1;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <_exit>:

void _exit (int status)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002674:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ffe7 	bl	800264c <_kill>
  while (1) {}    /* Make sure we hang here */
 800267e:	bf00      	nop
 8002680:	e7fd      	b.n	800267e <_exit+0x12>

08002682 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	e00a      	b.n	80026aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002694:	f3af 8000 	nop.w
 8002698:	4601      	mov	r1, r0
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	60ba      	str	r2, [r7, #8]
 80026a0:	b2ca      	uxtb	r2, r1
 80026a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3301      	adds	r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	dbf0      	blt.n	8002694 <_read+0x12>
  }

  return len;
 80026b2:	687b      	ldr	r3, [r7, #4]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <_close>:
  }
  return len;
}

int _close(int file)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026e4:	605a      	str	r2, [r3, #4]
  return 0;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_isatty>:

int _isatty(int file)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026fc:	2301      	movs	r3, #1
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800272c:	4a14      	ldr	r2, [pc, #80]	@ (8002780 <_sbrk+0x5c>)
 800272e:	4b15      	ldr	r3, [pc, #84]	@ (8002784 <_sbrk+0x60>)
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002738:	4b13      	ldr	r3, [pc, #76]	@ (8002788 <_sbrk+0x64>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002740:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <_sbrk+0x64>)
 8002742:	4a12      	ldr	r2, [pc, #72]	@ (800278c <_sbrk+0x68>)
 8002744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002746:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <_sbrk+0x64>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	429a      	cmp	r2, r3
 8002752:	d207      	bcs.n	8002764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002754:	f00c fddc 	bl	800f310 <__errno>
 8002758:	4603      	mov	r3, r0
 800275a:	220c      	movs	r2, #12
 800275c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002762:	e009      	b.n	8002778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002764:	4b08      	ldr	r3, [pc, #32]	@ (8002788 <_sbrk+0x64>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800276a:	4b07      	ldr	r3, [pc, #28]	@ (8002788 <_sbrk+0x64>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	4a05      	ldr	r2, [pc, #20]	@ (8002788 <_sbrk+0x64>)
 8002774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002776:	68fb      	ldr	r3, [r7, #12]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20020000 	.word	0x20020000
 8002784:	00000400 	.word	0x00000400
 8002788:	20000c1c 	.word	0x20000c1c
 800278c:	20005760 	.word	0x20005760

08002790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <SystemInit+0x20>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279a:	4a05      	ldr	r2, [pc, #20]	@ (80027b0 <SystemInit+0x20>)
 800279c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027b8:	f7ff ffea 	bl	8002790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027bc:	480c      	ldr	r0, [pc, #48]	@ (80027f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027be:	490d      	ldr	r1, [pc, #52]	@ (80027f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027c0:	4a0d      	ldr	r2, [pc, #52]	@ (80027f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c4:	e002      	b.n	80027cc <LoopCopyDataInit>

080027c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ca:	3304      	adds	r3, #4

080027cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d0:	d3f9      	bcc.n	80027c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d2:	4a0a      	ldr	r2, [pc, #40]	@ (80027fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002800 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d8:	e001      	b.n	80027de <LoopFillZerobss>

080027da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027dc:	3204      	adds	r2, #4

080027de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e0:	d3fb      	bcc.n	80027da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027e2:	f00c fd9b 	bl	800f31c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027e6:	f7fe fd09 	bl	80011fc <main>
  bx  lr    
 80027ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f4:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 80027f8:	08013d98 	.word	0x08013d98
  ldr r2, =_sbss
 80027fc:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 8002800:	20005760 	.word	0x20005760

08002804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002804:	e7fe      	b.n	8002804 <ADC_IRQHandler>
	...

08002808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800280c:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <HAL_Init+0x40>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0d      	ldr	r2, [pc, #52]	@ (8002848 <HAL_Init+0x40>)
 8002812:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002816:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002818:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_Init+0x40>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0a      	ldr	r2, [pc, #40]	@ (8002848 <HAL_Init+0x40>)
 800281e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002822:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002824:	4b08      	ldr	r3, [pc, #32]	@ (8002848 <HAL_Init+0x40>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a07      	ldr	r2, [pc, #28]	@ (8002848 <HAL_Init+0x40>)
 800282a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800282e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002830:	2003      	movs	r0, #3
 8002832:	f000 f8d8 	bl	80029e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002836:	200f      	movs	r0, #15
 8002838:	f7ff fe3a 	bl	80024b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800283c:	f7ff fb8a 	bl	8001f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023c00 	.word	0x40023c00

0800284c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002850:	4b06      	ldr	r3, [pc, #24]	@ (800286c <HAL_IncTick+0x20>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_IncTick+0x24>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4413      	add	r3, r2
 800285c:	4a04      	ldr	r2, [pc, #16]	@ (8002870 <HAL_IncTick+0x24>)
 800285e:	6013      	str	r3, [r2, #0]
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	200000d8 	.word	0x200000d8
 8002870:	20000c20 	.word	0x20000c20

08002874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return uwTick;
 8002878:	4b03      	ldr	r3, [pc, #12]	@ (8002888 <HAL_GetTick+0x14>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000c20 	.word	0x20000c20

0800288c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800289c:	4b0c      	ldr	r3, [pc, #48]	@ (80028d0 <__NVIC_SetPriorityGrouping+0x44>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028a8:	4013      	ands	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028be:	4a04      	ldr	r2, [pc, #16]	@ (80028d0 <__NVIC_SetPriorityGrouping+0x44>)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	60d3      	str	r3, [r2, #12]
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d8:	4b04      	ldr	r3, [pc, #16]	@ (80028ec <__NVIC_GetPriorityGrouping+0x18>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	f003 0307 	and.w	r3, r3, #7
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	db0b      	blt.n	800291a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	f003 021f 	and.w	r2, r3, #31
 8002908:	4907      	ldr	r1, [pc, #28]	@ (8002928 <__NVIC_EnableIRQ+0x38>)
 800290a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	2001      	movs	r0, #1
 8002912:	fa00 f202 	lsl.w	r2, r0, r2
 8002916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000e100 	.word	0xe000e100

0800292c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	2b00      	cmp	r3, #0
 800293e:	db0a      	blt.n	8002956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	490c      	ldr	r1, [pc, #48]	@ (8002978 <__NVIC_SetPriority+0x4c>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	0112      	lsls	r2, r2, #4
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	440b      	add	r3, r1
 8002950:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002954:	e00a      	b.n	800296c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4908      	ldr	r1, [pc, #32]	@ (800297c <__NVIC_SetPriority+0x50>)
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	3b04      	subs	r3, #4
 8002964:	0112      	lsls	r2, r2, #4
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	440b      	add	r3, r1
 800296a:	761a      	strb	r2, [r3, #24]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000e100 	.word	0xe000e100
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	@ 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f1c3 0307 	rsb	r3, r3, #7
 800299a:	2b04      	cmp	r3, #4
 800299c:	bf28      	it	cs
 800299e:	2304      	movcs	r3, #4
 80029a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d902      	bls.n	80029b0 <NVIC_EncodePriority+0x30>
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3b03      	subs	r3, #3
 80029ae:	e000      	b.n	80029b2 <NVIC_EncodePriority+0x32>
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	401a      	ands	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	43d9      	mvns	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	4313      	orrs	r3, r2
         );
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3724      	adds	r7, #36	@ 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff ff4c 	bl	800288c <__NVIC_SetPriorityGrouping>
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a0e:	f7ff ff61 	bl	80028d4 <__NVIC_GetPriorityGrouping>
 8002a12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	6978      	ldr	r0, [r7, #20]
 8002a1a:	f7ff ffb1 	bl	8002980 <NVIC_EncodePriority>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ff80 	bl	800292c <__NVIC_SetPriority>
}
 8002a2c:	bf00      	nop
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ff54 	bl	80028f0 <__NVIC_EnableIRQ>
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a5c:	f7ff ff0a 	bl	8002874 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e099      	b.n	8002ba0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a8c:	e00f      	b.n	8002aae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a8e:	f7ff fef1 	bl	8002874 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b05      	cmp	r3, #5
 8002a9a:	d908      	bls.n	8002aae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e078      	b.n	8002ba0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e8      	bne.n	8002a8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	4b38      	ldr	r3, [pc, #224]	@ (8002ba8 <HAL_DMA_Init+0x158>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d107      	bne.n	8002b18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b10:	4313      	orrs	r3, r2
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f023 0307 	bic.w	r3, r3, #7
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d117      	bne.n	8002b72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00e      	beq.n	8002b72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fb01 	bl	800315c <DMA_CheckFifoParam>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2240      	movs	r2, #64	@ 0x40
 8002b64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e016      	b.n	8002ba0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fab8 	bl	80030f0 <DMA_CalcBaseAndBitshift>
 8002b80:	4603      	mov	r3, r0
 8002b82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b88:	223f      	movs	r2, #63	@ 0x3f
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	f010803f 	.word	0xf010803f

08002bac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_DMA_Start_IT+0x26>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e040      	b.n	8002c54 <HAL_DMA_Start_IT+0xa8>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d12f      	bne.n	8002c46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2202      	movs	r2, #2
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fa4a 	bl	8003094 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c04:	223f      	movs	r2, #63	@ 0x3f
 8002c06:	409a      	lsls	r2, r3
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0216 	orr.w	r2, r2, #22
 8002c1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d007      	beq.n	8002c34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0208 	orr.w	r2, r2, #8
 8002c32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e005      	b.n	8002c52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c6a:	f7ff fe03 	bl	8002874 <HAL_GetTick>
 8002c6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d008      	beq.n	8002c8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2280      	movs	r2, #128	@ 0x80
 8002c80:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e052      	b.n	8002d34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0216 	bic.w	r2, r2, #22
 8002c9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d103      	bne.n	8002cbe <HAL_DMA_Abort+0x62>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0208 	bic.w	r2, r2, #8
 8002ccc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cde:	e013      	b.n	8002d08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ce0:	f7ff fdc8 	bl	8002874 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	d90c      	bls.n	8002d08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e015      	b.n	8002d34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1e4      	bne.n	8002ce0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1a:	223f      	movs	r2, #63	@ 0x3f
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d004      	beq.n	8002d5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2280      	movs	r2, #128	@ 0x80
 8002d54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00c      	b.n	8002d74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2205      	movs	r2, #5
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d8c:	4b8e      	ldr	r3, [pc, #568]	@ (8002fc8 <HAL_DMA_IRQHandler+0x248>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a8e      	ldr	r2, [pc, #568]	@ (8002fcc <HAL_DMA_IRQHandler+0x24c>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	0a9b      	lsrs	r3, r3, #10
 8002d98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002daa:	2208      	movs	r2, #8
 8002dac:	409a      	lsls	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01a      	beq.n	8002dec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d013      	beq.n	8002dec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0204 	bic.w	r2, r2, #4
 8002dd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd8:	2208      	movs	r2, #8
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de4:	f043 0201 	orr.w	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df0:	2201      	movs	r2, #1
 8002df2:	409a      	lsls	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d012      	beq.n	8002e22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0e:	2201      	movs	r2, #1
 8002e10:	409a      	lsls	r2, r3
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1a:	f043 0202 	orr.w	r2, r3, #2
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e26:	2204      	movs	r2, #4
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d012      	beq.n	8002e58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00b      	beq.n	8002e58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e44:	2204      	movs	r2, #4
 8002e46:	409a      	lsls	r2, r3
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e50:	f043 0204 	orr.w	r2, r3, #4
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5c:	2210      	movs	r2, #16
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d043      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d03c      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7a:	2210      	movs	r2, #16
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d018      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d108      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d024      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	4798      	blx	r3
 8002eae:	e01f      	b.n	8002ef0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01b      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
 8002ec0:	e016      	b.n	8002ef0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d107      	bne.n	8002ee0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0208 	bic.w	r2, r2, #8
 8002ede:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 808f 	beq.w	8003020 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8087 	beq.w	8003020 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f16:	2220      	movs	r2, #32
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	d136      	bne.n	8002f98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0216 	bic.w	r2, r2, #22
 8002f38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d103      	bne.n	8002f5a <HAL_DMA_IRQHandler+0x1da>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0208 	bic.w	r2, r2, #8
 8002f68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6e:	223f      	movs	r2, #63	@ 0x3f
 8002f70:	409a      	lsls	r2, r3
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d07e      	beq.n	800308c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	4798      	blx	r3
        }
        return;
 8002f96:	e079      	b.n	800308c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d01d      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10d      	bne.n	8002fd0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d031      	beq.n	8003020 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	4798      	blx	r3
 8002fc4:	e02c      	b.n	8003020 <HAL_DMA_IRQHandler+0x2a0>
 8002fc6:	bf00      	nop
 8002fc8:	200000d0 	.word	0x200000d0
 8002fcc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d023      	beq.n	8003020 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	4798      	blx	r3
 8002fe0:	e01e      	b.n	8003020 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10f      	bne.n	8003010 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0210 	bic.w	r2, r2, #16
 8002ffe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003024:	2b00      	cmp	r3, #0
 8003026:	d032      	beq.n	800308e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d022      	beq.n	800307a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2205      	movs	r2, #5
 8003038:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0201 	bic.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	3301      	adds	r3, #1
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	429a      	cmp	r2, r3
 8003056:	d307      	bcc.n	8003068 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f2      	bne.n	800304c <HAL_DMA_IRQHandler+0x2cc>
 8003066:	e000      	b.n	800306a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003068:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	4798      	blx	r3
 800308a:	e000      	b.n	800308e <HAL_DMA_IRQHandler+0x30e>
        return;
 800308c:	bf00      	nop
    }
  }
}
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b40      	cmp	r3, #64	@ 0x40
 80030c0:	d108      	bne.n	80030d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030d2:	e007      	b.n	80030e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	60da      	str	r2, [r3, #12]
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	3b10      	subs	r3, #16
 8003100:	4a14      	ldr	r2, [pc, #80]	@ (8003154 <DMA_CalcBaseAndBitshift+0x64>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800310a:	4a13      	ldr	r2, [pc, #76]	@ (8003158 <DMA_CalcBaseAndBitshift+0x68>)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d909      	bls.n	8003132 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003126:	f023 0303 	bic.w	r3, r3, #3
 800312a:	1d1a      	adds	r2, r3, #4
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003130:	e007      	b.n	8003142 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800313a:	f023 0303 	bic.w	r3, r3, #3
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003146:	4618      	mov	r0, r3
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	aaaaaaab 	.word	0xaaaaaaab
 8003158:	08013768 	.word	0x08013768

0800315c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d11f      	bne.n	80031b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d856      	bhi.n	800322a <DMA_CheckFifoParam+0xce>
 800317c:	a201      	add	r2, pc, #4	@ (adr r2, 8003184 <DMA_CheckFifoParam+0x28>)
 800317e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003182:	bf00      	nop
 8003184:	08003195 	.word	0x08003195
 8003188:	080031a7 	.word	0x080031a7
 800318c:	08003195 	.word	0x08003195
 8003190:	0800322b 	.word	0x0800322b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d046      	beq.n	800322e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a4:	e043      	b.n	800322e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031ae:	d140      	bne.n	8003232 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b4:	e03d      	b.n	8003232 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031be:	d121      	bne.n	8003204 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d837      	bhi.n	8003236 <DMA_CheckFifoParam+0xda>
 80031c6:	a201      	add	r2, pc, #4	@ (adr r2, 80031cc <DMA_CheckFifoParam+0x70>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	080031dd 	.word	0x080031dd
 80031d0:	080031e3 	.word	0x080031e3
 80031d4:	080031dd 	.word	0x080031dd
 80031d8:	080031f5 	.word	0x080031f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
      break;
 80031e0:	e030      	b.n	8003244 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d025      	beq.n	800323a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f2:	e022      	b.n	800323a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031fc:	d11f      	bne.n	800323e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003202:	e01c      	b.n	800323e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d903      	bls.n	8003212 <DMA_CheckFifoParam+0xb6>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d003      	beq.n	8003218 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003210:	e018      	b.n	8003244 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
      break;
 8003216:	e015      	b.n	8003244 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00e      	beq.n	8003242 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
      break;
 8003228:	e00b      	b.n	8003242 <DMA_CheckFifoParam+0xe6>
      break;
 800322a:	bf00      	nop
 800322c:	e00a      	b.n	8003244 <DMA_CheckFifoParam+0xe8>
      break;
 800322e:	bf00      	nop
 8003230:	e008      	b.n	8003244 <DMA_CheckFifoParam+0xe8>
      break;
 8003232:	bf00      	nop
 8003234:	e006      	b.n	8003244 <DMA_CheckFifoParam+0xe8>
      break;
 8003236:	bf00      	nop
 8003238:	e004      	b.n	8003244 <DMA_CheckFifoParam+0xe8>
      break;
 800323a:	bf00      	nop
 800323c:	e002      	b.n	8003244 <DMA_CheckFifoParam+0xe8>
      break;   
 800323e:	bf00      	nop
 8003240:	e000      	b.n	8003244 <DMA_CheckFifoParam+0xe8>
      break;
 8003242:	bf00      	nop
    }
  } 
  
  return status; 
 8003244:	7bfb      	ldrb	r3, [r7, #15]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop

08003254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003254:	b480      	push	{r7}
 8003256:	b089      	sub	sp, #36	@ 0x24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	e159      	b.n	8003524 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003270:	2201      	movs	r2, #1
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	429a      	cmp	r2, r3
 800328a:	f040 8148 	bne.w	800351e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d005      	beq.n	80032a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d130      	bne.n	8003308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	2203      	movs	r2, #3
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032dc:	2201      	movs	r2, #1
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f003 0201 	and.w	r2, r3, #1
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b03      	cmp	r3, #3
 8003312:	d017      	beq.n	8003344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	2203      	movs	r2, #3
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d123      	bne.n	8003398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	08da      	lsrs	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3208      	adds	r2, #8
 8003358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	220f      	movs	r2, #15
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	08da      	lsrs	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3208      	adds	r2, #8
 8003392:	69b9      	ldr	r1, [r7, #24]
 8003394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0203 	and.w	r2, r3, #3
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80a2 	beq.w	800351e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4b57      	ldr	r3, [pc, #348]	@ (800353c <HAL_GPIO_Init+0x2e8>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e2:	4a56      	ldr	r2, [pc, #344]	@ (800353c <HAL_GPIO_Init+0x2e8>)
 80033e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ea:	4b54      	ldr	r3, [pc, #336]	@ (800353c <HAL_GPIO_Init+0x2e8>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033f6:	4a52      	ldr	r2, [pc, #328]	@ (8003540 <HAL_GPIO_Init+0x2ec>)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	3302      	adds	r3, #2
 80033fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	220f      	movs	r2, #15
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a49      	ldr	r2, [pc, #292]	@ (8003544 <HAL_GPIO_Init+0x2f0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d019      	beq.n	8003456 <HAL_GPIO_Init+0x202>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a48      	ldr	r2, [pc, #288]	@ (8003548 <HAL_GPIO_Init+0x2f4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_GPIO_Init+0x1fe>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a47      	ldr	r2, [pc, #284]	@ (800354c <HAL_GPIO_Init+0x2f8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00d      	beq.n	800344e <HAL_GPIO_Init+0x1fa>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a46      	ldr	r2, [pc, #280]	@ (8003550 <HAL_GPIO_Init+0x2fc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d007      	beq.n	800344a <HAL_GPIO_Init+0x1f6>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a45      	ldr	r2, [pc, #276]	@ (8003554 <HAL_GPIO_Init+0x300>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d101      	bne.n	8003446 <HAL_GPIO_Init+0x1f2>
 8003442:	2304      	movs	r3, #4
 8003444:	e008      	b.n	8003458 <HAL_GPIO_Init+0x204>
 8003446:	2307      	movs	r3, #7
 8003448:	e006      	b.n	8003458 <HAL_GPIO_Init+0x204>
 800344a:	2303      	movs	r3, #3
 800344c:	e004      	b.n	8003458 <HAL_GPIO_Init+0x204>
 800344e:	2302      	movs	r3, #2
 8003450:	e002      	b.n	8003458 <HAL_GPIO_Init+0x204>
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <HAL_GPIO_Init+0x204>
 8003456:	2300      	movs	r3, #0
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	f002 0203 	and.w	r2, r2, #3
 800345e:	0092      	lsls	r2, r2, #2
 8003460:	4093      	lsls	r3, r2
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003468:	4935      	ldr	r1, [pc, #212]	@ (8003540 <HAL_GPIO_Init+0x2ec>)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	3302      	adds	r3, #2
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003476:	4b38      	ldr	r3, [pc, #224]	@ (8003558 <HAL_GPIO_Init+0x304>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800349a:	4a2f      	ldr	r2, [pc, #188]	@ (8003558 <HAL_GPIO_Init+0x304>)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003558 <HAL_GPIO_Init+0x304>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034c4:	4a24      	ldr	r2, [pc, #144]	@ (8003558 <HAL_GPIO_Init+0x304>)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ca:	4b23      	ldr	r3, [pc, #140]	@ (8003558 <HAL_GPIO_Init+0x304>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003558 <HAL_GPIO_Init+0x304>)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034f4:	4b18      	ldr	r3, [pc, #96]	@ (8003558 <HAL_GPIO_Init+0x304>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003518:	4a0f      	ldr	r2, [pc, #60]	@ (8003558 <HAL_GPIO_Init+0x304>)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	3301      	adds	r3, #1
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	2b0f      	cmp	r3, #15
 8003528:	f67f aea2 	bls.w	8003270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	3724      	adds	r7, #36	@ 0x24
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800
 8003540:	40013800 	.word	0x40013800
 8003544:	40020000 	.word	0x40020000
 8003548:	40020400 	.word	0x40020400
 800354c:	40020800 	.word	0x40020800
 8003550:	40020c00 	.word	0x40020c00
 8003554:	40021000 	.word	0x40021000
 8003558:	40013c00 	.word	0x40013c00

0800355c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	887b      	ldrh	r3, [r7, #2]
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	e001      	b.n	800357e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	807b      	strh	r3, [r7, #2]
 8003598:	4613      	mov	r3, r2
 800359a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800359c:	787b      	ldrb	r3, [r7, #1]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035a2:	887a      	ldrh	r2, [r7, #2]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035a8:	e003      	b.n	80035b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035aa:	887b      	ldrh	r3, [r7, #2]
 80035ac:	041a      	lsls	r2, r3, #16
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	619a      	str	r2, [r3, #24]
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035ca:	4b08      	ldr	r3, [pc, #32]	@ (80035ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d006      	beq.n	80035e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035d6:	4a05      	ldr	r2, [pc, #20]	@ (80035ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe fb2e 	bl	8001c40 <HAL_GPIO_EXTI_Callback>
  }
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40013c00 	.word	0x40013c00

080035f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e267      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d075      	beq.n	80036fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800360e:	4b88      	ldr	r3, [pc, #544]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b04      	cmp	r3, #4
 8003618:	d00c      	beq.n	8003634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800361a:	4b85      	ldr	r3, [pc, #532]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003622:	2b08      	cmp	r3, #8
 8003624:	d112      	bne.n	800364c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003626:	4b82      	ldr	r3, [pc, #520]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003632:	d10b      	bne.n	800364c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003634:	4b7e      	ldr	r3, [pc, #504]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d05b      	beq.n	80036f8 <HAL_RCC_OscConfig+0x108>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d157      	bne.n	80036f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e242      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003654:	d106      	bne.n	8003664 <HAL_RCC_OscConfig+0x74>
 8003656:	4b76      	ldr	r3, [pc, #472]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a75      	ldr	r2, [pc, #468]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800365c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	e01d      	b.n	80036a0 <HAL_RCC_OscConfig+0xb0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800366c:	d10c      	bne.n	8003688 <HAL_RCC_OscConfig+0x98>
 800366e:	4b70      	ldr	r3, [pc, #448]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a6f      	ldr	r2, [pc, #444]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	4b6d      	ldr	r3, [pc, #436]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a6c      	ldr	r2, [pc, #432]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	e00b      	b.n	80036a0 <HAL_RCC_OscConfig+0xb0>
 8003688:	4b69      	ldr	r3, [pc, #420]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a68      	ldr	r2, [pc, #416]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800368e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	4b66      	ldr	r3, [pc, #408]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a65      	ldr	r2, [pc, #404]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800369a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800369e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d013      	beq.n	80036d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7ff f8e4 	bl	8002874 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b0:	f7ff f8e0 	bl	8002874 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b64      	cmp	r3, #100	@ 0x64
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e207      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0xc0>
 80036ce:	e014      	b.n	80036fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d0:	f7ff f8d0 	bl	8002874 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d8:	f7ff f8cc 	bl	8002874 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b64      	cmp	r3, #100	@ 0x64
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e1f3      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ea:	4b51      	ldr	r3, [pc, #324]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0xe8>
 80036f6:	e000      	b.n	80036fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d063      	beq.n	80037ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003706:	4b4a      	ldr	r3, [pc, #296]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00b      	beq.n	800372a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003712:	4b47      	ldr	r3, [pc, #284]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800371a:	2b08      	cmp	r3, #8
 800371c:	d11c      	bne.n	8003758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800371e:	4b44      	ldr	r3, [pc, #272]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d116      	bne.n	8003758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372a:	4b41      	ldr	r3, [pc, #260]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_RCC_OscConfig+0x152>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d001      	beq.n	8003742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e1c7      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003742:	4b3b      	ldr	r3, [pc, #236]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4937      	ldr	r1, [pc, #220]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003756:	e03a      	b.n	80037ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d020      	beq.n	80037a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003760:	4b34      	ldr	r3, [pc, #208]	@ (8003834 <HAL_RCC_OscConfig+0x244>)
 8003762:	2201      	movs	r2, #1
 8003764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003766:	f7ff f885 	bl	8002874 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800376e:	f7ff f881 	bl	8002874 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e1a8      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003780:	4b2b      	ldr	r3, [pc, #172]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0f0      	beq.n	800376e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378c:	4b28      	ldr	r3, [pc, #160]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	4925      	ldr	r1, [pc, #148]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 800379c:	4313      	orrs	r3, r2
 800379e:	600b      	str	r3, [r1, #0]
 80037a0:	e015      	b.n	80037ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a2:	4b24      	ldr	r3, [pc, #144]	@ (8003834 <HAL_RCC_OscConfig+0x244>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7ff f864 	bl	8002874 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037b0:	f7ff f860 	bl	8002874 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e187      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d036      	beq.n	8003848 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d016      	beq.n	8003810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037e2:	4b15      	ldr	r3, [pc, #84]	@ (8003838 <HAL_RCC_OscConfig+0x248>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e8:	f7ff f844 	bl	8002874 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f0:	f7ff f840 	bl	8002874 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e167      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003802:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <HAL_RCC_OscConfig+0x240>)
 8003804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x200>
 800380e:	e01b      	b.n	8003848 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003810:	4b09      	ldr	r3, [pc, #36]	@ (8003838 <HAL_RCC_OscConfig+0x248>)
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003816:	f7ff f82d 	bl	8002874 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800381c:	e00e      	b.n	800383c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800381e:	f7ff f829 	bl	8002874 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d907      	bls.n	800383c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e150      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
 8003830:	40023800 	.word	0x40023800
 8003834:	42470000 	.word	0x42470000
 8003838:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800383c:	4b88      	ldr	r3, [pc, #544]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 800383e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ea      	bne.n	800381e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8097 	beq.w	8003984 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003856:	2300      	movs	r3, #0
 8003858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385a:	4b81      	ldr	r3, [pc, #516]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10f      	bne.n	8003886 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	4b7d      	ldr	r3, [pc, #500]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 800386c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386e:	4a7c      	ldr	r2, [pc, #496]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003874:	6413      	str	r3, [r2, #64]	@ 0x40
 8003876:	4b7a      	ldr	r3, [pc, #488]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003882:	2301      	movs	r3, #1
 8003884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003886:	4b77      	ldr	r3, [pc, #476]	@ (8003a64 <HAL_RCC_OscConfig+0x474>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d118      	bne.n	80038c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003892:	4b74      	ldr	r3, [pc, #464]	@ (8003a64 <HAL_RCC_OscConfig+0x474>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a73      	ldr	r2, [pc, #460]	@ (8003a64 <HAL_RCC_OscConfig+0x474>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800389c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389e:	f7fe ffe9 	bl	8002874 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fe ffe5 	bl	8002874 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e10c      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a64 <HAL_RCC_OscConfig+0x474>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d106      	bne.n	80038da <HAL_RCC_OscConfig+0x2ea>
 80038cc:	4b64      	ldr	r3, [pc, #400]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d0:	4a63      	ldr	r2, [pc, #396]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038d8:	e01c      	b.n	8003914 <HAL_RCC_OscConfig+0x324>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b05      	cmp	r3, #5
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0x30c>
 80038e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e6:	4a5e      	ldr	r2, [pc, #376]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038fa:	e00b      	b.n	8003914 <HAL_RCC_OscConfig+0x324>
 80038fc:	4b58      	ldr	r3, [pc, #352]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003900:	4a57      	ldr	r2, [pc, #348]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	6713      	str	r3, [r2, #112]	@ 0x70
 8003908:	4b55      	ldr	r3, [pc, #340]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390c:	4a54      	ldr	r2, [pc, #336]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 800390e:	f023 0304 	bic.w	r3, r3, #4
 8003912:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d015      	beq.n	8003948 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391c:	f7fe ffaa 	bl	8002874 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003922:	e00a      	b.n	800393a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003924:	f7fe ffa6 	bl	8002874 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003932:	4293      	cmp	r3, r2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e0cb      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393a:	4b49      	ldr	r3, [pc, #292]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0ee      	beq.n	8003924 <HAL_RCC_OscConfig+0x334>
 8003946:	e014      	b.n	8003972 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003948:	f7fe ff94 	bl	8002874 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800394e:	e00a      	b.n	8003966 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003950:	f7fe ff90 	bl	8002874 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e0b5      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003966:	4b3e      	ldr	r3, [pc, #248]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1ee      	bne.n	8003950 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003972:	7dfb      	ldrb	r3, [r7, #23]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d105      	bne.n	8003984 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003978:	4b39      	ldr	r3, [pc, #228]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	4a38      	ldr	r2, [pc, #224]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 800397e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003982:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80a1 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800398e:	4b34      	ldr	r3, [pc, #208]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b08      	cmp	r3, #8
 8003998:	d05c      	beq.n	8003a54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d141      	bne.n	8003a26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a2:	4b31      	ldr	r3, [pc, #196]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7fe ff64 	bl	8002874 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b0:	f7fe ff60 	bl	8002874 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e087      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c2:	4b27      	ldr	r3, [pc, #156]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69da      	ldr	r2, [r3, #28]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	019b      	lsls	r3, r3, #6
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e4:	085b      	lsrs	r3, r3, #1
 80039e6:	3b01      	subs	r3, #1
 80039e8:	041b      	lsls	r3, r3, #16
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	491b      	ldr	r1, [pc, #108]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fe:	f7fe ff39 	bl	8002874 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a06:	f7fe ff35 	bl	8002874 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e05c      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a18:	4b11      	ldr	r3, [pc, #68]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x416>
 8003a24:	e054      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a26:	4b10      	ldr	r3, [pc, #64]	@ (8003a68 <HAL_RCC_OscConfig+0x478>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7fe ff22 	bl	8002874 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fe ff1e 	bl	8002874 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e045      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a46:	4b06      	ldr	r3, [pc, #24]	@ (8003a60 <HAL_RCC_OscConfig+0x470>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x444>
 8003a52:	e03d      	b.n	8003ad0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d107      	bne.n	8003a6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e038      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40007000 	.word	0x40007000
 8003a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003adc <HAL_RCC_OscConfig+0x4ec>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d028      	beq.n	8003acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d121      	bne.n	8003acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d11a      	bne.n	8003acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d111      	bne.n	8003acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab2:	085b      	lsrs	r3, r3, #1
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d107      	bne.n	8003acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40023800 	.word	0x40023800

08003ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0cc      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003af4:	4b68      	ldr	r3, [pc, #416]	@ (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d90c      	bls.n	8003b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	4b65      	ldr	r3, [pc, #404]	@ (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b63      	ldr	r3, [pc, #396]	@ (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0b8      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d020      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b34:	4b59      	ldr	r3, [pc, #356]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4a58      	ldr	r2, [pc, #352]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b4c:	4b53      	ldr	r3, [pc, #332]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	4a52      	ldr	r2, [pc, #328]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b58:	4b50      	ldr	r3, [pc, #320]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	494d      	ldr	r1, [pc, #308]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d044      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7e:	4b47      	ldr	r3, [pc, #284]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d119      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e07f      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d003      	beq.n	8003b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d107      	bne.n	8003bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e06f      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bae:	4b3b      	ldr	r3, [pc, #236]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e067      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bbe:	4b37      	ldr	r3, [pc, #220]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f023 0203 	bic.w	r2, r3, #3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4934      	ldr	r1, [pc, #208]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bd0:	f7fe fe50 	bl	8002874 <HAL_GetTick>
 8003bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd8:	f7fe fe4c 	bl	8002874 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e04f      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bee:	4b2b      	ldr	r3, [pc, #172]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 020c 	and.w	r2, r3, #12
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d1eb      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c00:	4b25      	ldr	r3, [pc, #148]	@ (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d20c      	bcs.n	8003c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b22      	ldr	r3, [pc, #136]	@ (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b20      	ldr	r3, [pc, #128]	@ (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e032      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c34:	4b19      	ldr	r3, [pc, #100]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4916      	ldr	r1, [pc, #88]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c52:	4b12      	ldr	r3, [pc, #72]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	490e      	ldr	r1, [pc, #56]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c66:	f000 f821 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	490a      	ldr	r1, [pc, #40]	@ (8003ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c78:	5ccb      	ldrb	r3, [r1, r3]
 8003c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7e:	4a09      	ldr	r2, [pc, #36]	@ (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c82:	4b09      	ldr	r3, [pc, #36]	@ (8003ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fc12 	bl	80024b0 <HAL_InitTick>

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40023c00 	.word	0x40023c00
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	08013750 	.word	0x08013750
 8003ca4:	200000d0 	.word	0x200000d0
 8003ca8:	200000d4 	.word	0x200000d4

08003cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb0:	b094      	sub	sp, #80	@ 0x50
 8003cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cb8:	2300      	movs	r3, #0
 8003cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cc4:	4b79      	ldr	r3, [pc, #484]	@ (8003eac <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 030c 	and.w	r3, r3, #12
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d00d      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0x40>
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	f200 80e1 	bhi.w	8003e98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d003      	beq.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cde:	e0db      	b.n	8003e98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ce0:	4b73      	ldr	r3, [pc, #460]	@ (8003eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003ce4:	e0db      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ce6:	4b73      	ldr	r3, [pc, #460]	@ (8003eb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cea:	e0d8      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cec:	4b6f      	ldr	r3, [pc, #444]	@ (8003eac <HAL_RCC_GetSysClockFreq+0x200>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cf4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8003eac <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d063      	beq.n	8003dca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d02:	4b6a      	ldr	r3, [pc, #424]	@ (8003eac <HAL_RCC_GetSysClockFreq+0x200>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	099b      	lsrs	r3, r3, #6
 8003d08:	2200      	movs	r2, #0
 8003d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d16:	2300      	movs	r3, #0
 8003d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d1e:	4622      	mov	r2, r4
 8003d20:	462b      	mov	r3, r5
 8003d22:	f04f 0000 	mov.w	r0, #0
 8003d26:	f04f 0100 	mov.w	r1, #0
 8003d2a:	0159      	lsls	r1, r3, #5
 8003d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d30:	0150      	lsls	r0, r2, #5
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4621      	mov	r1, r4
 8003d38:	1a51      	subs	r1, r2, r1
 8003d3a:	6139      	str	r1, [r7, #16]
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d50:	4659      	mov	r1, fp
 8003d52:	018b      	lsls	r3, r1, #6
 8003d54:	4651      	mov	r1, sl
 8003d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d5a:	4651      	mov	r1, sl
 8003d5c:	018a      	lsls	r2, r1, #6
 8003d5e:	4651      	mov	r1, sl
 8003d60:	ebb2 0801 	subs.w	r8, r2, r1
 8003d64:	4659      	mov	r1, fp
 8003d66:	eb63 0901 	sbc.w	r9, r3, r1
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d7e:	4690      	mov	r8, r2
 8003d80:	4699      	mov	r9, r3
 8003d82:	4623      	mov	r3, r4
 8003d84:	eb18 0303 	adds.w	r3, r8, r3
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	462b      	mov	r3, r5
 8003d8c:	eb49 0303 	adc.w	r3, r9, r3
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d9e:	4629      	mov	r1, r5
 8003da0:	024b      	lsls	r3, r1, #9
 8003da2:	4621      	mov	r1, r4
 8003da4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003da8:	4621      	mov	r1, r4
 8003daa:	024a      	lsls	r2, r1, #9
 8003dac:	4610      	mov	r0, r2
 8003dae:	4619      	mov	r1, r3
 8003db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003db2:	2200      	movs	r2, #0
 8003db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003dbc:	f7fc ff7c 	bl	8000cb8 <__aeabi_uldivmod>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dc8:	e058      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dca:	4b38      	ldr	r3, [pc, #224]	@ (8003eac <HAL_RCC_GetSysClockFreq+0x200>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	099b      	lsrs	r3, r3, #6
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dda:	623b      	str	r3, [r7, #32]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003de4:	4642      	mov	r2, r8
 8003de6:	464b      	mov	r3, r9
 8003de8:	f04f 0000 	mov.w	r0, #0
 8003dec:	f04f 0100 	mov.w	r1, #0
 8003df0:	0159      	lsls	r1, r3, #5
 8003df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003df6:	0150      	lsls	r0, r2, #5
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e02:	4649      	mov	r1, r9
 8003e04:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e1c:	ebb2 040a 	subs.w	r4, r2, sl
 8003e20:	eb63 050b 	sbc.w	r5, r3, fp
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	00eb      	lsls	r3, r5, #3
 8003e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e32:	00e2      	lsls	r2, r4, #3
 8003e34:	4614      	mov	r4, r2
 8003e36:	461d      	mov	r5, r3
 8003e38:	4643      	mov	r3, r8
 8003e3a:	18e3      	adds	r3, r4, r3
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	464b      	mov	r3, r9
 8003e40:	eb45 0303 	adc.w	r3, r5, r3
 8003e44:	607b      	str	r3, [r7, #4]
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e52:	4629      	mov	r1, r5
 8003e54:	028b      	lsls	r3, r1, #10
 8003e56:	4621      	mov	r1, r4
 8003e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	028a      	lsls	r2, r1, #10
 8003e60:	4610      	mov	r0, r2
 8003e62:	4619      	mov	r1, r3
 8003e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e66:	2200      	movs	r2, #0
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	61fa      	str	r2, [r7, #28]
 8003e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e70:	f7fc ff22 	bl	8000cb8 <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4613      	mov	r3, r2
 8003e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <HAL_RCC_GetSysClockFreq+0x200>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	3301      	adds	r3, #1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003e8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e96:	e002      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e98:	4b05      	ldr	r3, [pc, #20]	@ (8003eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3750      	adds	r7, #80	@ 0x50
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	00f42400 	.word	0x00f42400
 8003eb4:	007a1200 	.word	0x007a1200

08003eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ebc:	4b03      	ldr	r3, [pc, #12]	@ (8003ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	200000d0 	.word	0x200000d0

08003ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ed4:	f7ff fff0 	bl	8003eb8 <HAL_RCC_GetHCLKFreq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b05      	ldr	r3, [pc, #20]	@ (8003ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	0a9b      	lsrs	r3, r3, #10
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	4903      	ldr	r1, [pc, #12]	@ (8003ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ee6:	5ccb      	ldrb	r3, [r1, r3]
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	08013760 	.word	0x08013760

08003ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003efc:	f7ff ffdc 	bl	8003eb8 <HAL_RCC_GetHCLKFreq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b05      	ldr	r3, [pc, #20]	@ (8003f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	0b5b      	lsrs	r3, r3, #13
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	4903      	ldr	r1, [pc, #12]	@ (8003f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f0e:	5ccb      	ldrb	r3, [r1, r3]
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	08013760 	.word	0x08013760

08003f20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	220f      	movs	r2, #15
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f30:	4b12      	ldr	r3, [pc, #72]	@ (8003f7c <HAL_RCC_GetClockConfig+0x5c>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 0203 	and.w	r2, r3, #3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f7c <HAL_RCC_GetClockConfig+0x5c>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f48:	4b0c      	ldr	r3, [pc, #48]	@ (8003f7c <HAL_RCC_GetClockConfig+0x5c>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f54:	4b09      	ldr	r3, [pc, #36]	@ (8003f7c <HAL_RCC_GetClockConfig+0x5c>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	08db      	lsrs	r3, r3, #3
 8003f5a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f62:	4b07      	ldr	r3, [pc, #28]	@ (8003f80 <HAL_RCC_GetClockConfig+0x60>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0207 	and.w	r2, r3, #7
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	601a      	str	r2, [r3, #0]
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	40023c00 	.word	0x40023c00

08003f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e041      	b.n	800401a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fd fffe 	bl	8001fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	f000 fdd4 	bl	8004b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d001      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e044      	b.n	80040c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1e      	ldr	r2, [pc, #120]	@ (80040d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d018      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x6c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004066:	d013      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x6c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1a      	ldr	r2, [pc, #104]	@ (80040d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00e      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x6c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a19      	ldr	r2, [pc, #100]	@ (80040dc <HAL_TIM_Base_Start_IT+0xb8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d009      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x6c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a17      	ldr	r2, [pc, #92]	@ (80040e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x6c>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a16      	ldr	r2, [pc, #88]	@ (80040e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d111      	bne.n	80040b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b06      	cmp	r3, #6
 80040a0:	d010      	beq.n	80040c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0201 	orr.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b2:	e007      	b.n	80040c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40010000 	.word	0x40010000
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40000800 	.word	0x40000800
 80040e0:	40000c00 	.word	0x40000c00
 80040e4:	40014000 	.word	0x40014000

080040e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e041      	b.n	800417e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f839 	bl	8004186 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	4619      	mov	r1, r3
 8004126:	4610      	mov	r0, r2
 8004128:	f000 fd22 	bl	8004b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d109      	bne.n	80041c0 <HAL_TIM_PWM_Start+0x24>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	bf14      	ite	ne
 80041b8:	2301      	movne	r3, #1
 80041ba:	2300      	moveq	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e022      	b.n	8004206 <HAL_TIM_PWM_Start+0x6a>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d109      	bne.n	80041da <HAL_TIM_PWM_Start+0x3e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	bf14      	ite	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	2300      	moveq	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	e015      	b.n	8004206 <HAL_TIM_PWM_Start+0x6a>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d109      	bne.n	80041f4 <HAL_TIM_PWM_Start+0x58>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	bf14      	ite	ne
 80041ec:	2301      	movne	r3, #1
 80041ee:	2300      	moveq	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	e008      	b.n	8004206 <HAL_TIM_PWM_Start+0x6a>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e068      	b.n	80042e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d104      	bne.n	800421e <HAL_TIM_PWM_Start+0x82>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800421c:	e013      	b.n	8004246 <HAL_TIM_PWM_Start+0xaa>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b04      	cmp	r3, #4
 8004222:	d104      	bne.n	800422e <HAL_TIM_PWM_Start+0x92>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800422c:	e00b      	b.n	8004246 <HAL_TIM_PWM_Start+0xaa>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d104      	bne.n	800423e <HAL_TIM_PWM_Start+0xa2>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800423c:	e003      	b.n	8004246 <HAL_TIM_PWM_Start+0xaa>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2201      	movs	r2, #1
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 ff40 	bl	80050d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a23      	ldr	r2, [pc, #140]	@ (80042e8 <HAL_TIM_PWM_Start+0x14c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d107      	bne.n	800426e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800426c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1d      	ldr	r2, [pc, #116]	@ (80042e8 <HAL_TIM_PWM_Start+0x14c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d018      	beq.n	80042aa <HAL_TIM_PWM_Start+0x10e>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004280:	d013      	beq.n	80042aa <HAL_TIM_PWM_Start+0x10e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a19      	ldr	r2, [pc, #100]	@ (80042ec <HAL_TIM_PWM_Start+0x150>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00e      	beq.n	80042aa <HAL_TIM_PWM_Start+0x10e>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a17      	ldr	r2, [pc, #92]	@ (80042f0 <HAL_TIM_PWM_Start+0x154>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d009      	beq.n	80042aa <HAL_TIM_PWM_Start+0x10e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a16      	ldr	r2, [pc, #88]	@ (80042f4 <HAL_TIM_PWM_Start+0x158>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_TIM_PWM_Start+0x10e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a14      	ldr	r2, [pc, #80]	@ (80042f8 <HAL_TIM_PWM_Start+0x15c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d111      	bne.n	80042ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b06      	cmp	r3, #6
 80042ba:	d010      	beq.n	80042de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042cc:	e007      	b.n	80042de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0201 	orr.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40010000 	.word	0x40010000
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40000800 	.word	0x40000800
 80042f4:	40000c00 	.word	0x40000c00
 80042f8:	40014000 	.word	0x40014000

080042fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2200      	movs	r2, #0
 800430c:	6839      	ldr	r1, [r7, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fee0 	bl	80050d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a29      	ldr	r2, [pc, #164]	@ (80043c0 <HAL_TIM_PWM_Stop+0xc4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d117      	bne.n	800434e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004328:	4013      	ands	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10f      	bne.n	800434e <HAL_TIM_PWM_Stop+0x52>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6a1a      	ldr	r2, [r3, #32]
 8004334:	f240 4344 	movw	r3, #1092	@ 0x444
 8004338:	4013      	ands	r3, r2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d107      	bne.n	800434e <HAL_TIM_PWM_Stop+0x52>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800434c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6a1a      	ldr	r2, [r3, #32]
 8004354:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10f      	bne.n	800437e <HAL_TIM_PWM_Stop+0x82>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6a1a      	ldr	r2, [r3, #32]
 8004364:	f240 4344 	movw	r3, #1092	@ 0x444
 8004368:	4013      	ands	r3, r2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d107      	bne.n	800437e <HAL_TIM_PWM_Stop+0x82>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0201 	bic.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d104      	bne.n	800438e <HAL_TIM_PWM_Stop+0x92>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800438c:	e013      	b.n	80043b6 <HAL_TIM_PWM_Stop+0xba>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b04      	cmp	r3, #4
 8004392:	d104      	bne.n	800439e <HAL_TIM_PWM_Stop+0xa2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800439c:	e00b      	b.n	80043b6 <HAL_TIM_PWM_Stop+0xba>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d104      	bne.n	80043ae <HAL_TIM_PWM_Stop+0xb2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ac:	e003      	b.n	80043b6 <HAL_TIM_PWM_Stop+0xba>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40010000 	.word	0x40010000

080043c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e097      	b.n	8004508 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7fd fe2b 	bl	8002048 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004408:	f023 0307 	bic.w	r3, r3, #7
 800440c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3304      	adds	r3, #4
 8004416:	4619      	mov	r1, r3
 8004418:	4610      	mov	r0, r2
 800441a:	f000 fba9 	bl	8004b70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004446:	f023 0303 	bic.w	r3, r3, #3
 800444a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	4313      	orrs	r3, r2
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004464:	f023 030c 	bic.w	r3, r3, #12
 8004468:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004470:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004474:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	4313      	orrs	r3, r2
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	011a      	lsls	r2, r3, #4
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	031b      	lsls	r3, r3, #12
 8004494:	4313      	orrs	r3, r2
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80044a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80044aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	4313      	orrs	r3, r2
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004520:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004528:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004530:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004538:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d110      	bne.n	8004562 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d102      	bne.n	800454c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004546:	7b7b      	ldrb	r3, [r7, #13]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d001      	beq.n	8004550 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e069      	b.n	8004624 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004560:	e031      	b.n	80045c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d110      	bne.n	800458a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004568:	7bbb      	ldrb	r3, [r7, #14]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d102      	bne.n	8004574 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800456e:	7b3b      	ldrb	r3, [r7, #12]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d001      	beq.n	8004578 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e055      	b.n	8004624 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004588:	e01d      	b.n	80045c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d108      	bne.n	80045a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004590:	7bbb      	ldrb	r3, [r7, #14]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d105      	bne.n	80045a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004596:	7b7b      	ldrb	r3, [r7, #13]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d102      	bne.n	80045a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800459c:	7b3b      	ldrb	r3, [r7, #12]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d001      	beq.n	80045a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e03e      	b.n	8004624 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2202      	movs	r2, #2
 80045aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2202      	movs	r2, #2
 80045b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2202      	movs	r2, #2
 80045ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2202      	movs	r2, #2
 80045c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_TIM_Encoder_Start+0xc4>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d008      	beq.n	80045e4 <HAL_TIM_Encoder_Start+0xd4>
 80045d2:	e00f      	b.n	80045f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2201      	movs	r2, #1
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fd79 	bl	80050d4 <TIM_CCxChannelCmd>
      break;
 80045e2:	e016      	b.n	8004612 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2201      	movs	r2, #1
 80045ea:	2104      	movs	r1, #4
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fd71 	bl	80050d4 <TIM_CCxChannelCmd>
      break;
 80045f2:	e00e      	b.n	8004612 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2201      	movs	r2, #1
 80045fa:	2100      	movs	r1, #0
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fd69 	bl	80050d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2201      	movs	r2, #1
 8004608:	2104      	movs	r1, #4
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fd62 	bl	80050d4 <TIM_CCxChannelCmd>
      break;
 8004610:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0201 	orr.w	r2, r2, #1
 8004620:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d020      	beq.n	8004690 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01b      	beq.n	8004690 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0202 	mvn.w	r2, #2
 8004660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fa5b 	bl	8004b32 <HAL_TIM_IC_CaptureCallback>
 800467c:	e005      	b.n	800468a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fa4d 	bl	8004b1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fa5e 	bl	8004b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d020      	beq.n	80046dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01b      	beq.n	80046dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0204 	mvn.w	r2, #4
 80046ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2202      	movs	r2, #2
 80046b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fa35 	bl	8004b32 <HAL_TIM_IC_CaptureCallback>
 80046c8:	e005      	b.n	80046d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fa27 	bl	8004b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fa38 	bl	8004b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d020      	beq.n	8004728 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01b      	beq.n	8004728 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0208 	mvn.w	r2, #8
 80046f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2204      	movs	r2, #4
 80046fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fa0f 	bl	8004b32 <HAL_TIM_IC_CaptureCallback>
 8004714:	e005      	b.n	8004722 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fa01 	bl	8004b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fa12 	bl	8004b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b00      	cmp	r3, #0
 8004730:	d020      	beq.n	8004774 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01b      	beq.n	8004774 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0210 	mvn.w	r2, #16
 8004744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2208      	movs	r2, #8
 800474a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f9e9 	bl	8004b32 <HAL_TIM_IC_CaptureCallback>
 8004760:	e005      	b.n	800476e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f9db 	bl	8004b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f9ec 	bl	8004b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00c      	beq.n	8004798 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f06f 0201 	mvn.w	r2, #1
 8004790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fd fb74 	bl	8001e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00c      	beq.n	80047bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fd7c 	bl	80052b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d007      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f9bd 	bl	8004b5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00c      	beq.n	8004804 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0220 	mvn.w	r2, #32
 80047fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fd4e 	bl	80052a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004804:	bf00      	nop
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004822:	2b01      	cmp	r3, #1
 8004824:	d101      	bne.n	800482a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004826:	2302      	movs	r3, #2
 8004828:	e0ae      	b.n	8004988 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b0c      	cmp	r3, #12
 8004836:	f200 809f 	bhi.w	8004978 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800483a:	a201      	add	r2, pc, #4	@ (adr r2, 8004840 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800483c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004840:	08004875 	.word	0x08004875
 8004844:	08004979 	.word	0x08004979
 8004848:	08004979 	.word	0x08004979
 800484c:	08004979 	.word	0x08004979
 8004850:	080048b5 	.word	0x080048b5
 8004854:	08004979 	.word	0x08004979
 8004858:	08004979 	.word	0x08004979
 800485c:	08004979 	.word	0x08004979
 8004860:	080048f7 	.word	0x080048f7
 8004864:	08004979 	.word	0x08004979
 8004868:	08004979 	.word	0x08004979
 800486c:	08004979 	.word	0x08004979
 8004870:	08004937 	.word	0x08004937
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fa04 	bl	8004c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0208 	orr.w	r2, r2, #8
 800488e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0204 	bic.w	r2, r2, #4
 800489e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6999      	ldr	r1, [r3, #24]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	619a      	str	r2, [r3, #24]
      break;
 80048b2:	e064      	b.n	800497e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fa4a 	bl	8004d54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6999      	ldr	r1, [r3, #24]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	021a      	lsls	r2, r3, #8
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	619a      	str	r2, [r3, #24]
      break;
 80048f4:	e043      	b.n	800497e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fa95 	bl	8004e2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0208 	orr.w	r2, r2, #8
 8004910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69da      	ldr	r2, [r3, #28]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0204 	bic.w	r2, r2, #4
 8004920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69d9      	ldr	r1, [r3, #28]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	61da      	str	r2, [r3, #28]
      break;
 8004934:	e023      	b.n	800497e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	4618      	mov	r0, r3
 800493e:	f000 fadf 	bl	8004f00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69da      	ldr	r2, [r3, #28]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69d9      	ldr	r1, [r3, #28]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	021a      	lsls	r2, r3, #8
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	61da      	str	r2, [r3, #28]
      break;
 8004976:	e002      	b.n	800497e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	75fb      	strb	r3, [r7, #23]
      break;
 800497c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004986:	7dfb      	ldrb	r3, [r7, #23]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_TIM_ConfigClockSource+0x1c>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e0b4      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x186>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049e4:	d03e      	beq.n	8004a64 <HAL_TIM_ConfigClockSource+0xd4>
 80049e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ea:	f200 8087 	bhi.w	8004afc <HAL_TIM_ConfigClockSource+0x16c>
 80049ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049f2:	f000 8086 	beq.w	8004b02 <HAL_TIM_ConfigClockSource+0x172>
 80049f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049fa:	d87f      	bhi.n	8004afc <HAL_TIM_ConfigClockSource+0x16c>
 80049fc:	2b70      	cmp	r3, #112	@ 0x70
 80049fe:	d01a      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0xa6>
 8004a00:	2b70      	cmp	r3, #112	@ 0x70
 8004a02:	d87b      	bhi.n	8004afc <HAL_TIM_ConfigClockSource+0x16c>
 8004a04:	2b60      	cmp	r3, #96	@ 0x60
 8004a06:	d050      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x11a>
 8004a08:	2b60      	cmp	r3, #96	@ 0x60
 8004a0a:	d877      	bhi.n	8004afc <HAL_TIM_ConfigClockSource+0x16c>
 8004a0c:	2b50      	cmp	r3, #80	@ 0x50
 8004a0e:	d03c      	beq.n	8004a8a <HAL_TIM_ConfigClockSource+0xfa>
 8004a10:	2b50      	cmp	r3, #80	@ 0x50
 8004a12:	d873      	bhi.n	8004afc <HAL_TIM_ConfigClockSource+0x16c>
 8004a14:	2b40      	cmp	r3, #64	@ 0x40
 8004a16:	d058      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x13a>
 8004a18:	2b40      	cmp	r3, #64	@ 0x40
 8004a1a:	d86f      	bhi.n	8004afc <HAL_TIM_ConfigClockSource+0x16c>
 8004a1c:	2b30      	cmp	r3, #48	@ 0x30
 8004a1e:	d064      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x15a>
 8004a20:	2b30      	cmp	r3, #48	@ 0x30
 8004a22:	d86b      	bhi.n	8004afc <HAL_TIM_ConfigClockSource+0x16c>
 8004a24:	2b20      	cmp	r3, #32
 8004a26:	d060      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x15a>
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	d867      	bhi.n	8004afc <HAL_TIM_ConfigClockSource+0x16c>
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d05c      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x15a>
 8004a30:	2b10      	cmp	r3, #16
 8004a32:	d05a      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x15a>
 8004a34:	e062      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a46:	f000 fb25 	bl	8005094 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	609a      	str	r2, [r3, #8]
      break;
 8004a62:	e04f      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a74:	f000 fb0e 	bl	8005094 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a86:	609a      	str	r2, [r3, #8]
      break;
 8004a88:	e03c      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a96:	461a      	mov	r2, r3
 8004a98:	f000 fa82 	bl	8004fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2150      	movs	r1, #80	@ 0x50
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fadb 	bl	800505e <TIM_ITRx_SetConfig>
      break;
 8004aa8:	e02c      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f000 faa1 	bl	8004ffe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2160      	movs	r1, #96	@ 0x60
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 facb 	bl	800505e <TIM_ITRx_SetConfig>
      break;
 8004ac8:	e01c      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f000 fa62 	bl	8004fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2140      	movs	r1, #64	@ 0x40
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fabb 	bl	800505e <TIM_ITRx_SetConfig>
      break;
 8004ae8:	e00c      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4619      	mov	r1, r3
 8004af4:	4610      	mov	r0, r2
 8004af6:	f000 fab2 	bl	800505e <TIM_ITRx_SetConfig>
      break;
 8004afa:	e003      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
      break;
 8004b00:	e000      	b.n	8004b04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a3a      	ldr	r2, [pc, #232]	@ (8004c6c <TIM_Base_SetConfig+0xfc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00f      	beq.n	8004ba8 <TIM_Base_SetConfig+0x38>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b8e:	d00b      	beq.n	8004ba8 <TIM_Base_SetConfig+0x38>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a37      	ldr	r2, [pc, #220]	@ (8004c70 <TIM_Base_SetConfig+0x100>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <TIM_Base_SetConfig+0x38>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a36      	ldr	r2, [pc, #216]	@ (8004c74 <TIM_Base_SetConfig+0x104>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <TIM_Base_SetConfig+0x38>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a35      	ldr	r2, [pc, #212]	@ (8004c78 <TIM_Base_SetConfig+0x108>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d108      	bne.n	8004bba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2b      	ldr	r2, [pc, #172]	@ (8004c6c <TIM_Base_SetConfig+0xfc>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01b      	beq.n	8004bfa <TIM_Base_SetConfig+0x8a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc8:	d017      	beq.n	8004bfa <TIM_Base_SetConfig+0x8a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a28      	ldr	r2, [pc, #160]	@ (8004c70 <TIM_Base_SetConfig+0x100>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <TIM_Base_SetConfig+0x8a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a27      	ldr	r2, [pc, #156]	@ (8004c74 <TIM_Base_SetConfig+0x104>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00f      	beq.n	8004bfa <TIM_Base_SetConfig+0x8a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a26      	ldr	r2, [pc, #152]	@ (8004c78 <TIM_Base_SetConfig+0x108>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00b      	beq.n	8004bfa <TIM_Base_SetConfig+0x8a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a25      	ldr	r2, [pc, #148]	@ (8004c7c <TIM_Base_SetConfig+0x10c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d007      	beq.n	8004bfa <TIM_Base_SetConfig+0x8a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a24      	ldr	r2, [pc, #144]	@ (8004c80 <TIM_Base_SetConfig+0x110>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_Base_SetConfig+0x8a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a23      	ldr	r2, [pc, #140]	@ (8004c84 <TIM_Base_SetConfig+0x114>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d108      	bne.n	8004c0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a0e      	ldr	r2, [pc, #56]	@ (8004c6c <TIM_Base_SetConfig+0xfc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d103      	bne.n	8004c40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d105      	bne.n	8004c5e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f023 0201 	bic.w	r2, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	611a      	str	r2, [r3, #16]
  }
}
 8004c5e:	bf00      	nop
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40000c00 	.word	0x40000c00
 8004c7c:	40014000 	.word	0x40014000
 8004c80:	40014400 	.word	0x40014400
 8004c84:	40014800 	.word	0x40014800

08004c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	f023 0201 	bic.w	r2, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f023 0302 	bic.w	r3, r3, #2
 8004cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a1c      	ldr	r2, [pc, #112]	@ (8004d50 <TIM_OC1_SetConfig+0xc8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d10c      	bne.n	8004cfe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f023 0308 	bic.w	r3, r3, #8
 8004cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f023 0304 	bic.w	r3, r3, #4
 8004cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a13      	ldr	r2, [pc, #76]	@ (8004d50 <TIM_OC1_SetConfig+0xc8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d111      	bne.n	8004d2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	621a      	str	r2, [r3, #32]
}
 8004d44:	bf00      	nop
 8004d46:	371c      	adds	r7, #28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	40010000 	.word	0x40010000

08004d54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	f023 0210 	bic.w	r2, r3, #16
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f023 0320 	bic.w	r3, r3, #32
 8004d9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a1e      	ldr	r2, [pc, #120]	@ (8004e28 <TIM_OC2_SetConfig+0xd4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d10d      	bne.n	8004dd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a15      	ldr	r2, [pc, #84]	@ (8004e28 <TIM_OC2_SetConfig+0xd4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d113      	bne.n	8004e00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004de6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	621a      	str	r2, [r3, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40010000 	.word	0x40010000

08004e2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0303 	bic.w	r3, r3, #3
 8004e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a1d      	ldr	r2, [pc, #116]	@ (8004efc <TIM_OC3_SetConfig+0xd0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d10d      	bne.n	8004ea6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a14      	ldr	r2, [pc, #80]	@ (8004efc <TIM_OC3_SetConfig+0xd0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d113      	bne.n	8004ed6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	621a      	str	r2, [r3, #32]
}
 8004ef0:	bf00      	nop
 8004ef2:	371c      	adds	r7, #28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	40010000 	.word	0x40010000

08004f00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	031b      	lsls	r3, r3, #12
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a10      	ldr	r2, [pc, #64]	@ (8004f9c <TIM_OC4_SetConfig+0x9c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d109      	bne.n	8004f74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	019b      	lsls	r3, r3, #6
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	621a      	str	r2, [r3, #32]
}
 8004f8e:	bf00      	nop
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	40010000 	.word	0x40010000

08004fa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f023 0201 	bic.w	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f023 030a 	bic.w	r3, r3, #10
 8004fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	621a      	str	r2, [r3, #32]
}
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b087      	sub	sp, #28
 8005002:	af00      	add	r7, sp, #0
 8005004:	60f8      	str	r0, [r7, #12]
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	f023 0210 	bic.w	r2, r3, #16
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005028:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	031b      	lsls	r3, r3, #12
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800503a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	621a      	str	r2, [r3, #32]
}
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800505e:	b480      	push	{r7}
 8005060:	b085      	sub	sp, #20
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005074:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	f043 0307 	orr.w	r3, r3, #7
 8005080:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	609a      	str	r2, [r3, #8]
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	021a      	lsls	r2, r3, #8
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	431a      	orrs	r2, r3
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	609a      	str	r2, [r3, #8]
}
 80050c8:	bf00      	nop
 80050ca:	371c      	adds	r7, #28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	2201      	movs	r2, #1
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1a      	ldr	r2, [r3, #32]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	43db      	mvns	r3, r3
 80050f6:	401a      	ands	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a1a      	ldr	r2, [r3, #32]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f003 031f 	and.w	r3, r3, #31
 8005106:	6879      	ldr	r1, [r7, #4]
 8005108:	fa01 f303 	lsl.w	r3, r1, r3
 800510c:	431a      	orrs	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	bf00      	nop
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
	...

08005120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005134:	2302      	movs	r3, #2
 8005136:	e050      	b.n	80051da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800515e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a1c      	ldr	r2, [pc, #112]	@ (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d018      	beq.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005184:	d013      	beq.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a18      	ldr	r2, [pc, #96]	@ (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00e      	beq.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a16      	ldr	r2, [pc, #88]	@ (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d009      	beq.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a15      	ldr	r2, [pc, #84]	@ (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d004      	beq.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a13      	ldr	r2, [pc, #76]	@ (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d10c      	bne.n	80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40000400 	.word	0x40000400
 80051f0:	40000800 	.word	0x40000800
 80051f4:	40000c00 	.word	0x40000c00
 80051f8:	40014000 	.word	0x40014000

080051fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005214:	2302      	movs	r3, #2
 8005216:	e03d      	b.n	8005294 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4313      	orrs	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e042      	b.n	8005360 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fd f806 	bl	8002300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2224      	movs	r2, #36	@ 0x24
 80052f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800530a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 ffdd 	bl	80062cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695a      	ldr	r2, [r3, #20]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e04a      	b.n	8005410 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fc ffb6 	bl	8002300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2224      	movs	r2, #36	@ 0x24
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 ff8d 	bl	80062cc <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695a      	ldr	r2, [r3, #20]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80053d0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695a      	ldr	r2, [r3, #20]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0208 	orr.w	r2, r2, #8
 80053e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	@ 0x28
 800541c:	af02      	add	r7, sp, #8
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	4613      	mov	r3, r2
 8005426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b20      	cmp	r3, #32
 8005436:	d175      	bne.n	8005524 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <HAL_UART_Transmit+0x2c>
 800543e:	88fb      	ldrh	r3, [r7, #6]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e06e      	b.n	8005526 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2221      	movs	r2, #33	@ 0x21
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005456:	f7fd fa0d 	bl	8002874 <HAL_GetTick>
 800545a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	88fa      	ldrh	r2, [r7, #6]
 8005460:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	88fa      	ldrh	r2, [r7, #6]
 8005466:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005470:	d108      	bne.n	8005484 <HAL_UART_Transmit+0x6c>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d104      	bne.n	8005484 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	e003      	b.n	800548c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005488:	2300      	movs	r3, #0
 800548a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800548c:	e02e      	b.n	80054ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2200      	movs	r2, #0
 8005496:	2180      	movs	r1, #128	@ 0x80
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 fc5d 	bl	8005d58 <UART_WaitOnFlagUntilTimeout>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d005      	beq.n	80054b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e03a      	b.n	8005526 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10b      	bne.n	80054ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	3302      	adds	r3, #2
 80054ca:	61bb      	str	r3, [r7, #24]
 80054cc:	e007      	b.n	80054de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	781a      	ldrb	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	3301      	adds	r3, #1
 80054dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1cb      	bne.n	800548e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2200      	movs	r2, #0
 80054fe:	2140      	movs	r1, #64	@ 0x40
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 fc29 	bl	8005d58 <UART_WaitOnFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e006      	b.n	8005526 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e000      	b.n	8005526 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b08c      	sub	sp, #48	@ 0x30
 8005532:	af00      	add	r7, sp, #0
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	4613      	mov	r3, r2
 800553a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b20      	cmp	r3, #32
 8005546:	d14a      	bne.n	80055de <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e043      	b.n	80055e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005564:	88fb      	ldrh	r3, [r7, #6]
 8005566:	461a      	mov	r2, r3
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 fc4e 	bl	8005e0c <UART_Start_Receive_DMA>
 8005570:	4603      	mov	r3, r0
 8005572:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005576:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800557a:	2b00      	cmp	r3, #0
 800557c:	d12c      	bne.n	80055d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005582:	2b01      	cmp	r3, #1
 8005584:	d125      	bne.n	80055d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005586:	2300      	movs	r3, #0
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	330c      	adds	r3, #12
 80055a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	e853 3f00 	ldrex	r3, [r3]
 80055aa:	617b      	str	r3, [r7, #20]
   return(result);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f043 0310 	orr.w	r3, r3, #16
 80055b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	330c      	adds	r3, #12
 80055ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80055be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	6a39      	ldr	r1, [r7, #32]
 80055c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055c4:	e841 2300 	strex	r3, r2, [r1]
 80055c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e5      	bne.n	800559c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80055d0:	e002      	b.n	80055d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80055d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055dc:	e000      	b.n	80055e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80055de:	2302      	movs	r3, #2
  }
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3730      	adds	r7, #48	@ 0x30
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b0ba      	sub	sp, #232	@ 0xe8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800560e:	2300      	movs	r3, #0
 8005610:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005614:	2300      	movs	r3, #0
 8005616:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10f      	bne.n	800564e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800562e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	d009      	beq.n	800564e <HAL_UART_IRQHandler+0x66>
 800563a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fd81 	bl	800614e <UART_Receive_IT>
      return;
 800564c:	e25b      	b.n	8005b06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800564e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 80de 	beq.w	8005814 <HAL_UART_IRQHandler+0x22c>
 8005658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d106      	bne.n	8005672 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005668:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 80d1 	beq.w	8005814 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00b      	beq.n	8005696 <HAL_UART_IRQHandler+0xae>
 800567e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d005      	beq.n	8005696 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568e:	f043 0201 	orr.w	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00b      	beq.n	80056ba <HAL_UART_IRQHandler+0xd2>
 80056a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d005      	beq.n	80056ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b2:	f043 0202 	orr.w	r2, r3, #2
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00b      	beq.n	80056de <HAL_UART_IRQHandler+0xf6>
 80056c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d6:	f043 0204 	orr.w	r2, r3, #4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d011      	beq.n	800570e <HAL_UART_IRQHandler+0x126>
 80056ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d105      	bne.n	8005702 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005706:	f043 0208 	orr.w	r2, r3, #8
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 81f2 	beq.w	8005afc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b00      	cmp	r3, #0
 8005722:	d008      	beq.n	8005736 <HAL_UART_IRQHandler+0x14e>
 8005724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fd0c 	bl	800614e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005740:	2b40      	cmp	r3, #64	@ 0x40
 8005742:	bf0c      	ite	eq
 8005744:	2301      	moveq	r3, #1
 8005746:	2300      	movne	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d103      	bne.n	8005762 <HAL_UART_IRQHandler+0x17a>
 800575a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800575e:	2b00      	cmp	r3, #0
 8005760:	d04f      	beq.n	8005802 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fc14 	bl	8005f90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005772:	2b40      	cmp	r3, #64	@ 0x40
 8005774:	d141      	bne.n	80057fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3314      	adds	r3, #20
 800577c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800578c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005790:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005794:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3314      	adds	r3, #20
 800579e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80057a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80057a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80057ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80057ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1d9      	bne.n	8005776 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d013      	beq.n	80057f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ce:	4a7e      	ldr	r2, [pc, #504]	@ (80059c8 <HAL_UART_IRQHandler+0x3e0>)
 80057d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fd fab0 	bl	8002d3c <HAL_DMA_Abort_IT>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d016      	beq.n	8005810 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057ec:	4610      	mov	r0, r2
 80057ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	e00e      	b.n	8005810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f9a8 	bl	8005b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f8:	e00a      	b.n	8005810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f9a4 	bl	8005b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005800:	e006      	b.n	8005810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f9a0 	bl	8005b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800580e:	e175      	b.n	8005afc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005810:	bf00      	nop
    return;
 8005812:	e173      	b.n	8005afc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005818:	2b01      	cmp	r3, #1
 800581a:	f040 814f 	bne.w	8005abc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800581e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005822:	f003 0310 	and.w	r3, r3, #16
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 8148 	beq.w	8005abc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800582c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8141 	beq.w	8005abc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800583a:	2300      	movs	r3, #0
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60bb      	str	r3, [r7, #8]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585a:	2b40      	cmp	r3, #64	@ 0x40
 800585c:	f040 80b6 	bne.w	80059cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800586c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8145 	beq.w	8005b00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800587a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800587e:	429a      	cmp	r2, r3
 8005880:	f080 813e 	bcs.w	8005b00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800588a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005896:	f000 8088 	beq.w	80059aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80058b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	330c      	adds	r3, #12
 80058c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80058c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058d6:	e841 2300 	strex	r3, r2, [r1]
 80058da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1d9      	bne.n	800589a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3314      	adds	r3, #20
 80058ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058f0:	e853 3f00 	ldrex	r3, [r3]
 80058f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3314      	adds	r3, #20
 8005906:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800590a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800590e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005912:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800591c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e1      	bne.n	80058e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3314      	adds	r3, #20
 8005928:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005934:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005938:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3314      	adds	r3, #20
 8005942:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005946:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005948:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800594c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005954:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e3      	bne.n	8005922 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005972:	e853 3f00 	ldrex	r3, [r3]
 8005976:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800597a:	f023 0310 	bic.w	r3, r3, #16
 800597e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800598c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800598e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005992:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800599a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e3      	bne.n	8005968 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fd f959 	bl	8002c5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2202      	movs	r2, #2
 80059ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	b29b      	uxth	r3, r3
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7fc f927 	bl	8001c14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059c6:	e09b      	b.n	8005b00 <HAL_UART_IRQHandler+0x518>
 80059c8:	08006057 	.word	0x08006057
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 808e 	beq.w	8005b04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80059e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 8089 	beq.w	8005b04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	330c      	adds	r3, #12
 80059f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	330c      	adds	r3, #12
 8005a12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a16:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e3      	bne.n	80059f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3314      	adds	r3, #20
 8005a30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	623b      	str	r3, [r7, #32]
   return(result);
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	f023 0301 	bic.w	r3, r3, #1
 8005a40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3314      	adds	r3, #20
 8005a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a56:	e841 2300 	strex	r3, r2, [r1]
 8005a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1e3      	bne.n	8005a2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	330c      	adds	r3, #12
 8005a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0310 	bic.w	r3, r3, #16
 8005a86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	330c      	adds	r3, #12
 8005a90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005a94:	61fa      	str	r2, [r7, #28]
 8005a96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	69b9      	ldr	r1, [r7, #24]
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e3      	bne.n	8005a70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7fc f8ad 	bl	8001c14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005aba:	e023      	b.n	8005b04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d009      	beq.n	8005adc <HAL_UART_IRQHandler+0x4f4>
 8005ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fad2 	bl	800607e <UART_Transmit_IT>
    return;
 8005ada:	e014      	b.n	8005b06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00e      	beq.n	8005b06 <HAL_UART_IRQHandler+0x51e>
 8005ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fb12 	bl	800611e <UART_EndTransmit_IT>
    return;
 8005afa:	e004      	b.n	8005b06 <HAL_UART_IRQHandler+0x51e>
    return;
 8005afc:	bf00      	nop
 8005afe:	e002      	b.n	8005b06 <HAL_UART_IRQHandler+0x51e>
      return;
 8005b00:	bf00      	nop
 8005b02:	e000      	b.n	8005b06 <HAL_UART_IRQHandler+0x51e>
      return;
 8005b04:	bf00      	nop
  }
}
 8005b06:	37e8      	adds	r7, #232	@ 0xe8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b09c      	sub	sp, #112	@ 0x70
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b68:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d172      	bne.n	8005c5e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	330c      	adds	r3, #12
 8005b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	330c      	adds	r3, #12
 8005b9c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005b9e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ba0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ba4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e5      	bne.n	8005b7e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3314      	adds	r3, #20
 8005bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc4:	f023 0301 	bic.w	r3, r3, #1
 8005bc8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3314      	adds	r3, #20
 8005bd0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005bd2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005bd4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e5      	bne.n	8005bb2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3314      	adds	r3, #20
 8005bec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	623b      	str	r3, [r7, #32]
   return(result);
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3314      	adds	r3, #20
 8005c04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c06:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e5      	bne.n	8005be6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d119      	bne.n	8005c5e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	330c      	adds	r3, #12
 8005c30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f023 0310 	bic.w	r3, r3, #16
 8005c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	330c      	adds	r3, #12
 8005c48:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005c4a:	61fa      	str	r2, [r7, #28]
 8005c4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	69b9      	ldr	r1, [r7, #24]
 8005c50:	69fa      	ldr	r2, [r7, #28]
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	617b      	str	r3, [r7, #20]
   return(result);
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1e5      	bne.n	8005c2a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c60:	2200      	movs	r2, #0
 8005c62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d106      	bne.n	8005c7a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c6e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c70:	4619      	mov	r1, r3
 8005c72:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005c74:	f7fb ffce 	bl	8001c14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c78:	e002      	b.n	8005c80 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005c7a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005c7c:	f7ff ff50 	bl	8005b20 <HAL_UART_RxCpltCallback>
}
 8005c80:	bf00      	nop
 8005c82:	3770      	adds	r7, #112	@ 0x70
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c94:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d108      	bne.n	8005cb6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ca8:	085b      	lsrs	r3, r3, #1
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	4619      	mov	r1, r3
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f7fb ffb0 	bl	8001c14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cb4:	e002      	b.n	8005cbc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f7ff ff3c 	bl	8005b34 <HAL_UART_RxHalfCpltCallback>
}
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce0:	2b80      	cmp	r3, #128	@ 0x80
 8005ce2:	bf0c      	ite	eq
 8005ce4:	2301      	moveq	r3, #1
 8005ce6:	2300      	movne	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b21      	cmp	r3, #33	@ 0x21
 8005cf6:	d108      	bne.n	8005d0a <UART_DMAError+0x46>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2200      	movs	r2, #0
 8005d02:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005d04:	68b8      	ldr	r0, [r7, #8]
 8005d06:	f000 f91b 	bl	8005f40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d14:	2b40      	cmp	r3, #64	@ 0x40
 8005d16:	bf0c      	ite	eq
 8005d18:	2301      	moveq	r3, #1
 8005d1a:	2300      	movne	r3, #0
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b22      	cmp	r3, #34	@ 0x22
 8005d2a:	d108      	bne.n	8005d3e <UART_DMAError+0x7a>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d005      	beq.n	8005d3e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2200      	movs	r2, #0
 8005d36:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005d38:	68b8      	ldr	r0, [r7, #8]
 8005d3a:	f000 f929 	bl	8005f90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d42:	f043 0210 	orr.w	r2, r3, #16
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d4a:	68b8      	ldr	r0, [r7, #8]
 8005d4c:	f7ff fefc 	bl	8005b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	4613      	mov	r3, r2
 8005d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d68:	e03b      	b.n	8005de2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d70:	d037      	beq.n	8005de2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d72:	f7fc fd7f 	bl	8002874 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	6a3a      	ldr	r2, [r7, #32]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d302      	bcc.n	8005d88 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e03a      	b.n	8005e02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d023      	beq.n	8005de2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b80      	cmp	r3, #128	@ 0x80
 8005d9e:	d020      	beq.n	8005de2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b40      	cmp	r3, #64	@ 0x40
 8005da4:	d01d      	beq.n	8005de2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d116      	bne.n	8005de2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005db4:	2300      	movs	r3, #0
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 f8e0 	bl	8005f90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2208      	movs	r2, #8
 8005dd4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e00f      	b.n	8005e02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4013      	ands	r3, r2
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	bf0c      	ite	eq
 8005df2:	2301      	moveq	r3, #1
 8005df4:	2300      	movne	r3, #0
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	461a      	mov	r2, r3
 8005dfa:	79fb      	ldrb	r3, [r7, #7]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d0b4      	beq.n	8005d6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b098      	sub	sp, #96	@ 0x60
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	4613      	mov	r3, r2
 8005e18:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	88fa      	ldrh	r2, [r7, #6]
 8005e24:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2222      	movs	r2, #34	@ 0x22
 8005e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e38:	4a3e      	ldr	r2, [pc, #248]	@ (8005f34 <UART_Start_Receive_DMA+0x128>)
 8005e3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e40:	4a3d      	ldr	r2, [pc, #244]	@ (8005f38 <UART_Start_Receive_DMA+0x12c>)
 8005e42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e48:	4a3c      	ldr	r2, [pc, #240]	@ (8005f3c <UART_Start_Receive_DMA+0x130>)
 8005e4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e50:	2200      	movs	r2, #0
 8005e52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005e54:	f107 0308 	add.w	r3, r7, #8
 8005e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3304      	adds	r3, #4
 8005e64:	4619      	mov	r1, r3
 8005e66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	88fb      	ldrh	r3, [r7, #6]
 8005e6c:	f7fc fe9e 	bl	8002bac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005e70:	2300      	movs	r3, #0
 8005e72:	613b      	str	r3, [r7, #16]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	613b      	str	r3, [r7, #16]
 8005e84:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d019      	beq.n	8005ec2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	330c      	adds	r3, #12
 8005e94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ea4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	330c      	adds	r3, #12
 8005eac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005eae:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005eb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e5      	bne.n	8005e8e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3314      	adds	r3, #20
 8005ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3314      	adds	r3, #20
 8005ee0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ee2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005ee4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005ee8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e5      	bne.n	8005ec2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3314      	adds	r3, #20
 8005efc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	617b      	str	r3, [r7, #20]
   return(result);
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3314      	adds	r3, #20
 8005f14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005f16:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	6a39      	ldr	r1, [r7, #32]
 8005f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e5      	bne.n	8005ef6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3760      	adds	r7, #96	@ 0x60
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	08005b5d 	.word	0x08005b5d
 8005f38:	08005c89 	.word	0x08005c89
 8005f3c:	08005cc5 	.word	0x08005cc5

08005f40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b089      	sub	sp, #36	@ 0x24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	330c      	adds	r3, #12
 8005f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005f5e:	61fb      	str	r3, [r7, #28]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	330c      	adds	r3, #12
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	61ba      	str	r2, [r7, #24]
 8005f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6c:	6979      	ldr	r1, [r7, #20]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	e841 2300 	strex	r3, r2, [r1]
 8005f74:	613b      	str	r3, [r7, #16]
   return(result);
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e5      	bne.n	8005f48 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005f84:	bf00      	nop
 8005f86:	3724      	adds	r7, #36	@ 0x24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b095      	sub	sp, #84	@ 0x54
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa2:	e853 3f00 	ldrex	r3, [r3]
 8005fa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005faa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fb8:	643a      	str	r2, [r7, #64]	@ 0x40
 8005fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fc0:	e841 2300 	strex	r3, r2, [r1]
 8005fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1e5      	bne.n	8005f98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3314      	adds	r3, #20
 8005fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	f023 0301 	bic.w	r3, r3, #1
 8005fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3314      	adds	r3, #20
 8005fea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ff4:	e841 2300 	strex	r3, r2, [r1]
 8005ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1e5      	bne.n	8005fcc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006004:	2b01      	cmp	r3, #1
 8006006:	d119      	bne.n	800603c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	330c      	adds	r3, #12
 800600e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	e853 3f00 	ldrex	r3, [r3]
 8006016:	60bb      	str	r3, [r7, #8]
   return(result);
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f023 0310 	bic.w	r3, r3, #16
 800601e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	330c      	adds	r3, #12
 8006026:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006028:	61ba      	str	r2, [r7, #24]
 800602a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602c:	6979      	ldr	r1, [r7, #20]
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	e841 2300 	strex	r3, r2, [r1]
 8006034:	613b      	str	r3, [r7, #16]
   return(result);
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e5      	bne.n	8006008 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800604a:	bf00      	nop
 800604c:	3754      	adds	r7, #84	@ 0x54
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b084      	sub	sp, #16
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006062:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f7ff fd69 	bl	8005b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006076:	bf00      	nop
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800607e:	b480      	push	{r7}
 8006080:	b085      	sub	sp, #20
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b21      	cmp	r3, #33	@ 0x21
 8006090:	d13e      	bne.n	8006110 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800609a:	d114      	bne.n	80060c6 <UART_Transmit_IT+0x48>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d110      	bne.n	80060c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	1c9a      	adds	r2, r3, #2
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	621a      	str	r2, [r3, #32]
 80060c4:	e008      	b.n	80060d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	1c59      	adds	r1, r3, #1
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6211      	str	r1, [r2, #32]
 80060d0:	781a      	ldrb	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060dc:	b29b      	uxth	r3, r3
 80060de:	3b01      	subs	r3, #1
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	4619      	mov	r1, r3
 80060e6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10f      	bne.n	800610c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68da      	ldr	r2, [r3, #12]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800610a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	e000      	b.n	8006112 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006110:	2302      	movs	r3, #2
  }
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b082      	sub	sp, #8
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006134:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2220      	movs	r2, #32
 800613a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff fce4 	bl	8005b0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b08c      	sub	sp, #48	@ 0x30
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b22      	cmp	r3, #34	@ 0x22
 8006160:	f040 80ae 	bne.w	80062c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800616c:	d117      	bne.n	800619e <UART_Receive_IT+0x50>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d113      	bne.n	800619e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	b29b      	uxth	r3, r3
 8006188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800618c:	b29a      	uxth	r2, r3
 800618e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006190:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006196:	1c9a      	adds	r2, r3, #2
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	629a      	str	r2, [r3, #40]	@ 0x28
 800619c:	e026      	b.n	80061ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80061a4:	2300      	movs	r3, #0
 80061a6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061b0:	d007      	beq.n	80061c2 <UART_Receive_IT+0x74>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10a      	bne.n	80061d0 <UART_Receive_IT+0x82>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	e008      	b.n	80061e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	4619      	mov	r1, r3
 80061fa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d15d      	bne.n	80062bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0220 	bic.w	r2, r2, #32
 800620e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800621e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695a      	ldr	r2, [r3, #20]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0201 	bic.w	r2, r2, #1
 800622e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006242:	2b01      	cmp	r3, #1
 8006244:	d135      	bne.n	80062b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	330c      	adds	r3, #12
 8006252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	613b      	str	r3, [r7, #16]
   return(result);
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f023 0310 	bic.w	r3, r3, #16
 8006262:	627b      	str	r3, [r7, #36]	@ 0x24
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	330c      	adds	r3, #12
 800626a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800626c:	623a      	str	r2, [r7, #32]
 800626e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	69f9      	ldr	r1, [r7, #28]
 8006272:	6a3a      	ldr	r2, [r7, #32]
 8006274:	e841 2300 	strex	r3, r2, [r1]
 8006278:	61bb      	str	r3, [r7, #24]
   return(result);
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1e5      	bne.n	800624c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2b10      	cmp	r3, #16
 800628c:	d10a      	bne.n	80062a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fb fcb2 	bl	8001c14 <HAL_UARTEx_RxEventCallback>
 80062b0:	e002      	b.n	80062b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fc34 	bl	8005b20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	e002      	b.n	80062c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	e000      	b.n	80062c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80062c0:	2302      	movs	r3, #2
  }
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3730      	adds	r7, #48	@ 0x30
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062d0:	b0c0      	sub	sp, #256	@ 0x100
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80062e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e8:	68d9      	ldr	r1, [r3, #12]
 80062ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	ea40 0301 	orr.w	r3, r0, r1
 80062f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	431a      	orrs	r2, r3
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	431a      	orrs	r2, r3
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006324:	f021 010c 	bic.w	r1, r1, #12
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006332:	430b      	orrs	r3, r1
 8006334:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006346:	6999      	ldr	r1, [r3, #24]
 8006348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	ea40 0301 	orr.w	r3, r0, r1
 8006352:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	4b8f      	ldr	r3, [pc, #572]	@ (8006598 <UART_SetConfig+0x2cc>)
 800635c:	429a      	cmp	r2, r3
 800635e:	d005      	beq.n	800636c <UART_SetConfig+0xa0>
 8006360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4b8d      	ldr	r3, [pc, #564]	@ (800659c <UART_SetConfig+0x2d0>)
 8006368:	429a      	cmp	r2, r3
 800636a:	d104      	bne.n	8006376 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800636c:	f7fd fdc4 	bl	8003ef8 <HAL_RCC_GetPCLK2Freq>
 8006370:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006374:	e003      	b.n	800637e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006376:	f7fd fdab 	bl	8003ed0 <HAL_RCC_GetPCLK1Freq>
 800637a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800637e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006388:	f040 810c 	bne.w	80065a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800638c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006390:	2200      	movs	r2, #0
 8006392:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006396:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800639a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800639e:	4622      	mov	r2, r4
 80063a0:	462b      	mov	r3, r5
 80063a2:	1891      	adds	r1, r2, r2
 80063a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80063a6:	415b      	adcs	r3, r3
 80063a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80063ae:	4621      	mov	r1, r4
 80063b0:	eb12 0801 	adds.w	r8, r2, r1
 80063b4:	4629      	mov	r1, r5
 80063b6:	eb43 0901 	adc.w	r9, r3, r1
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ce:	4690      	mov	r8, r2
 80063d0:	4699      	mov	r9, r3
 80063d2:	4623      	mov	r3, r4
 80063d4:	eb18 0303 	adds.w	r3, r8, r3
 80063d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063dc:	462b      	mov	r3, r5
 80063de:	eb49 0303 	adc.w	r3, r9, r3
 80063e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80063f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063fa:	460b      	mov	r3, r1
 80063fc:	18db      	adds	r3, r3, r3
 80063fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006400:	4613      	mov	r3, r2
 8006402:	eb42 0303 	adc.w	r3, r2, r3
 8006406:	657b      	str	r3, [r7, #84]	@ 0x54
 8006408:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800640c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006410:	f7fa fc52 	bl	8000cb8 <__aeabi_uldivmod>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4b61      	ldr	r3, [pc, #388]	@ (80065a0 <UART_SetConfig+0x2d4>)
 800641a:	fba3 2302 	umull	r2, r3, r3, r2
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	011c      	lsls	r4, r3, #4
 8006422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006426:	2200      	movs	r2, #0
 8006428:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800642c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006430:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006434:	4642      	mov	r2, r8
 8006436:	464b      	mov	r3, r9
 8006438:	1891      	adds	r1, r2, r2
 800643a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800643c:	415b      	adcs	r3, r3
 800643e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006440:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006444:	4641      	mov	r1, r8
 8006446:	eb12 0a01 	adds.w	sl, r2, r1
 800644a:	4649      	mov	r1, r9
 800644c:	eb43 0b01 	adc.w	fp, r3, r1
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800645c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006460:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006464:	4692      	mov	sl, r2
 8006466:	469b      	mov	fp, r3
 8006468:	4643      	mov	r3, r8
 800646a:	eb1a 0303 	adds.w	r3, sl, r3
 800646e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006472:	464b      	mov	r3, r9
 8006474:	eb4b 0303 	adc.w	r3, fp, r3
 8006478:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800647c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006488:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800648c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006490:	460b      	mov	r3, r1
 8006492:	18db      	adds	r3, r3, r3
 8006494:	643b      	str	r3, [r7, #64]	@ 0x40
 8006496:	4613      	mov	r3, r2
 8006498:	eb42 0303 	adc.w	r3, r2, r3
 800649c:	647b      	str	r3, [r7, #68]	@ 0x44
 800649e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80064a6:	f7fa fc07 	bl	8000cb8 <__aeabi_uldivmod>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4611      	mov	r1, r2
 80064b0:	4b3b      	ldr	r3, [pc, #236]	@ (80065a0 <UART_SetConfig+0x2d4>)
 80064b2:	fba3 2301 	umull	r2, r3, r3, r1
 80064b6:	095b      	lsrs	r3, r3, #5
 80064b8:	2264      	movs	r2, #100	@ 0x64
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
 80064be:	1acb      	subs	r3, r1, r3
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80064c6:	4b36      	ldr	r3, [pc, #216]	@ (80065a0 <UART_SetConfig+0x2d4>)
 80064c8:	fba3 2302 	umull	r2, r3, r3, r2
 80064cc:	095b      	lsrs	r3, r3, #5
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80064d4:	441c      	add	r4, r3
 80064d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80064e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80064e8:	4642      	mov	r2, r8
 80064ea:	464b      	mov	r3, r9
 80064ec:	1891      	adds	r1, r2, r2
 80064ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80064f0:	415b      	adcs	r3, r3
 80064f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80064f8:	4641      	mov	r1, r8
 80064fa:	1851      	adds	r1, r2, r1
 80064fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80064fe:	4649      	mov	r1, r9
 8006500:	414b      	adcs	r3, r1
 8006502:	637b      	str	r3, [r7, #52]	@ 0x34
 8006504:	f04f 0200 	mov.w	r2, #0
 8006508:	f04f 0300 	mov.w	r3, #0
 800650c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006510:	4659      	mov	r1, fp
 8006512:	00cb      	lsls	r3, r1, #3
 8006514:	4651      	mov	r1, sl
 8006516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800651a:	4651      	mov	r1, sl
 800651c:	00ca      	lsls	r2, r1, #3
 800651e:	4610      	mov	r0, r2
 8006520:	4619      	mov	r1, r3
 8006522:	4603      	mov	r3, r0
 8006524:	4642      	mov	r2, r8
 8006526:	189b      	adds	r3, r3, r2
 8006528:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800652c:	464b      	mov	r3, r9
 800652e:	460a      	mov	r2, r1
 8006530:	eb42 0303 	adc.w	r3, r2, r3
 8006534:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006544:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006548:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800654c:	460b      	mov	r3, r1
 800654e:	18db      	adds	r3, r3, r3
 8006550:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006552:	4613      	mov	r3, r2
 8006554:	eb42 0303 	adc.w	r3, r2, r3
 8006558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800655a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800655e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006562:	f7fa fba9 	bl	8000cb8 <__aeabi_uldivmod>
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	4b0d      	ldr	r3, [pc, #52]	@ (80065a0 <UART_SetConfig+0x2d4>)
 800656c:	fba3 1302 	umull	r1, r3, r3, r2
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	2164      	movs	r1, #100	@ 0x64
 8006574:	fb01 f303 	mul.w	r3, r1, r3
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	3332      	adds	r3, #50	@ 0x32
 800657e:	4a08      	ldr	r2, [pc, #32]	@ (80065a0 <UART_SetConfig+0x2d4>)
 8006580:	fba2 2303 	umull	r2, r3, r2, r3
 8006584:	095b      	lsrs	r3, r3, #5
 8006586:	f003 0207 	and.w	r2, r3, #7
 800658a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4422      	add	r2, r4
 8006592:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006594:	e106      	b.n	80067a4 <UART_SetConfig+0x4d8>
 8006596:	bf00      	nop
 8006598:	40011000 	.word	0x40011000
 800659c:	40011400 	.word	0x40011400
 80065a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065a8:	2200      	movs	r2, #0
 80065aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80065b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80065b6:	4642      	mov	r2, r8
 80065b8:	464b      	mov	r3, r9
 80065ba:	1891      	adds	r1, r2, r2
 80065bc:	6239      	str	r1, [r7, #32]
 80065be:	415b      	adcs	r3, r3
 80065c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065c6:	4641      	mov	r1, r8
 80065c8:	1854      	adds	r4, r2, r1
 80065ca:	4649      	mov	r1, r9
 80065cc:	eb43 0501 	adc.w	r5, r3, r1
 80065d0:	f04f 0200 	mov.w	r2, #0
 80065d4:	f04f 0300 	mov.w	r3, #0
 80065d8:	00eb      	lsls	r3, r5, #3
 80065da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065de:	00e2      	lsls	r2, r4, #3
 80065e0:	4614      	mov	r4, r2
 80065e2:	461d      	mov	r5, r3
 80065e4:	4643      	mov	r3, r8
 80065e6:	18e3      	adds	r3, r4, r3
 80065e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065ec:	464b      	mov	r3, r9
 80065ee:	eb45 0303 	adc.w	r3, r5, r3
 80065f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006602:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006606:	f04f 0200 	mov.w	r2, #0
 800660a:	f04f 0300 	mov.w	r3, #0
 800660e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006612:	4629      	mov	r1, r5
 8006614:	008b      	lsls	r3, r1, #2
 8006616:	4621      	mov	r1, r4
 8006618:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800661c:	4621      	mov	r1, r4
 800661e:	008a      	lsls	r2, r1, #2
 8006620:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006624:	f7fa fb48 	bl	8000cb8 <__aeabi_uldivmod>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4b60      	ldr	r3, [pc, #384]	@ (80067b0 <UART_SetConfig+0x4e4>)
 800662e:	fba3 2302 	umull	r2, r3, r3, r2
 8006632:	095b      	lsrs	r3, r3, #5
 8006634:	011c      	lsls	r4, r3, #4
 8006636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800663a:	2200      	movs	r2, #0
 800663c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006640:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006644:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006648:	4642      	mov	r2, r8
 800664a:	464b      	mov	r3, r9
 800664c:	1891      	adds	r1, r2, r2
 800664e:	61b9      	str	r1, [r7, #24]
 8006650:	415b      	adcs	r3, r3
 8006652:	61fb      	str	r3, [r7, #28]
 8006654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006658:	4641      	mov	r1, r8
 800665a:	1851      	adds	r1, r2, r1
 800665c:	6139      	str	r1, [r7, #16]
 800665e:	4649      	mov	r1, r9
 8006660:	414b      	adcs	r3, r1
 8006662:	617b      	str	r3, [r7, #20]
 8006664:	f04f 0200 	mov.w	r2, #0
 8006668:	f04f 0300 	mov.w	r3, #0
 800666c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006670:	4659      	mov	r1, fp
 8006672:	00cb      	lsls	r3, r1, #3
 8006674:	4651      	mov	r1, sl
 8006676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800667a:	4651      	mov	r1, sl
 800667c:	00ca      	lsls	r2, r1, #3
 800667e:	4610      	mov	r0, r2
 8006680:	4619      	mov	r1, r3
 8006682:	4603      	mov	r3, r0
 8006684:	4642      	mov	r2, r8
 8006686:	189b      	adds	r3, r3, r2
 8006688:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800668c:	464b      	mov	r3, r9
 800668e:	460a      	mov	r2, r1
 8006690:	eb42 0303 	adc.w	r3, r2, r3
 8006694:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80066b0:	4649      	mov	r1, r9
 80066b2:	008b      	lsls	r3, r1, #2
 80066b4:	4641      	mov	r1, r8
 80066b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ba:	4641      	mov	r1, r8
 80066bc:	008a      	lsls	r2, r1, #2
 80066be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80066c2:	f7fa faf9 	bl	8000cb8 <__aeabi_uldivmod>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4611      	mov	r1, r2
 80066cc:	4b38      	ldr	r3, [pc, #224]	@ (80067b0 <UART_SetConfig+0x4e4>)
 80066ce:	fba3 2301 	umull	r2, r3, r3, r1
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	2264      	movs	r2, #100	@ 0x64
 80066d6:	fb02 f303 	mul.w	r3, r2, r3
 80066da:	1acb      	subs	r3, r1, r3
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	3332      	adds	r3, #50	@ 0x32
 80066e0:	4a33      	ldr	r2, [pc, #204]	@ (80067b0 <UART_SetConfig+0x4e4>)
 80066e2:	fba2 2303 	umull	r2, r3, r2, r3
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066ec:	441c      	add	r4, r3
 80066ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066f2:	2200      	movs	r2, #0
 80066f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80066f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80066f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80066fc:	4642      	mov	r2, r8
 80066fe:	464b      	mov	r3, r9
 8006700:	1891      	adds	r1, r2, r2
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	415b      	adcs	r3, r3
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800670c:	4641      	mov	r1, r8
 800670e:	1851      	adds	r1, r2, r1
 8006710:	6039      	str	r1, [r7, #0]
 8006712:	4649      	mov	r1, r9
 8006714:	414b      	adcs	r3, r1
 8006716:	607b      	str	r3, [r7, #4]
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006724:	4659      	mov	r1, fp
 8006726:	00cb      	lsls	r3, r1, #3
 8006728:	4651      	mov	r1, sl
 800672a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800672e:	4651      	mov	r1, sl
 8006730:	00ca      	lsls	r2, r1, #3
 8006732:	4610      	mov	r0, r2
 8006734:	4619      	mov	r1, r3
 8006736:	4603      	mov	r3, r0
 8006738:	4642      	mov	r2, r8
 800673a:	189b      	adds	r3, r3, r2
 800673c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800673e:	464b      	mov	r3, r9
 8006740:	460a      	mov	r2, r1
 8006742:	eb42 0303 	adc.w	r3, r2, r3
 8006746:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	663b      	str	r3, [r7, #96]	@ 0x60
 8006752:	667a      	str	r2, [r7, #100]	@ 0x64
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	f04f 0300 	mov.w	r3, #0
 800675c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006760:	4649      	mov	r1, r9
 8006762:	008b      	lsls	r3, r1, #2
 8006764:	4641      	mov	r1, r8
 8006766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800676a:	4641      	mov	r1, r8
 800676c:	008a      	lsls	r2, r1, #2
 800676e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006772:	f7fa faa1 	bl	8000cb8 <__aeabi_uldivmod>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4b0d      	ldr	r3, [pc, #52]	@ (80067b0 <UART_SetConfig+0x4e4>)
 800677c:	fba3 1302 	umull	r1, r3, r3, r2
 8006780:	095b      	lsrs	r3, r3, #5
 8006782:	2164      	movs	r1, #100	@ 0x64
 8006784:	fb01 f303 	mul.w	r3, r1, r3
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	3332      	adds	r3, #50	@ 0x32
 800678e:	4a08      	ldr	r2, [pc, #32]	@ (80067b0 <UART_SetConfig+0x4e4>)
 8006790:	fba2 2303 	umull	r2, r3, r2, r3
 8006794:	095b      	lsrs	r3, r3, #5
 8006796:	f003 020f 	and.w	r2, r3, #15
 800679a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4422      	add	r2, r4
 80067a2:	609a      	str	r2, [r3, #8]
}
 80067a4:	bf00      	nop
 80067a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80067aa:	46bd      	mov	sp, r7
 80067ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067b0:	51eb851f 	.word	0x51eb851f

080067b4 <__NVIC_SetPriority>:
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	6039      	str	r1, [r7, #0]
 80067be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	db0a      	blt.n	80067de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	490c      	ldr	r1, [pc, #48]	@ (8006800 <__NVIC_SetPriority+0x4c>)
 80067ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d2:	0112      	lsls	r2, r2, #4
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	440b      	add	r3, r1
 80067d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80067dc:	e00a      	b.n	80067f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	4908      	ldr	r1, [pc, #32]	@ (8006804 <__NVIC_SetPriority+0x50>)
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	3b04      	subs	r3, #4
 80067ec:	0112      	lsls	r2, r2, #4
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	440b      	add	r3, r1
 80067f2:	761a      	strb	r2, [r3, #24]
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	e000e100 	.word	0xe000e100
 8006804:	e000ed00 	.word	0xe000ed00

08006808 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800680c:	4b05      	ldr	r3, [pc, #20]	@ (8006824 <SysTick_Handler+0x1c>)
 800680e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006810:	f002 fb88 	bl	8008f24 <xTaskGetSchedulerState>
 8006814:	4603      	mov	r3, r0
 8006816:	2b01      	cmp	r3, #1
 8006818:	d001      	beq.n	800681e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800681a:	f003 fb3d 	bl	8009e98 <xPortSysTickHandler>
  }
}
 800681e:	bf00      	nop
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	e000e010 	.word	0xe000e010

08006828 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800682c:	2100      	movs	r1, #0
 800682e:	f06f 0004 	mvn.w	r0, #4
 8006832:	f7ff ffbf 	bl	80067b4 <__NVIC_SetPriority>
#endif
}
 8006836:	bf00      	nop
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006842:	f3ef 8305 	mrs	r3, IPSR
 8006846:	603b      	str	r3, [r7, #0]
  return(result);
 8006848:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800684e:	f06f 0305 	mvn.w	r3, #5
 8006852:	607b      	str	r3, [r7, #4]
 8006854:	e00c      	b.n	8006870 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006856:	4b0a      	ldr	r3, [pc, #40]	@ (8006880 <osKernelInitialize+0x44>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d105      	bne.n	800686a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800685e:	4b08      	ldr	r3, [pc, #32]	@ (8006880 <osKernelInitialize+0x44>)
 8006860:	2201      	movs	r2, #1
 8006862:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006864:	2300      	movs	r3, #0
 8006866:	607b      	str	r3, [r7, #4]
 8006868:	e002      	b.n	8006870 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800686a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800686e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006870:	687b      	ldr	r3, [r7, #4]
}
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	20000c24 	.word	0x20000c24

08006884 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800688a:	f3ef 8305 	mrs	r3, IPSR
 800688e:	603b      	str	r3, [r7, #0]
  return(result);
 8006890:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006896:	f06f 0305 	mvn.w	r3, #5
 800689a:	607b      	str	r3, [r7, #4]
 800689c:	e010      	b.n	80068c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800689e:	4b0b      	ldr	r3, [pc, #44]	@ (80068cc <osKernelStart+0x48>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d109      	bne.n	80068ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80068a6:	f7ff ffbf 	bl	8006828 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80068aa:	4b08      	ldr	r3, [pc, #32]	@ (80068cc <osKernelStart+0x48>)
 80068ac:	2202      	movs	r2, #2
 80068ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80068b0:	f001 fed4 	bl	800865c <vTaskStartScheduler>
      stat = osOK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	607b      	str	r3, [r7, #4]
 80068b8:	e002      	b.n	80068c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80068ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80068be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068c0:	687b      	ldr	r3, [r7, #4]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20000c24 	.word	0x20000c24

080068d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08e      	sub	sp, #56	@ 0x38
 80068d4:	af04      	add	r7, sp, #16
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80068dc:	2300      	movs	r3, #0
 80068de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068e0:	f3ef 8305 	mrs	r3, IPSR
 80068e4:	617b      	str	r3, [r7, #20]
  return(result);
 80068e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d17e      	bne.n	80069ea <osThreadNew+0x11a>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d07b      	beq.n	80069ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80068f2:	2380      	movs	r3, #128	@ 0x80
 80068f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80068f6:	2318      	movs	r3, #24
 80068f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80068fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006902:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d045      	beq.n	8006996 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <osThreadNew+0x48>
        name = attr->name;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d008      	beq.n	800693e <osThreadNew+0x6e>
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	2b38      	cmp	r3, #56	@ 0x38
 8006930:	d805      	bhi.n	800693e <osThreadNew+0x6e>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <osThreadNew+0x72>
        return (NULL);
 800693e:	2300      	movs	r3, #0
 8006940:	e054      	b.n	80069ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	089b      	lsrs	r3, r3, #2
 8006950:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00e      	beq.n	8006978 <osThreadNew+0xa8>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	2ba7      	cmp	r3, #167	@ 0xa7
 8006960:	d90a      	bls.n	8006978 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006966:	2b00      	cmp	r3, #0
 8006968:	d006      	beq.n	8006978 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <osThreadNew+0xa8>
        mem = 1;
 8006972:	2301      	movs	r3, #1
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	e010      	b.n	800699a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10c      	bne.n	800699a <osThreadNew+0xca>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d108      	bne.n	800699a <osThreadNew+0xca>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d104      	bne.n	800699a <osThreadNew+0xca>
          mem = 0;
 8006990:	2300      	movs	r3, #0
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	e001      	b.n	800699a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006996:	2300      	movs	r3, #0
 8006998:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d110      	bne.n	80069c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069a8:	9202      	str	r2, [sp, #8]
 80069aa:	9301      	str	r3, [sp, #4]
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	6a3a      	ldr	r2, [r7, #32]
 80069b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f001 fc5c 	bl	8008274 <xTaskCreateStatic>
 80069bc:	4603      	mov	r3, r0
 80069be:	613b      	str	r3, [r7, #16]
 80069c0:	e013      	b.n	80069ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d110      	bne.n	80069ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	f107 0310 	add.w	r3, r7, #16
 80069d0:	9301      	str	r3, [sp, #4]
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f001 fcaa 	bl	8008334 <xTaskCreate>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d001      	beq.n	80069ea <osThreadNew+0x11a>
            hTask = NULL;
 80069e6:	2300      	movs	r3, #0
 80069e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80069ea:	693b      	ldr	r3, [r7, #16]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3728      	adds	r7, #40	@ 0x28
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069fc:	f3ef 8305 	mrs	r3, IPSR
 8006a00:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a02:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <osDelay+0x1c>
    stat = osErrorISR;
 8006a08:	f06f 0305 	mvn.w	r3, #5
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	e007      	b.n	8006a20 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f001 fde8 	bl	80085f0 <vTaskDelay>
    }
  }

  return (stat);
 8006a20:	68fb      	ldr	r3, [r7, #12]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f003 f850 	bl	8009ad8 <pvTimerGetTimerID>
 8006a38:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <TimerCallback+0x22>
    callb->func (callb->arg);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	6852      	ldr	r2, [r2, #4]
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4798      	blx	r3
  }
}
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b08c      	sub	sp, #48	@ 0x30
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	607a      	str	r2, [r7, #4]
 8006a5e:	603b      	str	r3, [r7, #0]
 8006a60:	460b      	mov	r3, r1
 8006a62:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006a64:	2300      	movs	r3, #0
 8006a66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a68:	f3ef 8305 	mrs	r3, IPSR
 8006a6c:	613b      	str	r3, [r7, #16]
  return(result);
 8006a6e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d163      	bne.n	8006b3c <osTimerNew+0xe8>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d060      	beq.n	8006b3c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8006a7a:	2008      	movs	r0, #8
 8006a7c:	f003 fa9e 	bl	8009fbc <pvPortMalloc>
 8006a80:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d059      	beq.n	8006b3c <osTimerNew+0xe8>
      callb->func = func;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8006a94:	7afb      	ldrb	r3, [r7, #11]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d102      	bne.n	8006aa0 <osTimerNew+0x4c>
        reload = pdFALSE;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61fb      	str	r3, [r7, #28]
 8006a9e:	e001      	b.n	8006aa4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8006aa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006aa8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01c      	beq.n	8006aee <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <osTimerNew+0x6e>
          name = attr->name;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d006      	beq.n	8006ad8 <osTimerNew+0x84>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	2b2b      	cmp	r3, #43	@ 0x2b
 8006ad0:	d902      	bls.n	8006ad8 <osTimerNew+0x84>
          mem = 1;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	61bb      	str	r3, [r7, #24]
 8006ad6:	e00c      	b.n	8006af2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d108      	bne.n	8006af2 <osTimerNew+0x9e>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d104      	bne.n	8006af2 <osTimerNew+0x9e>
            mem = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	61bb      	str	r3, [r7, #24]
 8006aec:	e001      	b.n	8006af2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d10c      	bne.n	8006b12 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	9301      	str	r3, [sp, #4]
 8006afe:	4b12      	ldr	r3, [pc, #72]	@ (8006b48 <osTimerNew+0xf4>)
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	69fa      	ldr	r2, [r7, #28]
 8006b06:	2101      	movs	r1, #1
 8006b08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b0a:	f002 fc58 	bl	80093be <xTimerCreateStatic>
 8006b0e:	6238      	str	r0, [r7, #32]
 8006b10:	e00b      	b.n	8006b2a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d108      	bne.n	8006b2a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006b18:	4b0b      	ldr	r3, [pc, #44]	@ (8006b48 <osTimerNew+0xf4>)
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	69fa      	ldr	r2, [r7, #28]
 8006b20:	2101      	movs	r1, #1
 8006b22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b24:	f002 fc2a 	bl	800937c <xTimerCreate>
 8006b28:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d105      	bne.n	8006b3c <osTimerNew+0xe8>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <osTimerNew+0xe8>
        vPortFree (callb);
 8006b36:	6978      	ldr	r0, [r7, #20]
 8006b38:	f003 fb0e 	bl	800a158 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3728      	adds	r7, #40	@ 0x28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	08006a2b 	.word	0x08006a2b

08006b4c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b5a:	f3ef 8305 	mrs	r3, IPSR
 8006b5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b60:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <osTimerStart+0x22>
    stat = osErrorISR;
 8006b66:	f06f 0305 	mvn.w	r3, #5
 8006b6a:	617b      	str	r3, [r7, #20]
 8006b6c:	e017      	b.n	8006b9e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d103      	bne.n	8006b7c <osTimerStart+0x30>
    stat = osErrorParameter;
 8006b74:	f06f 0303 	mvn.w	r3, #3
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	e010      	b.n	8006b9e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	2300      	movs	r3, #0
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	2104      	movs	r1, #4
 8006b86:	6938      	ldr	r0, [r7, #16]
 8006b88:	f002 fc96 	bl	80094b8 <xTimerGenericCommand>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d102      	bne.n	8006b98 <osTimerStart+0x4c>
      stat = osOK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]
 8006b96:	e002      	b.n	8006b9e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8006b98:	f06f 0302 	mvn.w	r3, #2
 8006b9c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006b9e:	697b      	ldr	r3, [r7, #20]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	@ 0x28
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bb8:	f3ef 8305 	mrs	r3, IPSR
 8006bbc:	613b      	str	r3, [r7, #16]
  return(result);
 8006bbe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d175      	bne.n	8006cb0 <osSemaphoreNew+0x108>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d072      	beq.n	8006cb0 <osSemaphoreNew+0x108>
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d86e      	bhi.n	8006cb0 <osSemaphoreNew+0x108>
    mem = -1;
 8006bd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006bd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d015      	beq.n	8006c0a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d006      	beq.n	8006bf4 <osSemaphoreNew+0x4c>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	2b4f      	cmp	r3, #79	@ 0x4f
 8006bec:	d902      	bls.n	8006bf4 <osSemaphoreNew+0x4c>
        mem = 1;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	61bb      	str	r3, [r7, #24]
 8006bf2:	e00c      	b.n	8006c0e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d108      	bne.n	8006c0e <osSemaphoreNew+0x66>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d104      	bne.n	8006c0e <osSemaphoreNew+0x66>
          mem = 0;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61bb      	str	r3, [r7, #24]
 8006c08:	e001      	b.n	8006c0e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c14:	d04c      	beq.n	8006cb0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d128      	bne.n	8006c6e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d10a      	bne.n	8006c38 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	2203      	movs	r2, #3
 8006c28:	9200      	str	r2, [sp, #0]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	2001      	movs	r0, #1
 8006c30:	f000 fb5e 	bl	80072f0 <xQueueGenericCreateStatic>
 8006c34:	61f8      	str	r0, [r7, #28]
 8006c36:	e005      	b.n	8006c44 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006c38:	2203      	movs	r2, #3
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	2001      	movs	r0, #1
 8006c3e:	f000 fbd4 	bl	80073ea <xQueueGenericCreate>
 8006c42:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d022      	beq.n	8006c90 <osSemaphoreNew+0xe8>
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01f      	beq.n	8006c90 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c50:	2300      	movs	r3, #0
 8006c52:	2200      	movs	r2, #0
 8006c54:	2100      	movs	r1, #0
 8006c56:	69f8      	ldr	r0, [r7, #28]
 8006c58:	f000 fc94 	bl	8007584 <xQueueGenericSend>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d016      	beq.n	8006c90 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006c62:	69f8      	ldr	r0, [r7, #28]
 8006c64:	f001 f932 	bl	8007ecc <vQueueDelete>
            hSemaphore = NULL;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	61fb      	str	r3, [r7, #28]
 8006c6c:	e010      	b.n	8006c90 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d108      	bne.n	8006c86 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 fc12 	bl	80074a6 <xQueueCreateCountingSemaphoreStatic>
 8006c82:	61f8      	str	r0, [r7, #28]
 8006c84:	e004      	b.n	8006c90 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006c86:	68b9      	ldr	r1, [r7, #8]
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 fc45 	bl	8007518 <xQueueCreateCountingSemaphore>
 8006c8e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00c      	beq.n	8006cb0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	e001      	b.n	8006ca8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006ca8:	6979      	ldr	r1, [r7, #20]
 8006caa:	69f8      	ldr	r0, [r7, #28]
 8006cac:	f001 fa5a 	bl	8008164 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006cb0:	69fb      	ldr	r3, [r7, #28]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3720      	adds	r7, #32
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d103      	bne.n	8006cdc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006cd4:	f06f 0303 	mvn.w	r3, #3
 8006cd8:	617b      	str	r3, [r7, #20]
 8006cda:	e039      	b.n	8006d50 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cdc:	f3ef 8305 	mrs	r3, IPSR
 8006ce0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d022      	beq.n	8006d2e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006cee:	f06f 0303 	mvn.w	r3, #3
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	e02c      	b.n	8006d50 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006cfa:	f107 0308 	add.w	r3, r7, #8
 8006cfe:	461a      	mov	r2, r3
 8006d00:	2100      	movs	r1, #0
 8006d02:	6938      	ldr	r0, [r7, #16]
 8006d04:	f001 f860 	bl	8007dc8 <xQueueReceiveFromISR>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d003      	beq.n	8006d16 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006d0e:	f06f 0302 	mvn.w	r3, #2
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	e01c      	b.n	8006d50 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d019      	beq.n	8006d50 <osSemaphoreAcquire+0x94>
 8006d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8006d5c <osSemaphoreAcquire+0xa0>)
 8006d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	e010      	b.n	8006d50 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6938      	ldr	r0, [r7, #16]
 8006d32:	f000 ff39 	bl	8007ba8 <xQueueSemaphoreTake>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d009      	beq.n	8006d50 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006d42:	f06f 0301 	mvn.w	r3, #1
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	e002      	b.n	8006d50 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006d4a:	f06f 0302 	mvn.w	r3, #2
 8006d4e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006d50:	697b      	ldr	r3, [r7, #20]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	e000ed04 	.word	0xe000ed04

08006d60 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d103      	bne.n	8006d7e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006d76:	f06f 0303 	mvn.w	r3, #3
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	e02c      	b.n	8006dd8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d7e:	f3ef 8305 	mrs	r3, IPSR
 8006d82:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d84:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d01a      	beq.n	8006dc0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006d8e:	f107 0308 	add.w	r3, r7, #8
 8006d92:	4619      	mov	r1, r3
 8006d94:	6938      	ldr	r0, [r7, #16]
 8006d96:	f000 fd95 	bl	80078c4 <xQueueGiveFromISR>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d003      	beq.n	8006da8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006da0:	f06f 0302 	mvn.w	r3, #2
 8006da4:	617b      	str	r3, [r7, #20]
 8006da6:	e017      	b.n	8006dd8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d014      	beq.n	8006dd8 <osSemaphoreRelease+0x78>
 8006dae:	4b0d      	ldr	r3, [pc, #52]	@ (8006de4 <osSemaphoreRelease+0x84>)
 8006db0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	e00b      	b.n	8006dd8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	6938      	ldr	r0, [r7, #16]
 8006dc8:	f000 fbdc 	bl	8007584 <xQueueGenericSend>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d002      	beq.n	8006dd8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006dd2:	f06f 0302 	mvn.w	r3, #2
 8006dd6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006dd8:	697b      	ldr	r3, [r7, #20]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	e000ed04 	.word	0xe000ed04

08006de8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08a      	sub	sp, #40	@ 0x28
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006df4:	2300      	movs	r3, #0
 8006df6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006df8:	f3ef 8305 	mrs	r3, IPSR
 8006dfc:	613b      	str	r3, [r7, #16]
  return(result);
 8006dfe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d15f      	bne.n	8006ec4 <osMessageQueueNew+0xdc>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d05c      	beq.n	8006ec4 <osMessageQueueNew+0xdc>
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d059      	beq.n	8006ec4 <osMessageQueueNew+0xdc>
    mem = -1;
 8006e10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e14:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d029      	beq.n	8006e70 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d012      	beq.n	8006e4a <osMessageQueueNew+0x62>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	2b4f      	cmp	r3, #79	@ 0x4f
 8006e2a:	d90e      	bls.n	8006e4a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	695a      	ldr	r2, [r3, #20]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	68b9      	ldr	r1, [r7, #8]
 8006e3c:	fb01 f303 	mul.w	r3, r1, r3
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d302      	bcc.n	8006e4a <osMessageQueueNew+0x62>
        mem = 1;
 8006e44:	2301      	movs	r3, #1
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	e014      	b.n	8006e74 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d110      	bne.n	8006e74 <osMessageQueueNew+0x8c>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10c      	bne.n	8006e74 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d108      	bne.n	8006e74 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d104      	bne.n	8006e74 <osMessageQueueNew+0x8c>
          mem = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	e001      	b.n	8006e74 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d10b      	bne.n	8006e92 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691a      	ldr	r2, [r3, #16]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	2100      	movs	r1, #0
 8006e84:	9100      	str	r1, [sp, #0]
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 fa31 	bl	80072f0 <xQueueGenericCreateStatic>
 8006e8e:	61f8      	str	r0, [r7, #28]
 8006e90:	e008      	b.n	8006ea4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d105      	bne.n	8006ea4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006e98:	2200      	movs	r2, #0
 8006e9a:	68b9      	ldr	r1, [r7, #8]
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 faa4 	bl	80073ea <xQueueGenericCreate>
 8006ea2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00c      	beq.n	8006ec4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	617b      	str	r3, [r7, #20]
 8006eb6:	e001      	b.n	8006ebc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006ebc:	6979      	ldr	r1, [r7, #20]
 8006ebe:	69f8      	ldr	r0, [r7, #28]
 8006ec0:	f001 f950 	bl	8008164 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006ec4:	69fb      	ldr	r3, [r7, #28]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3720      	adds	r7, #32
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
	...

08006ed0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	4613      	mov	r3, r2
 8006ede:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ee8:	f3ef 8305 	mrs	r3, IPSR
 8006eec:	617b      	str	r3, [r7, #20]
  return(result);
 8006eee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d028      	beq.n	8006f46 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d005      	beq.n	8006f06 <osMessageQueuePut+0x36>
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <osMessageQueuePut+0x36>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006f06:	f06f 0303 	mvn.w	r3, #3
 8006f0a:	61fb      	str	r3, [r7, #28]
 8006f0c:	e038      	b.n	8006f80 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006f12:	f107 0210 	add.w	r2, r7, #16
 8006f16:	2300      	movs	r3, #0
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	69b8      	ldr	r0, [r7, #24]
 8006f1c:	f000 fc34 	bl	8007788 <xQueueGenericSendFromISR>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d003      	beq.n	8006f2e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006f26:	f06f 0302 	mvn.w	r3, #2
 8006f2a:	61fb      	str	r3, [r7, #28]
 8006f2c:	e028      	b.n	8006f80 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d025      	beq.n	8006f80 <osMessageQueuePut+0xb0>
 8006f34:	4b15      	ldr	r3, [pc, #84]	@ (8006f8c <osMessageQueuePut+0xbc>)
 8006f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	e01c      	b.n	8006f80 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <osMessageQueuePut+0x82>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d103      	bne.n	8006f5a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006f52:	f06f 0303 	mvn.w	r3, #3
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	e012      	b.n	8006f80 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	68b9      	ldr	r1, [r7, #8]
 8006f60:	69b8      	ldr	r0, [r7, #24]
 8006f62:	f000 fb0f 	bl	8007584 <xQueueGenericSend>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d009      	beq.n	8006f80 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006f72:	f06f 0301 	mvn.w	r3, #1
 8006f76:	61fb      	str	r3, [r7, #28]
 8006f78:	e002      	b.n	8006f80 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006f7a:	f06f 0302 	mvn.w	r3, #2
 8006f7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006f80:	69fb      	ldr	r3, [r7, #28]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3720      	adds	r7, #32
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	e000ed04 	.word	0xe000ed04

08006f90 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b088      	sub	sp, #32
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fa6:	f3ef 8305 	mrs	r3, IPSR
 8006faa:	617b      	str	r3, [r7, #20]
  return(result);
 8006fac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d028      	beq.n	8007004 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d005      	beq.n	8006fc4 <osMessageQueueGet+0x34>
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <osMessageQueueGet+0x34>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d003      	beq.n	8006fcc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006fc4:	f06f 0303 	mvn.w	r3, #3
 8006fc8:	61fb      	str	r3, [r7, #28]
 8006fca:	e037      	b.n	800703c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006fd0:	f107 0310 	add.w	r3, r7, #16
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	68b9      	ldr	r1, [r7, #8]
 8006fd8:	69b8      	ldr	r0, [r7, #24]
 8006fda:	f000 fef5 	bl	8007dc8 <xQueueReceiveFromISR>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d003      	beq.n	8006fec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006fe4:	f06f 0302 	mvn.w	r3, #2
 8006fe8:	61fb      	str	r3, [r7, #28]
 8006fea:	e027      	b.n	800703c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d024      	beq.n	800703c <osMessageQueueGet+0xac>
 8006ff2:	4b15      	ldr	r3, [pc, #84]	@ (8007048 <osMessageQueueGet+0xb8>)
 8006ff4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	e01b      	b.n	800703c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <osMessageQueueGet+0x80>
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d103      	bne.n	8007018 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007010:	f06f 0303 	mvn.w	r3, #3
 8007014:	61fb      	str	r3, [r7, #28]
 8007016:	e011      	b.n	800703c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	69b8      	ldr	r0, [r7, #24]
 800701e:	f000 fce1 	bl	80079e4 <xQueueReceive>
 8007022:	4603      	mov	r3, r0
 8007024:	2b01      	cmp	r3, #1
 8007026:	d009      	beq.n	800703c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800702e:	f06f 0301 	mvn.w	r3, #1
 8007032:	61fb      	str	r3, [r7, #28]
 8007034:	e002      	b.n	800703c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007036:	f06f 0302 	mvn.w	r3, #2
 800703a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800703c:	69fb      	ldr	r3, [r7, #28]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3720      	adds	r7, #32
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	e000ed04 	.word	0xe000ed04

0800704c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4a07      	ldr	r2, [pc, #28]	@ (8007078 <vApplicationGetIdleTaskMemory+0x2c>)
 800705c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	4a06      	ldr	r2, [pc, #24]	@ (800707c <vApplicationGetIdleTaskMemory+0x30>)
 8007062:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2280      	movs	r2, #128	@ 0x80
 8007068:	601a      	str	r2, [r3, #0]
}
 800706a:	bf00      	nop
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	20000c28 	.word	0x20000c28
 800707c:	20000cd0 	.word	0x20000cd0

08007080 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4a07      	ldr	r2, [pc, #28]	@ (80070ac <vApplicationGetTimerTaskMemory+0x2c>)
 8007090:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	4a06      	ldr	r2, [pc, #24]	@ (80070b0 <vApplicationGetTimerTaskMemory+0x30>)
 8007096:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800709e:	601a      	str	r2, [r3, #0]
}
 80070a0:	bf00      	nop
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	20000ed0 	.word	0x20000ed0
 80070b0:	20000f78 	.word	0x20000f78

080070b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f103 0208 	add.w	r2, r3, #8
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f103 0208 	add.w	r2, r3, #8
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f103 0208 	add.w	r2, r3, #8
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007102:	bf00      	nop
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800710e:	b480      	push	{r7}
 8007110:	b085      	sub	sp, #20
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	601a      	str	r2, [r3, #0]
}
 800714a:	bf00      	nop
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007156:	b480      	push	{r7}
 8007158:	b085      	sub	sp, #20
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800716c:	d103      	bne.n	8007176 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	e00c      	b.n	8007190 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3308      	adds	r3, #8
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	e002      	b.n	8007184 <vListInsert+0x2e>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	429a      	cmp	r2, r3
 800718e:	d2f6      	bcs.n	800717e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	601a      	str	r2, [r3, #0]
}
 80071bc:	bf00      	nop
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	6892      	ldr	r2, [r2, #8]
 80071de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	6852      	ldr	r2, [r2, #4]
 80071e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d103      	bne.n	80071fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	1e5a      	subs	r2, r3, #1
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10b      	bne.n	8007248 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007242:	bf00      	nop
 8007244:	bf00      	nop
 8007246:	e7fd      	b.n	8007244 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007248:	f002 fd96 	bl	8009d78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007254:	68f9      	ldr	r1, [r7, #12]
 8007256:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007258:	fb01 f303 	mul.w	r3, r1, r3
 800725c:	441a      	add	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007278:	3b01      	subs	r3, #1
 800727a:	68f9      	ldr	r1, [r7, #12]
 800727c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800727e:	fb01 f303 	mul.w	r3, r1, r3
 8007282:	441a      	add	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	22ff      	movs	r2, #255	@ 0xff
 800728c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	22ff      	movs	r2, #255	@ 0xff
 8007294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d114      	bne.n	80072c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d01a      	beq.n	80072dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3310      	adds	r3, #16
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 fc74 	bl	8008b98 <xTaskRemoveFromEventList>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d012      	beq.n	80072dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80072b6:	4b0d      	ldr	r3, [pc, #52]	@ (80072ec <xQueueGenericReset+0xd0>)
 80072b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	e009      	b.n	80072dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3310      	adds	r3, #16
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff fef1 	bl	80070b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3324      	adds	r3, #36	@ 0x24
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff feec 	bl	80070b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072dc:	f002 fd7e 	bl	8009ddc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80072e0:	2301      	movs	r3, #1
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	e000ed04 	.word	0xe000ed04

080072f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08e      	sub	sp, #56	@ 0x38
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10b      	bne.n	800731c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	e7fd      	b.n	8007318 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10b      	bne.n	800733a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007334:	bf00      	nop
 8007336:	bf00      	nop
 8007338:	e7fd      	b.n	8007336 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <xQueueGenericCreateStatic+0x56>
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <xQueueGenericCreateStatic+0x5a>
 8007346:	2301      	movs	r3, #1
 8007348:	e000      	b.n	800734c <xQueueGenericCreateStatic+0x5c>
 800734a:	2300      	movs	r3, #0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10b      	bne.n	8007368 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	623b      	str	r3, [r7, #32]
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	e7fd      	b.n	8007364 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d102      	bne.n	8007374 <xQueueGenericCreateStatic+0x84>
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <xQueueGenericCreateStatic+0x88>
 8007374:	2301      	movs	r3, #1
 8007376:	e000      	b.n	800737a <xQueueGenericCreateStatic+0x8a>
 8007378:	2300      	movs	r3, #0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10b      	bne.n	8007396 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	61fb      	str	r3, [r7, #28]
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	e7fd      	b.n	8007392 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007396:	2350      	movs	r3, #80	@ 0x50
 8007398:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b50      	cmp	r3, #80	@ 0x50
 800739e:	d00b      	beq.n	80073b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	61bb      	str	r3, [r7, #24]
}
 80073b2:	bf00      	nop
 80073b4:	bf00      	nop
 80073b6:	e7fd      	b.n	80073b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80073be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00d      	beq.n	80073e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80073d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	4613      	mov	r3, r2
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	68b9      	ldr	r1, [r7, #8]
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 f840 	bl	8007460 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3730      	adds	r7, #48	@ 0x30
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b08a      	sub	sp, #40	@ 0x28
 80073ee:	af02      	add	r7, sp, #8
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	60b9      	str	r1, [r7, #8]
 80073f4:	4613      	mov	r3, r2
 80073f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10b      	bne.n	8007416 <xQueueGenericCreate+0x2c>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	613b      	str	r3, [r7, #16]
}
 8007410:	bf00      	nop
 8007412:	bf00      	nop
 8007414:	e7fd      	b.n	8007412 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	fb02 f303 	mul.w	r3, r2, r3
 800741e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	3350      	adds	r3, #80	@ 0x50
 8007424:	4618      	mov	r0, r3
 8007426:	f002 fdc9 	bl	8009fbc <pvPortMalloc>
 800742a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d011      	beq.n	8007456 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	3350      	adds	r3, #80	@ 0x50
 800743a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007444:	79fa      	ldrb	r2, [r7, #7]
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	4613      	mov	r3, r2
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	68b9      	ldr	r1, [r7, #8]
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 f805 	bl	8007460 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007456:	69bb      	ldr	r3, [r7, #24]
	}
 8007458:	4618      	mov	r0, r3
 800745a:	3720      	adds	r7, #32
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d103      	bne.n	800747c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	601a      	str	r2, [r3, #0]
 800747a:	e002      	b.n	8007482 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800748e:	2101      	movs	r1, #1
 8007490:	69b8      	ldr	r0, [r7, #24]
 8007492:	f7ff fec3 	bl	800721c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	78fa      	ldrb	r2, [r7, #3]
 800749a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800749e:	bf00      	nop
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b08a      	sub	sp, #40	@ 0x28
 80074aa:	af02      	add	r7, sp, #8
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10b      	bne.n	80074d0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	61bb      	str	r3, [r7, #24]
}
 80074ca:	bf00      	nop
 80074cc:	bf00      	nop
 80074ce:	e7fd      	b.n	80074cc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d90b      	bls.n	80074f0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80074d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	617b      	str	r3, [r7, #20]
}
 80074ea:	bf00      	nop
 80074ec:	bf00      	nop
 80074ee:	e7fd      	b.n	80074ec <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80074f0:	2302      	movs	r3, #2
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	2100      	movs	r1, #0
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f7ff fef8 	bl	80072f0 <xQueueGenericCreateStatic>
 8007500:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800750e:	69fb      	ldr	r3, [r7, #28]
	}
 8007510:	4618      	mov	r0, r3
 8007512:	3720      	adds	r7, #32
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10b      	bne.n	8007540 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	613b      	str	r3, [r7, #16]
}
 800753a:	bf00      	nop
 800753c:	bf00      	nop
 800753e:	e7fd      	b.n	800753c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	429a      	cmp	r2, r3
 8007546:	d90b      	bls.n	8007560 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	60fb      	str	r3, [r7, #12]
}
 800755a:	bf00      	nop
 800755c:	bf00      	nop
 800755e:	e7fd      	b.n	800755c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007560:	2202      	movs	r2, #2
 8007562:	2100      	movs	r1, #0
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7ff ff40 	bl	80073ea <xQueueGenericCreate>
 800756a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007578:	697b      	ldr	r3, [r7, #20]
	}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08e      	sub	sp, #56	@ 0x38
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007592:	2300      	movs	r3, #0
 8007594:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10b      	bne.n	80075b8 <xQueueGenericSend+0x34>
	__asm volatile
 80075a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075b2:	bf00      	nop
 80075b4:	bf00      	nop
 80075b6:	e7fd      	b.n	80075b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d103      	bne.n	80075c6 <xQueueGenericSend+0x42>
 80075be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <xQueueGenericSend+0x46>
 80075c6:	2301      	movs	r3, #1
 80075c8:	e000      	b.n	80075cc <xQueueGenericSend+0x48>
 80075ca:	2300      	movs	r3, #0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10b      	bne.n	80075e8 <xQueueGenericSend+0x64>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80075e2:	bf00      	nop
 80075e4:	bf00      	nop
 80075e6:	e7fd      	b.n	80075e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d103      	bne.n	80075f6 <xQueueGenericSend+0x72>
 80075ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d101      	bne.n	80075fa <xQueueGenericSend+0x76>
 80075f6:	2301      	movs	r3, #1
 80075f8:	e000      	b.n	80075fc <xQueueGenericSend+0x78>
 80075fa:	2300      	movs	r3, #0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10b      	bne.n	8007618 <xQueueGenericSend+0x94>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	623b      	str	r3, [r7, #32]
}
 8007612:	bf00      	nop
 8007614:	bf00      	nop
 8007616:	e7fd      	b.n	8007614 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007618:	f001 fc84 	bl	8008f24 <xTaskGetSchedulerState>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d102      	bne.n	8007628 <xQueueGenericSend+0xa4>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <xQueueGenericSend+0xa8>
 8007628:	2301      	movs	r3, #1
 800762a:	e000      	b.n	800762e <xQueueGenericSend+0xaa>
 800762c:	2300      	movs	r3, #0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10b      	bne.n	800764a <xQueueGenericSend+0xc6>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	61fb      	str	r3, [r7, #28]
}
 8007644:	bf00      	nop
 8007646:	bf00      	nop
 8007648:	e7fd      	b.n	8007646 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800764a:	f002 fb95 	bl	8009d78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007656:	429a      	cmp	r2, r3
 8007658:	d302      	bcc.n	8007660 <xQueueGenericSend+0xdc>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d129      	bne.n	80076b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007666:	f000 fc6d 	bl	8007f44 <prvCopyDataToQueue>
 800766a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800766c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007670:	2b00      	cmp	r3, #0
 8007672:	d010      	beq.n	8007696 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007676:	3324      	adds	r3, #36	@ 0x24
 8007678:	4618      	mov	r0, r3
 800767a:	f001 fa8d 	bl	8008b98 <xTaskRemoveFromEventList>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d013      	beq.n	80076ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007684:	4b3f      	ldr	r3, [pc, #252]	@ (8007784 <xQueueGenericSend+0x200>)
 8007686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	e00a      	b.n	80076ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007698:	2b00      	cmp	r3, #0
 800769a:	d007      	beq.n	80076ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800769c:	4b39      	ldr	r3, [pc, #228]	@ (8007784 <xQueueGenericSend+0x200>)
 800769e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80076ac:	f002 fb96 	bl	8009ddc <vPortExitCritical>
				return pdPASS;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e063      	b.n	800777c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d103      	bne.n	80076c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076ba:	f002 fb8f 	bl	8009ddc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80076be:	2300      	movs	r3, #0
 80076c0:	e05c      	b.n	800777c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d106      	bne.n	80076d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076c8:	f107 0314 	add.w	r3, r7, #20
 80076cc:	4618      	mov	r0, r3
 80076ce:	f001 fac7 	bl	8008c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076d2:	2301      	movs	r3, #1
 80076d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076d6:	f002 fb81 	bl	8009ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076da:	f001 f82f 	bl	800873c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076de:	f002 fb4b 	bl	8009d78 <vPortEnterCritical>
 80076e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076e8:	b25b      	sxtb	r3, r3
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076ee:	d103      	bne.n	80076f8 <xQueueGenericSend+0x174>
 80076f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076fe:	b25b      	sxtb	r3, r3
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007704:	d103      	bne.n	800770e <xQueueGenericSend+0x18a>
 8007706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800770e:	f002 fb65 	bl	8009ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007712:	1d3a      	adds	r2, r7, #4
 8007714:	f107 0314 	add.w	r3, r7, #20
 8007718:	4611      	mov	r1, r2
 800771a:	4618      	mov	r0, r3
 800771c:	f001 fab6 	bl	8008c8c <xTaskCheckForTimeOut>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d124      	bne.n	8007770 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007726:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007728:	f000 fd04 	bl	8008134 <prvIsQueueFull>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d018      	beq.n	8007764 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007734:	3310      	adds	r3, #16
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	4611      	mov	r1, r2
 800773a:	4618      	mov	r0, r3
 800773c:	f001 f9da 	bl	8008af4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007740:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007742:	f000 fc8f 	bl	8008064 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007746:	f001 f807 	bl	8008758 <xTaskResumeAll>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	f47f af7c 	bne.w	800764a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007752:	4b0c      	ldr	r3, [pc, #48]	@ (8007784 <xQueueGenericSend+0x200>)
 8007754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	e772      	b.n	800764a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007764:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007766:	f000 fc7d 	bl	8008064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800776a:	f000 fff5 	bl	8008758 <xTaskResumeAll>
 800776e:	e76c      	b.n	800764a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007770:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007772:	f000 fc77 	bl	8008064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007776:	f000 ffef 	bl	8008758 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800777a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800777c:	4618      	mov	r0, r3
 800777e:	3738      	adds	r7, #56	@ 0x38
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	e000ed04 	.word	0xe000ed04

08007788 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b090      	sub	sp, #64	@ 0x40
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800779a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10b      	bne.n	80077b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077b2:	bf00      	nop
 80077b4:	bf00      	nop
 80077b6:	e7fd      	b.n	80077b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d103      	bne.n	80077c6 <xQueueGenericSendFromISR+0x3e>
 80077be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <xQueueGenericSendFromISR+0x42>
 80077c6:	2301      	movs	r3, #1
 80077c8:	e000      	b.n	80077cc <xQueueGenericSendFromISR+0x44>
 80077ca:	2300      	movs	r3, #0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10b      	bne.n	80077e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80077e2:	bf00      	nop
 80077e4:	bf00      	nop
 80077e6:	e7fd      	b.n	80077e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d103      	bne.n	80077f6 <xQueueGenericSendFromISR+0x6e>
 80077ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d101      	bne.n	80077fa <xQueueGenericSendFromISR+0x72>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e000      	b.n	80077fc <xQueueGenericSendFromISR+0x74>
 80077fa:	2300      	movs	r3, #0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10b      	bne.n	8007818 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	623b      	str	r3, [r7, #32]
}
 8007812:	bf00      	nop
 8007814:	bf00      	nop
 8007816:	e7fd      	b.n	8007814 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007818:	f002 fb8e 	bl	8009f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800781c:	f3ef 8211 	mrs	r2, BASEPRI
 8007820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	61fa      	str	r2, [r7, #28]
 8007832:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007834:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007836:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800783c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007840:	429a      	cmp	r2, r3
 8007842:	d302      	bcc.n	800784a <xQueueGenericSendFromISR+0xc2>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2b02      	cmp	r3, #2
 8007848:	d12f      	bne.n	80078aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800784a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800784c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007850:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007858:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	68b9      	ldr	r1, [r7, #8]
 800785e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007860:	f000 fb70 	bl	8007f44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007864:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007868:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800786c:	d112      	bne.n	8007894 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800786e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007872:	2b00      	cmp	r3, #0
 8007874:	d016      	beq.n	80078a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007878:	3324      	adds	r3, #36	@ 0x24
 800787a:	4618      	mov	r0, r3
 800787c:	f001 f98c 	bl	8008b98 <xTaskRemoveFromEventList>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00e      	beq.n	80078a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00b      	beq.n	80078a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	e007      	b.n	80078a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007894:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007898:	3301      	adds	r3, #1
 800789a:	b2db      	uxtb	r3, r3
 800789c:	b25a      	sxtb	r2, r3
 800789e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80078a4:	2301      	movs	r3, #1
 80078a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80078a8:	e001      	b.n	80078ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80078b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3740      	adds	r7, #64	@ 0x40
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08e      	sub	sp, #56	@ 0x38
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80078d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10b      	bne.n	80078f0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	623b      	str	r3, [r7, #32]
}
 80078ea:	bf00      	nop
 80078ec:	bf00      	nop
 80078ee:	e7fd      	b.n	80078ec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80078f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00b      	beq.n	8007910 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	61fb      	str	r3, [r7, #28]
}
 800790a:	bf00      	nop
 800790c:	bf00      	nop
 800790e:	e7fd      	b.n	800790c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d103      	bne.n	8007920 <xQueueGiveFromISR+0x5c>
 8007918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <xQueueGiveFromISR+0x60>
 8007920:	2301      	movs	r3, #1
 8007922:	e000      	b.n	8007926 <xQueueGiveFromISR+0x62>
 8007924:	2300      	movs	r3, #0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10b      	bne.n	8007942 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	61bb      	str	r3, [r7, #24]
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	e7fd      	b.n	800793e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007942:	f002 faf9 	bl	8009f38 <vPortValidateInterruptPriority>
	__asm volatile
 8007946:	f3ef 8211 	mrs	r2, BASEPRI
 800794a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	617a      	str	r2, [r7, #20]
 800795c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800795e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007960:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007966:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800796c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800796e:	429a      	cmp	r2, r3
 8007970:	d22b      	bcs.n	80079ca <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007974:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800797c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007982:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007984:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007988:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800798c:	d112      	bne.n	80079b4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800798e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007992:	2b00      	cmp	r3, #0
 8007994:	d016      	beq.n	80079c4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007998:	3324      	adds	r3, #36	@ 0x24
 800799a:	4618      	mov	r0, r3
 800799c:	f001 f8fc 	bl	8008b98 <xTaskRemoveFromEventList>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00e      	beq.n	80079c4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00b      	beq.n	80079c4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2201      	movs	r2, #1
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	e007      	b.n	80079c4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079b8:	3301      	adds	r3, #1
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	b25a      	sxtb	r2, r3
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80079c4:	2301      	movs	r3, #1
 80079c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c8:	e001      	b.n	80079ce <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f383 8811 	msr	BASEPRI, r3
}
 80079d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3738      	adds	r7, #56	@ 0x38
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b08c      	sub	sp, #48	@ 0x30
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80079f0:	2300      	movs	r3, #0
 80079f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10b      	bne.n	8007a16 <xQueueReceive+0x32>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	623b      	str	r3, [r7, #32]
}
 8007a10:	bf00      	nop
 8007a12:	bf00      	nop
 8007a14:	e7fd      	b.n	8007a12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d103      	bne.n	8007a24 <xQueueReceive+0x40>
 8007a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <xQueueReceive+0x44>
 8007a24:	2301      	movs	r3, #1
 8007a26:	e000      	b.n	8007a2a <xQueueReceive+0x46>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10b      	bne.n	8007a46 <xQueueReceive+0x62>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	61fb      	str	r3, [r7, #28]
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	e7fd      	b.n	8007a42 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a46:	f001 fa6d 	bl	8008f24 <xTaskGetSchedulerState>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d102      	bne.n	8007a56 <xQueueReceive+0x72>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <xQueueReceive+0x76>
 8007a56:	2301      	movs	r3, #1
 8007a58:	e000      	b.n	8007a5c <xQueueReceive+0x78>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10b      	bne.n	8007a78 <xQueueReceive+0x94>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	61bb      	str	r3, [r7, #24]
}
 8007a72:	bf00      	nop
 8007a74:	bf00      	nop
 8007a76:	e7fd      	b.n	8007a74 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a78:	f002 f97e 	bl	8009d78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01f      	beq.n	8007ac8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a88:	68b9      	ldr	r1, [r7, #8]
 8007a8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a8c:	f000 fac4 	bl	8008018 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a92:	1e5a      	subs	r2, r3, #1
 8007a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a96:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00f      	beq.n	8007ac0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa2:	3310      	adds	r3, #16
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f001 f877 	bl	8008b98 <xTaskRemoveFromEventList>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d007      	beq.n	8007ac0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8007ba4 <xQueueReceive+0x1c0>)
 8007ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ac0:	f002 f98c 	bl	8009ddc <vPortExitCritical>
				return pdPASS;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e069      	b.n	8007b9c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d103      	bne.n	8007ad6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ace:	f002 f985 	bl	8009ddc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e062      	b.n	8007b9c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d106      	bne.n	8007aea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007adc:	f107 0310 	add.w	r3, r7, #16
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f001 f8bd 	bl	8008c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007aea:	f002 f977 	bl	8009ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007aee:	f000 fe25 	bl	800873c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007af2:	f002 f941 	bl	8009d78 <vPortEnterCritical>
 8007af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007afc:	b25b      	sxtb	r3, r3
 8007afe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b02:	d103      	bne.n	8007b0c <xQueueReceive+0x128>
 8007b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b12:	b25b      	sxtb	r3, r3
 8007b14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b18:	d103      	bne.n	8007b22 <xQueueReceive+0x13e>
 8007b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b22:	f002 f95b 	bl	8009ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b26:	1d3a      	adds	r2, r7, #4
 8007b28:	f107 0310 	add.w	r3, r7, #16
 8007b2c:	4611      	mov	r1, r2
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f001 f8ac 	bl	8008c8c <xTaskCheckForTimeOut>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d123      	bne.n	8007b82 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b3c:	f000 fae4 	bl	8008108 <prvIsQueueEmpty>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d017      	beq.n	8007b76 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b48:	3324      	adds	r3, #36	@ 0x24
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 ffd0 	bl	8008af4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b56:	f000 fa85 	bl	8008064 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b5a:	f000 fdfd 	bl	8008758 <xTaskResumeAll>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d189      	bne.n	8007a78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007b64:	4b0f      	ldr	r3, [pc, #60]	@ (8007ba4 <xQueueReceive+0x1c0>)
 8007b66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	e780      	b.n	8007a78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b78:	f000 fa74 	bl	8008064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b7c:	f000 fdec 	bl	8008758 <xTaskResumeAll>
 8007b80:	e77a      	b.n	8007a78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b84:	f000 fa6e 	bl	8008064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b88:	f000 fde6 	bl	8008758 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b8e:	f000 fabb 	bl	8008108 <prvIsQueueEmpty>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f43f af6f 	beq.w	8007a78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3730      	adds	r7, #48	@ 0x30
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	e000ed04 	.word	0xe000ed04

08007ba8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08e      	sub	sp, #56	@ 0x38
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10b      	bne.n	8007bdc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	623b      	str	r3, [r7, #32]
}
 8007bd6:	bf00      	nop
 8007bd8:	bf00      	nop
 8007bda:	e7fd      	b.n	8007bd8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	61fb      	str	r3, [r7, #28]
}
 8007bf6:	bf00      	nop
 8007bf8:	bf00      	nop
 8007bfa:	e7fd      	b.n	8007bf8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bfc:	f001 f992 	bl	8008f24 <xTaskGetSchedulerState>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d102      	bne.n	8007c0c <xQueueSemaphoreTake+0x64>
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <xQueueSemaphoreTake+0x68>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e000      	b.n	8007c12 <xQueueSemaphoreTake+0x6a>
 8007c10:	2300      	movs	r3, #0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10b      	bne.n	8007c2e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	61bb      	str	r3, [r7, #24]
}
 8007c28:	bf00      	nop
 8007c2a:	bf00      	nop
 8007c2c:	e7fd      	b.n	8007c2a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c2e:	f002 f8a3 	bl	8009d78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c36:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d024      	beq.n	8007c88 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c40:	1e5a      	subs	r2, r3, #1
 8007c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c44:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d104      	bne.n	8007c58 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007c4e:	f001 fae3 	bl	8009218 <pvTaskIncrementMutexHeldCount>
 8007c52:	4602      	mov	r2, r0
 8007c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c56:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00f      	beq.n	8007c80 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c62:	3310      	adds	r3, #16
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 ff97 	bl	8008b98 <xTaskRemoveFromEventList>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d007      	beq.n	8007c80 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c70:	4b54      	ldr	r3, [pc, #336]	@ (8007dc4 <xQueueSemaphoreTake+0x21c>)
 8007c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c80:	f002 f8ac 	bl	8009ddc <vPortExitCritical>
				return pdPASS;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e098      	b.n	8007dba <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d112      	bne.n	8007cb4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	617b      	str	r3, [r7, #20]
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	e7fd      	b.n	8007ca8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007cac:	f002 f896 	bl	8009ddc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	e082      	b.n	8007dba <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d106      	bne.n	8007cc8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cba:	f107 030c 	add.w	r3, r7, #12
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 ffce 	bl	8008c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cc8:	f002 f888 	bl	8009ddc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ccc:	f000 fd36 	bl	800873c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cd0:	f002 f852 	bl	8009d78 <vPortEnterCritical>
 8007cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cda:	b25b      	sxtb	r3, r3
 8007cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ce0:	d103      	bne.n	8007cea <xQueueSemaphoreTake+0x142>
 8007ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cf0:	b25b      	sxtb	r3, r3
 8007cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cf6:	d103      	bne.n	8007d00 <xQueueSemaphoreTake+0x158>
 8007cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d00:	f002 f86c 	bl	8009ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d04:	463a      	mov	r2, r7
 8007d06:	f107 030c 	add.w	r3, r7, #12
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 ffbd 	bl	8008c8c <xTaskCheckForTimeOut>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d132      	bne.n	8007d7e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d1a:	f000 f9f5 	bl	8008108 <prvIsQueueEmpty>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d026      	beq.n	8007d72 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d109      	bne.n	8007d40 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007d2c:	f002 f824 	bl	8009d78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f001 f913 	bl	8008f60 <xTaskPriorityInherit>
 8007d3a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007d3c:	f002 f84e 	bl	8009ddc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d42:	3324      	adds	r3, #36	@ 0x24
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	4611      	mov	r1, r2
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 fed3 	bl	8008af4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d50:	f000 f988 	bl	8008064 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d54:	f000 fd00 	bl	8008758 <xTaskResumeAll>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f47f af67 	bne.w	8007c2e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007d60:	4b18      	ldr	r3, [pc, #96]	@ (8007dc4 <xQueueSemaphoreTake+0x21c>)
 8007d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	e75d      	b.n	8007c2e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007d72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d74:	f000 f976 	bl	8008064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d78:	f000 fcee 	bl	8008758 <xTaskResumeAll>
 8007d7c:	e757      	b.n	8007c2e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007d7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d80:	f000 f970 	bl	8008064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d84:	f000 fce8 	bl	8008758 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d8a:	f000 f9bd 	bl	8008108 <prvIsQueueEmpty>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f43f af4c 	beq.w	8007c2e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00d      	beq.n	8007db8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007d9c:	f001 ffec 	bl	8009d78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007da0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007da2:	f000 f8b7 	bl	8007f14 <prvGetDisinheritPriorityAfterTimeout>
 8007da6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007dae:	4618      	mov	r0, r3
 8007db0:	f001 f9ae 	bl	8009110 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007db4:	f002 f812 	bl	8009ddc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007db8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3738      	adds	r7, #56	@ 0x38
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	e000ed04 	.word	0xe000ed04

08007dc8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b08e      	sub	sp, #56	@ 0x38
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10b      	bne.n	8007df6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	623b      	str	r3, [r7, #32]
}
 8007df0:	bf00      	nop
 8007df2:	bf00      	nop
 8007df4:	e7fd      	b.n	8007df2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d103      	bne.n	8007e04 <xQueueReceiveFromISR+0x3c>
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <xQueueReceiveFromISR+0x40>
 8007e04:	2301      	movs	r3, #1
 8007e06:	e000      	b.n	8007e0a <xQueueReceiveFromISR+0x42>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10b      	bne.n	8007e26 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	61fb      	str	r3, [r7, #28]
}
 8007e20:	bf00      	nop
 8007e22:	bf00      	nop
 8007e24:	e7fd      	b.n	8007e22 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e26:	f002 f887 	bl	8009f38 <vPortValidateInterruptPriority>
	__asm volatile
 8007e2a:	f3ef 8211 	mrs	r2, BASEPRI
 8007e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	61ba      	str	r2, [r7, #24]
 8007e40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007e42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e4a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d02f      	beq.n	8007eb2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e5c:	68b9      	ldr	r1, [r7, #8]
 8007e5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e60:	f000 f8da 	bl	8008018 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e66:	1e5a      	subs	r2, r3, #1
 8007e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007e6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007e70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e74:	d112      	bne.n	8007e9c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d016      	beq.n	8007eac <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e80:	3310      	adds	r3, #16
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fe88 	bl	8008b98 <xTaskRemoveFromEventList>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00e      	beq.n	8007eac <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00b      	beq.n	8007eac <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	601a      	str	r2, [r3, #0]
 8007e9a:	e007      	b.n	8007eac <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	b25a      	sxtb	r2, r3
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007eac:	2301      	movs	r3, #1
 8007eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eb0:	e001      	b.n	8007eb6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f383 8811 	msr	BASEPRI, r3
}
 8007ec0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3738      	adds	r7, #56	@ 0x38
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10b      	bne.n	8007ef6 <vQueueDelete+0x2a>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	60bb      	str	r3, [r7, #8]
}
 8007ef0:	bf00      	nop
 8007ef2:	bf00      	nop
 8007ef4:	e7fd      	b.n	8007ef2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 f95e 	bl	80081b8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d102      	bne.n	8007f0c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f002 f926 	bl	800a158 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007f0c:	bf00      	nop
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d006      	beq.n	8007f32 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007f2e:	60fb      	str	r3, [r7, #12]
 8007f30:	e001      	b.n	8007f36 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007f32:	2300      	movs	r3, #0
 8007f34:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007f36:	68fb      	ldr	r3, [r7, #12]
	}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f50:	2300      	movs	r3, #0
 8007f52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10d      	bne.n	8007f7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d14d      	bne.n	8008006 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f001 f85e 	bl	8009030 <xTaskPriorityDisinherit>
 8007f74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	609a      	str	r2, [r3, #8]
 8007f7c:	e043      	b.n	8008006 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d119      	bne.n	8007fb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6858      	ldr	r0, [r3, #4]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	f007 f9eb 	bl	800f36a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9c:	441a      	add	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d32b      	bcc.n	8008006 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	605a      	str	r2, [r3, #4]
 8007fb6:	e026      	b.n	8008006 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	68d8      	ldr	r0, [r3, #12]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	68b9      	ldr	r1, [r7, #8]
 8007fc4:	f007 f9d1 	bl	800f36a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd0:	425b      	negs	r3, r3
 8007fd2:	441a      	add	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d207      	bcs.n	8007ff4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	689a      	ldr	r2, [r3, #8]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fec:	425b      	negs	r3, r3
 8007fee:	441a      	add	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d105      	bne.n	8008006 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	3b01      	subs	r3, #1
 8008004:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	1c5a      	adds	r2, r3, #1
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800800e:	697b      	ldr	r3, [r7, #20]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008026:	2b00      	cmp	r3, #0
 8008028:	d018      	beq.n	800805c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008032:	441a      	add	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68da      	ldr	r2, [r3, #12]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	429a      	cmp	r2, r3
 8008042:	d303      	bcc.n	800804c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68d9      	ldr	r1, [r3, #12]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008054:	461a      	mov	r2, r3
 8008056:	6838      	ldr	r0, [r7, #0]
 8008058:	f007 f987 	bl	800f36a <memcpy>
	}
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800806c:	f001 fe84 	bl	8009d78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008076:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008078:	e011      	b.n	800809e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800807e:	2b00      	cmp	r3, #0
 8008080:	d012      	beq.n	80080a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3324      	adds	r3, #36	@ 0x24
 8008086:	4618      	mov	r0, r3
 8008088:	f000 fd86 	bl	8008b98 <xTaskRemoveFromEventList>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008092:	f000 fe5f 	bl	8008d54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
 8008098:	3b01      	subs	r3, #1
 800809a:	b2db      	uxtb	r3, r3
 800809c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800809e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	dce9      	bgt.n	800807a <prvUnlockQueue+0x16>
 80080a6:	e000      	b.n	80080aa <prvUnlockQueue+0x46>
					break;
 80080a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	22ff      	movs	r2, #255	@ 0xff
 80080ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80080b2:	f001 fe93 	bl	8009ddc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080b6:	f001 fe5f 	bl	8009d78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080c2:	e011      	b.n	80080e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d012      	beq.n	80080f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3310      	adds	r3, #16
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 fd61 	bl	8008b98 <xTaskRemoveFromEventList>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080dc:	f000 fe3a 	bl	8008d54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	dce9      	bgt.n	80080c4 <prvUnlockQueue+0x60>
 80080f0:	e000      	b.n	80080f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	22ff      	movs	r2, #255	@ 0xff
 80080f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80080fc:	f001 fe6e 	bl	8009ddc <vPortExitCritical>
}
 8008100:	bf00      	nop
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008110:	f001 fe32 	bl	8009d78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008118:	2b00      	cmp	r3, #0
 800811a:	d102      	bne.n	8008122 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800811c:	2301      	movs	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	e001      	b.n	8008126 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008122:	2300      	movs	r3, #0
 8008124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008126:	f001 fe59 	bl	8009ddc <vPortExitCritical>

	return xReturn;
 800812a:	68fb      	ldr	r3, [r7, #12]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800813c:	f001 fe1c 	bl	8009d78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008148:	429a      	cmp	r2, r3
 800814a:	d102      	bne.n	8008152 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800814c:	2301      	movs	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]
 8008150:	e001      	b.n	8008156 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008152:	2300      	movs	r3, #0
 8008154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008156:	f001 fe41 	bl	8009ddc <vPortExitCritical>

	return xReturn;
 800815a:	68fb      	ldr	r3, [r7, #12]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	e014      	b.n	800819e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008174:	4a0f      	ldr	r2, [pc, #60]	@ (80081b4 <vQueueAddToRegistry+0x50>)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10b      	bne.n	8008198 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008180:	490c      	ldr	r1, [pc, #48]	@ (80081b4 <vQueueAddToRegistry+0x50>)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800818a:	4a0a      	ldr	r2, [pc, #40]	@ (80081b4 <vQueueAddToRegistry+0x50>)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	4413      	add	r3, r2
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008196:	e006      	b.n	80081a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3301      	adds	r3, #1
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b07      	cmp	r3, #7
 80081a2:	d9e7      	bls.n	8008174 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	20001378 	.word	0x20001378

080081b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	e016      	b.n	80081f4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80081c6:	4a10      	ldr	r2, [pc, #64]	@ (8008208 <vQueueUnregisterQueue+0x50>)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	4413      	add	r3, r2
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d10b      	bne.n	80081ee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80081d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008208 <vQueueUnregisterQueue+0x50>)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2100      	movs	r1, #0
 80081dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80081e0:	4a09      	ldr	r2, [pc, #36]	@ (8008208 <vQueueUnregisterQueue+0x50>)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	4413      	add	r3, r2
 80081e8:	2200      	movs	r2, #0
 80081ea:	605a      	str	r2, [r3, #4]
				break;
 80081ec:	e006      	b.n	80081fc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3301      	adds	r3, #1
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b07      	cmp	r3, #7
 80081f8:	d9e5      	bls.n	80081c6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80081fa:	bf00      	nop
 80081fc:	bf00      	nop
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	20001378 	.word	0x20001378

0800820c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800821c:	f001 fdac 	bl	8009d78 <vPortEnterCritical>
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008226:	b25b      	sxtb	r3, r3
 8008228:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800822c:	d103      	bne.n	8008236 <vQueueWaitForMessageRestricted+0x2a>
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800823c:	b25b      	sxtb	r3, r3
 800823e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008242:	d103      	bne.n	800824c <vQueueWaitForMessageRestricted+0x40>
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800824c:	f001 fdc6 	bl	8009ddc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008254:	2b00      	cmp	r3, #0
 8008256:	d106      	bne.n	8008266 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	3324      	adds	r3, #36	@ 0x24
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	68b9      	ldr	r1, [r7, #8]
 8008260:	4618      	mov	r0, r3
 8008262:	f000 fc6d 	bl	8008b40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008266:	6978      	ldr	r0, [r7, #20]
 8008268:	f7ff fefc 	bl	8008064 <prvUnlockQueue>
	}
 800826c:	bf00      	nop
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08e      	sub	sp, #56	@ 0x38
 8008278:	af04      	add	r7, sp, #16
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
 8008280:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10b      	bne.n	80082a0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	623b      	str	r3, [r7, #32]
}
 800829a:	bf00      	nop
 800829c:	bf00      	nop
 800829e:	e7fd      	b.n	800829c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80082a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10b      	bne.n	80082be <xTaskCreateStatic+0x4a>
	__asm volatile
 80082a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	61fb      	str	r3, [r7, #28]
}
 80082b8:	bf00      	nop
 80082ba:	bf00      	nop
 80082bc:	e7fd      	b.n	80082ba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082be:	23a8      	movs	r3, #168	@ 0xa8
 80082c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	2ba8      	cmp	r3, #168	@ 0xa8
 80082c6:	d00b      	beq.n	80082e0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	61bb      	str	r3, [r7, #24]
}
 80082da:	bf00      	nop
 80082dc:	bf00      	nop
 80082de:	e7fd      	b.n	80082dc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80082e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01e      	beq.n	8008326 <xTaskCreateStatic+0xb2>
 80082e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d01b      	beq.n	8008326 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fa:	2202      	movs	r2, #2
 80082fc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008300:	2300      	movs	r3, #0
 8008302:	9303      	str	r3, [sp, #12]
 8008304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008306:	9302      	str	r3, [sp, #8]
 8008308:	f107 0314 	add.w	r3, r7, #20
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	68b9      	ldr	r1, [r7, #8]
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 f851 	bl	80083c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800831e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008320:	f000 f8f6 	bl	8008510 <prvAddNewTaskToReadyList>
 8008324:	e001      	b.n	800832a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008326:	2300      	movs	r3, #0
 8008328:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800832a:	697b      	ldr	r3, [r7, #20]
	}
 800832c:	4618      	mov	r0, r3
 800832e:	3728      	adds	r7, #40	@ 0x28
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008334:	b580      	push	{r7, lr}
 8008336:	b08c      	sub	sp, #48	@ 0x30
 8008338:	af04      	add	r7, sp, #16
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	603b      	str	r3, [r7, #0]
 8008340:	4613      	mov	r3, r2
 8008342:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008344:	88fb      	ldrh	r3, [r7, #6]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4618      	mov	r0, r3
 800834a:	f001 fe37 	bl	8009fbc <pvPortMalloc>
 800834e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00e      	beq.n	8008374 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008356:	20a8      	movs	r0, #168	@ 0xa8
 8008358:	f001 fe30 	bl	8009fbc <pvPortMalloc>
 800835c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	631a      	str	r2, [r3, #48]	@ 0x30
 800836a:	e005      	b.n	8008378 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800836c:	6978      	ldr	r0, [r7, #20]
 800836e:	f001 fef3 	bl	800a158 <vPortFree>
 8008372:	e001      	b.n	8008378 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008374:	2300      	movs	r3, #0
 8008376:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d017      	beq.n	80083ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008386:	88fa      	ldrh	r2, [r7, #6]
 8008388:	2300      	movs	r3, #0
 800838a:	9303      	str	r3, [sp, #12]
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	9302      	str	r3, [sp, #8]
 8008390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008392:	9301      	str	r3, [sp, #4]
 8008394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	68b9      	ldr	r1, [r7, #8]
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 f80f 	bl	80083c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083a2:	69f8      	ldr	r0, [r7, #28]
 80083a4:	f000 f8b4 	bl	8008510 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083a8:	2301      	movs	r3, #1
 80083aa:	61bb      	str	r3, [r7, #24]
 80083ac:	e002      	b.n	80083b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083b4:	69bb      	ldr	r3, [r7, #24]
	}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3720      	adds	r7, #32
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	461a      	mov	r2, r3
 80083d8:	21a5      	movs	r1, #165	@ 0xa5
 80083da:	f006 fecf 	bl	800f17c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80083e8:	3b01      	subs	r3, #1
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	f023 0307 	bic.w	r3, r3, #7
 80083f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	f003 0307 	and.w	r3, r3, #7
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00b      	beq.n	800841a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	617b      	str	r3, [r7, #20]
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	e7fd      	b.n	8008416 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d01f      	beq.n	8008460 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008420:	2300      	movs	r3, #0
 8008422:	61fb      	str	r3, [r7, #28]
 8008424:	e012      	b.n	800844c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	4413      	add	r3, r2
 800842c:	7819      	ldrb	r1, [r3, #0]
 800842e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	4413      	add	r3, r2
 8008434:	3334      	adds	r3, #52	@ 0x34
 8008436:	460a      	mov	r2, r1
 8008438:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	4413      	add	r3, r2
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d006      	beq.n	8008454 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	3301      	adds	r3, #1
 800844a:	61fb      	str	r3, [r7, #28]
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	2b0f      	cmp	r3, #15
 8008450:	d9e9      	bls.n	8008426 <prvInitialiseNewTask+0x66>
 8008452:	e000      	b.n	8008456 <prvInitialiseNewTask+0x96>
			{
				break;
 8008454:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800845e:	e003      	b.n	8008468 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846a:	2b37      	cmp	r3, #55	@ 0x37
 800846c:	d901      	bls.n	8008472 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800846e:	2337      	movs	r3, #55	@ 0x37
 8008470:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008476:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800847c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800847e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008480:	2200      	movs	r2, #0
 8008482:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008486:	3304      	adds	r3, #4
 8008488:	4618      	mov	r0, r3
 800848a:	f7fe fe33 	bl	80070f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800848e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008490:	3318      	adds	r3, #24
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe fe2e 	bl	80070f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800849c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800849e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80084a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b0:	2200      	movs	r2, #0
 80084b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	3354      	adds	r3, #84	@ 0x54
 80084c2:	224c      	movs	r2, #76	@ 0x4c
 80084c4:	2100      	movs	r1, #0
 80084c6:	4618      	mov	r0, r3
 80084c8:	f006 fe58 	bl	800f17c <memset>
 80084cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ce:	4a0d      	ldr	r2, [pc, #52]	@ (8008504 <prvInitialiseNewTask+0x144>)
 80084d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80084d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d4:	4a0c      	ldr	r2, [pc, #48]	@ (8008508 <prvInitialiseNewTask+0x148>)
 80084d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80084d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084da:	4a0c      	ldr	r2, [pc, #48]	@ (800850c <prvInitialiseNewTask+0x14c>)
 80084dc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	68f9      	ldr	r1, [r7, #12]
 80084e2:	69b8      	ldr	r0, [r7, #24]
 80084e4:	f001 fb1a 	bl	8009b1c <pxPortInitialiseStack>
 80084e8:	4602      	mov	r2, r0
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084fa:	bf00      	nop
 80084fc:	3720      	adds	r7, #32
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	2000561c 	.word	0x2000561c
 8008508:	20005684 	.word	0x20005684
 800850c:	200056ec 	.word	0x200056ec

08008510 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008518:	f001 fc2e 	bl	8009d78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800851c:	4b2d      	ldr	r3, [pc, #180]	@ (80085d4 <prvAddNewTaskToReadyList+0xc4>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	3301      	adds	r3, #1
 8008522:	4a2c      	ldr	r2, [pc, #176]	@ (80085d4 <prvAddNewTaskToReadyList+0xc4>)
 8008524:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008526:	4b2c      	ldr	r3, [pc, #176]	@ (80085d8 <prvAddNewTaskToReadyList+0xc8>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d109      	bne.n	8008542 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800852e:	4a2a      	ldr	r2, [pc, #168]	@ (80085d8 <prvAddNewTaskToReadyList+0xc8>)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008534:	4b27      	ldr	r3, [pc, #156]	@ (80085d4 <prvAddNewTaskToReadyList+0xc4>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b01      	cmp	r3, #1
 800853a:	d110      	bne.n	800855e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800853c:	f000 fc2e 	bl	8008d9c <prvInitialiseTaskLists>
 8008540:	e00d      	b.n	800855e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008542:	4b26      	ldr	r3, [pc, #152]	@ (80085dc <prvAddNewTaskToReadyList+0xcc>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d109      	bne.n	800855e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800854a:	4b23      	ldr	r3, [pc, #140]	@ (80085d8 <prvAddNewTaskToReadyList+0xc8>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008554:	429a      	cmp	r2, r3
 8008556:	d802      	bhi.n	800855e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008558:	4a1f      	ldr	r2, [pc, #124]	@ (80085d8 <prvAddNewTaskToReadyList+0xc8>)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800855e:	4b20      	ldr	r3, [pc, #128]	@ (80085e0 <prvAddNewTaskToReadyList+0xd0>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3301      	adds	r3, #1
 8008564:	4a1e      	ldr	r2, [pc, #120]	@ (80085e0 <prvAddNewTaskToReadyList+0xd0>)
 8008566:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008568:	4b1d      	ldr	r3, [pc, #116]	@ (80085e0 <prvAddNewTaskToReadyList+0xd0>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008574:	4b1b      	ldr	r3, [pc, #108]	@ (80085e4 <prvAddNewTaskToReadyList+0xd4>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	429a      	cmp	r2, r3
 800857a:	d903      	bls.n	8008584 <prvAddNewTaskToReadyList+0x74>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008580:	4a18      	ldr	r2, [pc, #96]	@ (80085e4 <prvAddNewTaskToReadyList+0xd4>)
 8008582:	6013      	str	r3, [r2, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4a15      	ldr	r2, [pc, #84]	@ (80085e8 <prvAddNewTaskToReadyList+0xd8>)
 8008592:	441a      	add	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	3304      	adds	r3, #4
 8008598:	4619      	mov	r1, r3
 800859a:	4610      	mov	r0, r2
 800859c:	f7fe fdb7 	bl	800710e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085a0:	f001 fc1c 	bl	8009ddc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085a4:	4b0d      	ldr	r3, [pc, #52]	@ (80085dc <prvAddNewTaskToReadyList+0xcc>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00e      	beq.n	80085ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085ac:	4b0a      	ldr	r3, [pc, #40]	@ (80085d8 <prvAddNewTaskToReadyList+0xc8>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d207      	bcs.n	80085ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085ba:	4b0c      	ldr	r3, [pc, #48]	@ (80085ec <prvAddNewTaskToReadyList+0xdc>)
 80085bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085ca:	bf00      	nop
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	2000188c 	.word	0x2000188c
 80085d8:	200013b8 	.word	0x200013b8
 80085dc:	20001898 	.word	0x20001898
 80085e0:	200018a8 	.word	0x200018a8
 80085e4:	20001894 	.word	0x20001894
 80085e8:	200013bc 	.word	0x200013bc
 80085ec:	e000ed04 	.word	0xe000ed04

080085f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d018      	beq.n	8008634 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008602:	4b14      	ldr	r3, [pc, #80]	@ (8008654 <vTaskDelay+0x64>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00b      	beq.n	8008622 <vTaskDelay+0x32>
	__asm volatile
 800860a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	60bb      	str	r3, [r7, #8]
}
 800861c:	bf00      	nop
 800861e:	bf00      	nop
 8008620:	e7fd      	b.n	800861e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008622:	f000 f88b 	bl	800873c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008626:	2100      	movs	r1, #0
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fe09 	bl	8009240 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800862e:	f000 f893 	bl	8008758 <xTaskResumeAll>
 8008632:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d107      	bne.n	800864a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800863a:	4b07      	ldr	r3, [pc, #28]	@ (8008658 <vTaskDelay+0x68>)
 800863c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800864a:	bf00      	nop
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	200018b4 	.word	0x200018b4
 8008658:	e000ed04 	.word	0xe000ed04

0800865c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08a      	sub	sp, #40	@ 0x28
 8008660:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008662:	2300      	movs	r3, #0
 8008664:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008666:	2300      	movs	r3, #0
 8008668:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800866a:	463a      	mov	r2, r7
 800866c:	1d39      	adds	r1, r7, #4
 800866e:	f107 0308 	add.w	r3, r7, #8
 8008672:	4618      	mov	r0, r3
 8008674:	f7fe fcea 	bl	800704c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	9202      	str	r2, [sp, #8]
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	2300      	movs	r3, #0
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	2300      	movs	r3, #0
 8008688:	460a      	mov	r2, r1
 800868a:	4924      	ldr	r1, [pc, #144]	@ (800871c <vTaskStartScheduler+0xc0>)
 800868c:	4824      	ldr	r0, [pc, #144]	@ (8008720 <vTaskStartScheduler+0xc4>)
 800868e:	f7ff fdf1 	bl	8008274 <xTaskCreateStatic>
 8008692:	4603      	mov	r3, r0
 8008694:	4a23      	ldr	r2, [pc, #140]	@ (8008724 <vTaskStartScheduler+0xc8>)
 8008696:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008698:	4b22      	ldr	r3, [pc, #136]	@ (8008724 <vTaskStartScheduler+0xc8>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086a0:	2301      	movs	r3, #1
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	e001      	b.n	80086aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d102      	bne.n	80086b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80086b0:	f000 fe1a 	bl	80092e8 <xTimerCreateTimerTask>
 80086b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d11b      	bne.n	80086f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	613b      	str	r3, [r7, #16]
}
 80086ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086d0:	4b15      	ldr	r3, [pc, #84]	@ (8008728 <vTaskStartScheduler+0xcc>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3354      	adds	r3, #84	@ 0x54
 80086d6:	4a15      	ldr	r2, [pc, #84]	@ (800872c <vTaskStartScheduler+0xd0>)
 80086d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086da:	4b15      	ldr	r3, [pc, #84]	@ (8008730 <vTaskStartScheduler+0xd4>)
 80086dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086e2:	4b14      	ldr	r3, [pc, #80]	@ (8008734 <vTaskStartScheduler+0xd8>)
 80086e4:	2201      	movs	r2, #1
 80086e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086e8:	4b13      	ldr	r3, [pc, #76]	@ (8008738 <vTaskStartScheduler+0xdc>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086ee:	f001 fa9f 	bl	8009c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086f2:	e00f      	b.n	8008714 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086fa:	d10b      	bne.n	8008714 <vTaskStartScheduler+0xb8>
	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	60fb      	str	r3, [r7, #12]
}
 800870e:	bf00      	nop
 8008710:	bf00      	nop
 8008712:	e7fd      	b.n	8008710 <vTaskStartScheduler+0xb4>
}
 8008714:	bf00      	nop
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	08013638 	.word	0x08013638
 8008720:	08008d6d 	.word	0x08008d6d
 8008724:	200018b0 	.word	0x200018b0
 8008728:	200013b8 	.word	0x200013b8
 800872c:	20000264 	.word	0x20000264
 8008730:	200018ac 	.word	0x200018ac
 8008734:	20001898 	.word	0x20001898
 8008738:	20001890 	.word	0x20001890

0800873c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008740:	4b04      	ldr	r3, [pc, #16]	@ (8008754 <vTaskSuspendAll+0x18>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3301      	adds	r3, #1
 8008746:	4a03      	ldr	r2, [pc, #12]	@ (8008754 <vTaskSuspendAll+0x18>)
 8008748:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800874a:	bf00      	nop
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	200018b4 	.word	0x200018b4

08008758 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800875e:	2300      	movs	r3, #0
 8008760:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008762:	2300      	movs	r3, #0
 8008764:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008766:	4b42      	ldr	r3, [pc, #264]	@ (8008870 <xTaskResumeAll+0x118>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10b      	bne.n	8008786 <xTaskResumeAll+0x2e>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	603b      	str	r3, [r7, #0]
}
 8008780:	bf00      	nop
 8008782:	bf00      	nop
 8008784:	e7fd      	b.n	8008782 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008786:	f001 faf7 	bl	8009d78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800878a:	4b39      	ldr	r3, [pc, #228]	@ (8008870 <xTaskResumeAll+0x118>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3b01      	subs	r3, #1
 8008790:	4a37      	ldr	r2, [pc, #220]	@ (8008870 <xTaskResumeAll+0x118>)
 8008792:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008794:	4b36      	ldr	r3, [pc, #216]	@ (8008870 <xTaskResumeAll+0x118>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d162      	bne.n	8008862 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800879c:	4b35      	ldr	r3, [pc, #212]	@ (8008874 <xTaskResumeAll+0x11c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d05e      	beq.n	8008862 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087a4:	e02f      	b.n	8008806 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087a6:	4b34      	ldr	r3, [pc, #208]	@ (8008878 <xTaskResumeAll+0x120>)
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3318      	adds	r3, #24
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fe fd08 	bl	80071c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3304      	adds	r3, #4
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fe fd03 	bl	80071c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c6:	4b2d      	ldr	r3, [pc, #180]	@ (800887c <xTaskResumeAll+0x124>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d903      	bls.n	80087d6 <xTaskResumeAll+0x7e>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d2:	4a2a      	ldr	r2, [pc, #168]	@ (800887c <xTaskResumeAll+0x124>)
 80087d4:	6013      	str	r3, [r2, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4a27      	ldr	r2, [pc, #156]	@ (8008880 <xTaskResumeAll+0x128>)
 80087e4:	441a      	add	r2, r3
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3304      	adds	r3, #4
 80087ea:	4619      	mov	r1, r3
 80087ec:	4610      	mov	r0, r2
 80087ee:	f7fe fc8e 	bl	800710e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f6:	4b23      	ldr	r3, [pc, #140]	@ (8008884 <xTaskResumeAll+0x12c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d302      	bcc.n	8008806 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008800:	4b21      	ldr	r3, [pc, #132]	@ (8008888 <xTaskResumeAll+0x130>)
 8008802:	2201      	movs	r2, #1
 8008804:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008806:	4b1c      	ldr	r3, [pc, #112]	@ (8008878 <xTaskResumeAll+0x120>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1cb      	bne.n	80087a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008814:	f000 fb66 	bl	8008ee4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008818:	4b1c      	ldr	r3, [pc, #112]	@ (800888c <xTaskResumeAll+0x134>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d010      	beq.n	8008846 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008824:	f000 f846 	bl	80088b4 <xTaskIncrementTick>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800882e:	4b16      	ldr	r3, [pc, #88]	@ (8008888 <xTaskResumeAll+0x130>)
 8008830:	2201      	movs	r2, #1
 8008832:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3b01      	subs	r3, #1
 8008838:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1f1      	bne.n	8008824 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008840:	4b12      	ldr	r3, [pc, #72]	@ (800888c <xTaskResumeAll+0x134>)
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008846:	4b10      	ldr	r3, [pc, #64]	@ (8008888 <xTaskResumeAll+0x130>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d009      	beq.n	8008862 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800884e:	2301      	movs	r3, #1
 8008850:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008852:	4b0f      	ldr	r3, [pc, #60]	@ (8008890 <xTaskResumeAll+0x138>)
 8008854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008862:	f001 fabb 	bl	8009ddc <vPortExitCritical>

	return xAlreadyYielded;
 8008866:	68bb      	ldr	r3, [r7, #8]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	200018b4 	.word	0x200018b4
 8008874:	2000188c 	.word	0x2000188c
 8008878:	2000184c 	.word	0x2000184c
 800887c:	20001894 	.word	0x20001894
 8008880:	200013bc 	.word	0x200013bc
 8008884:	200013b8 	.word	0x200013b8
 8008888:	200018a0 	.word	0x200018a0
 800888c:	2000189c 	.word	0x2000189c
 8008890:	e000ed04 	.word	0xe000ed04

08008894 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800889a:	4b05      	ldr	r3, [pc, #20]	@ (80088b0 <xTaskGetTickCount+0x1c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088a0:	687b      	ldr	r3, [r7, #4]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	20001890 	.word	0x20001890

080088b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088ba:	2300      	movs	r3, #0
 80088bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088be:	4b4f      	ldr	r3, [pc, #316]	@ (80089fc <xTaskIncrementTick+0x148>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f040 8090 	bne.w	80089e8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088c8:	4b4d      	ldr	r3, [pc, #308]	@ (8008a00 <xTaskIncrementTick+0x14c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	3301      	adds	r3, #1
 80088ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088d0:	4a4b      	ldr	r2, [pc, #300]	@ (8008a00 <xTaskIncrementTick+0x14c>)
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d121      	bne.n	8008920 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80088dc:	4b49      	ldr	r3, [pc, #292]	@ (8008a04 <xTaskIncrementTick+0x150>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00b      	beq.n	80088fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	603b      	str	r3, [r7, #0]
}
 80088f8:	bf00      	nop
 80088fa:	bf00      	nop
 80088fc:	e7fd      	b.n	80088fa <xTaskIncrementTick+0x46>
 80088fe:	4b41      	ldr	r3, [pc, #260]	@ (8008a04 <xTaskIncrementTick+0x150>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	4b40      	ldr	r3, [pc, #256]	@ (8008a08 <xTaskIncrementTick+0x154>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a3e      	ldr	r2, [pc, #248]	@ (8008a04 <xTaskIncrementTick+0x150>)
 800890a:	6013      	str	r3, [r2, #0]
 800890c:	4a3e      	ldr	r2, [pc, #248]	@ (8008a08 <xTaskIncrementTick+0x154>)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	4b3e      	ldr	r3, [pc, #248]	@ (8008a0c <xTaskIncrementTick+0x158>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3301      	adds	r3, #1
 8008918:	4a3c      	ldr	r2, [pc, #240]	@ (8008a0c <xTaskIncrementTick+0x158>)
 800891a:	6013      	str	r3, [r2, #0]
 800891c:	f000 fae2 	bl	8008ee4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008920:	4b3b      	ldr	r3, [pc, #236]	@ (8008a10 <xTaskIncrementTick+0x15c>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	429a      	cmp	r2, r3
 8008928:	d349      	bcc.n	80089be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800892a:	4b36      	ldr	r3, [pc, #216]	@ (8008a04 <xTaskIncrementTick+0x150>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d104      	bne.n	800893e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008934:	4b36      	ldr	r3, [pc, #216]	@ (8008a10 <xTaskIncrementTick+0x15c>)
 8008936:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800893a:	601a      	str	r2, [r3, #0]
					break;
 800893c:	e03f      	b.n	80089be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800893e:	4b31      	ldr	r3, [pc, #196]	@ (8008a04 <xTaskIncrementTick+0x150>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	429a      	cmp	r2, r3
 8008954:	d203      	bcs.n	800895e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008956:	4a2e      	ldr	r2, [pc, #184]	@ (8008a10 <xTaskIncrementTick+0x15c>)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800895c:	e02f      	b.n	80089be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	3304      	adds	r3, #4
 8008962:	4618      	mov	r0, r3
 8008964:	f7fe fc30 	bl	80071c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896c:	2b00      	cmp	r3, #0
 800896e:	d004      	beq.n	800897a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	3318      	adds	r3, #24
 8008974:	4618      	mov	r0, r3
 8008976:	f7fe fc27 	bl	80071c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800897e:	4b25      	ldr	r3, [pc, #148]	@ (8008a14 <xTaskIncrementTick+0x160>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	429a      	cmp	r2, r3
 8008984:	d903      	bls.n	800898e <xTaskIncrementTick+0xda>
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898a:	4a22      	ldr	r2, [pc, #136]	@ (8008a14 <xTaskIncrementTick+0x160>)
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008992:	4613      	mov	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4a1f      	ldr	r2, [pc, #124]	@ (8008a18 <xTaskIncrementTick+0x164>)
 800899c:	441a      	add	r2, r3
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	3304      	adds	r3, #4
 80089a2:	4619      	mov	r1, r3
 80089a4:	4610      	mov	r0, r2
 80089a6:	f7fe fbb2 	bl	800710e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ae:	4b1b      	ldr	r3, [pc, #108]	@ (8008a1c <xTaskIncrementTick+0x168>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d3b8      	bcc.n	800892a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80089b8:	2301      	movs	r3, #1
 80089ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089bc:	e7b5      	b.n	800892a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089be:	4b17      	ldr	r3, [pc, #92]	@ (8008a1c <xTaskIncrementTick+0x168>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089c4:	4914      	ldr	r1, [pc, #80]	@ (8008a18 <xTaskIncrementTick+0x164>)
 80089c6:	4613      	mov	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	440b      	add	r3, r1
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d901      	bls.n	80089da <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80089d6:	2301      	movs	r3, #1
 80089d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80089da:	4b11      	ldr	r3, [pc, #68]	@ (8008a20 <xTaskIncrementTick+0x16c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d007      	beq.n	80089f2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80089e2:	2301      	movs	r3, #1
 80089e4:	617b      	str	r3, [r7, #20]
 80089e6:	e004      	b.n	80089f2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80089e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008a24 <xTaskIncrementTick+0x170>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3301      	adds	r3, #1
 80089ee:	4a0d      	ldr	r2, [pc, #52]	@ (8008a24 <xTaskIncrementTick+0x170>)
 80089f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80089f2:	697b      	ldr	r3, [r7, #20]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	200018b4 	.word	0x200018b4
 8008a00:	20001890 	.word	0x20001890
 8008a04:	20001844 	.word	0x20001844
 8008a08:	20001848 	.word	0x20001848
 8008a0c:	200018a4 	.word	0x200018a4
 8008a10:	200018ac 	.word	0x200018ac
 8008a14:	20001894 	.word	0x20001894
 8008a18:	200013bc 	.word	0x200013bc
 8008a1c:	200013b8 	.word	0x200013b8
 8008a20:	200018a0 	.word	0x200018a0
 8008a24:	2000189c 	.word	0x2000189c

08008a28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8008adc <vTaskSwitchContext+0xb4>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d003      	beq.n	8008a3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a36:	4b2a      	ldr	r3, [pc, #168]	@ (8008ae0 <vTaskSwitchContext+0xb8>)
 8008a38:	2201      	movs	r2, #1
 8008a3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a3c:	e047      	b.n	8008ace <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008a3e:	4b28      	ldr	r3, [pc, #160]	@ (8008ae0 <vTaskSwitchContext+0xb8>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a44:	4b27      	ldr	r3, [pc, #156]	@ (8008ae4 <vTaskSwitchContext+0xbc>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	60fb      	str	r3, [r7, #12]
 8008a4a:	e011      	b.n	8008a70 <vTaskSwitchContext+0x48>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10b      	bne.n	8008a6a <vTaskSwitchContext+0x42>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	607b      	str	r3, [r7, #4]
}
 8008a64:	bf00      	nop
 8008a66:	bf00      	nop
 8008a68:	e7fd      	b.n	8008a66 <vTaskSwitchContext+0x3e>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	491d      	ldr	r1, [pc, #116]	@ (8008ae8 <vTaskSwitchContext+0xc0>)
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	4613      	mov	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	440b      	add	r3, r1
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d0e3      	beq.n	8008a4c <vTaskSwitchContext+0x24>
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4613      	mov	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4a16      	ldr	r2, [pc, #88]	@ (8008ae8 <vTaskSwitchContext+0xc0>)
 8008a90:	4413      	add	r3, r2
 8008a92:	60bb      	str	r3, [r7, #8]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	605a      	str	r2, [r3, #4]
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	3308      	adds	r3, #8
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d104      	bne.n	8008ab4 <vTaskSwitchContext+0x8c>
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	685a      	ldr	r2, [r3, #4]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	605a      	str	r2, [r3, #4]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	4a0c      	ldr	r2, [pc, #48]	@ (8008aec <vTaskSwitchContext+0xc4>)
 8008abc:	6013      	str	r3, [r2, #0]
 8008abe:	4a09      	ldr	r2, [pc, #36]	@ (8008ae4 <vTaskSwitchContext+0xbc>)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ac4:	4b09      	ldr	r3, [pc, #36]	@ (8008aec <vTaskSwitchContext+0xc4>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	3354      	adds	r3, #84	@ 0x54
 8008aca:	4a09      	ldr	r2, [pc, #36]	@ (8008af0 <vTaskSwitchContext+0xc8>)
 8008acc:	6013      	str	r3, [r2, #0]
}
 8008ace:	bf00      	nop
 8008ad0:	3714      	adds	r7, #20
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	200018b4 	.word	0x200018b4
 8008ae0:	200018a0 	.word	0x200018a0
 8008ae4:	20001894 	.word	0x20001894
 8008ae8:	200013bc 	.word	0x200013bc
 8008aec:	200013b8 	.word	0x200013b8
 8008af0:	20000264 	.word	0x20000264

08008af4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d10b      	bne.n	8008b1c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	60fb      	str	r3, [r7, #12]
}
 8008b16:	bf00      	nop
 8008b18:	bf00      	nop
 8008b1a:	e7fd      	b.n	8008b18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b1c:	4b07      	ldr	r3, [pc, #28]	@ (8008b3c <vTaskPlaceOnEventList+0x48>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3318      	adds	r3, #24
 8008b22:	4619      	mov	r1, r3
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7fe fb16 	bl	8007156 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	6838      	ldr	r0, [r7, #0]
 8008b2e:	f000 fb87 	bl	8009240 <prvAddCurrentTaskToDelayedList>
}
 8008b32:	bf00      	nop
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	200013b8 	.word	0x200013b8

08008b40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10b      	bne.n	8008b6a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	617b      	str	r3, [r7, #20]
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop
 8008b68:	e7fd      	b.n	8008b66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8008b94 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	3318      	adds	r3, #24
 8008b70:	4619      	mov	r1, r3
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f7fe facb 	bl	800710e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008b7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b82:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b84:	6879      	ldr	r1, [r7, #4]
 8008b86:	68b8      	ldr	r0, [r7, #8]
 8008b88:	f000 fb5a 	bl	8009240 <prvAddCurrentTaskToDelayedList>
	}
 8008b8c:	bf00      	nop
 8008b8e:	3718      	adds	r7, #24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	200013b8 	.word	0x200013b8

08008b98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10b      	bne.n	8008bc6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	60fb      	str	r3, [r7, #12]
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	e7fd      	b.n	8008bc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	3318      	adds	r3, #24
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fe fafc 	bl	80071c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8008c48 <xTaskRemoveFromEventList+0xb0>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d11d      	bne.n	8008c14 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	3304      	adds	r3, #4
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fe faf3 	bl	80071c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008be6:	4b19      	ldr	r3, [pc, #100]	@ (8008c4c <xTaskRemoveFromEventList+0xb4>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d903      	bls.n	8008bf6 <xTaskRemoveFromEventList+0x5e>
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf2:	4a16      	ldr	r2, [pc, #88]	@ (8008c4c <xTaskRemoveFromEventList+0xb4>)
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4a13      	ldr	r2, [pc, #76]	@ (8008c50 <xTaskRemoveFromEventList+0xb8>)
 8008c04:	441a      	add	r2, r3
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	3304      	adds	r3, #4
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	f7fe fa7e 	bl	800710e <vListInsertEnd>
 8008c12:	e005      	b.n	8008c20 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	3318      	adds	r3, #24
 8008c18:	4619      	mov	r1, r3
 8008c1a:	480e      	ldr	r0, [pc, #56]	@ (8008c54 <xTaskRemoveFromEventList+0xbc>)
 8008c1c:	f7fe fa77 	bl	800710e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c24:	4b0c      	ldr	r3, [pc, #48]	@ (8008c58 <xTaskRemoveFromEventList+0xc0>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d905      	bls.n	8008c3a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c32:	4b0a      	ldr	r3, [pc, #40]	@ (8008c5c <xTaskRemoveFromEventList+0xc4>)
 8008c34:	2201      	movs	r2, #1
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	e001      	b.n	8008c3e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c3e:	697b      	ldr	r3, [r7, #20]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3718      	adds	r7, #24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	200018b4 	.word	0x200018b4
 8008c4c:	20001894 	.word	0x20001894
 8008c50:	200013bc 	.word	0x200013bc
 8008c54:	2000184c 	.word	0x2000184c
 8008c58:	200013b8 	.word	0x200013b8
 8008c5c:	200018a0 	.word	0x200018a0

08008c60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c68:	4b06      	ldr	r3, [pc, #24]	@ (8008c84 <vTaskInternalSetTimeOutState+0x24>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c70:	4b05      	ldr	r3, [pc, #20]	@ (8008c88 <vTaskInternalSetTimeOutState+0x28>)
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	605a      	str	r2, [r3, #4]
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	200018a4 	.word	0x200018a4
 8008c88:	20001890 	.word	0x20001890

08008c8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b088      	sub	sp, #32
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10b      	bne.n	8008cb4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	613b      	str	r3, [r7, #16]
}
 8008cae:	bf00      	nop
 8008cb0:	bf00      	nop
 8008cb2:	e7fd      	b.n	8008cb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10b      	bne.n	8008cd2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	60fb      	str	r3, [r7, #12]
}
 8008ccc:	bf00      	nop
 8008cce:	bf00      	nop
 8008cd0:	e7fd      	b.n	8008cce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008cd2:	f001 f851 	bl	8009d78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8008d4c <xTaskCheckForTimeOut+0xc0>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	69ba      	ldr	r2, [r7, #24]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cee:	d102      	bne.n	8008cf6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	61fb      	str	r3, [r7, #28]
 8008cf4:	e023      	b.n	8008d3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	4b15      	ldr	r3, [pc, #84]	@ (8008d50 <xTaskCheckForTimeOut+0xc4>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d007      	beq.n	8008d12 <xTaskCheckForTimeOut+0x86>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d302      	bcc.n	8008d12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	61fb      	str	r3, [r7, #28]
 8008d10:	e015      	b.n	8008d3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d20b      	bcs.n	8008d34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	1ad2      	subs	r2, r2, r3
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7ff ff99 	bl	8008c60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	e004      	b.n	8008d3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2200      	movs	r2, #0
 8008d38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d3e:	f001 f84d 	bl	8009ddc <vPortExitCritical>

	return xReturn;
 8008d42:	69fb      	ldr	r3, [r7, #28]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3720      	adds	r7, #32
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	20001890 	.word	0x20001890
 8008d50:	200018a4 	.word	0x200018a4

08008d54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d58:	4b03      	ldr	r3, [pc, #12]	@ (8008d68 <vTaskMissedYield+0x14>)
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	601a      	str	r2, [r3, #0]
}
 8008d5e:	bf00      	nop
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	200018a0 	.word	0x200018a0

08008d6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d74:	f000 f852 	bl	8008e1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d78:	4b06      	ldr	r3, [pc, #24]	@ (8008d94 <prvIdleTask+0x28>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d9f9      	bls.n	8008d74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d80:	4b05      	ldr	r3, [pc, #20]	@ (8008d98 <prvIdleTask+0x2c>)
 8008d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d90:	e7f0      	b.n	8008d74 <prvIdleTask+0x8>
 8008d92:	bf00      	nop
 8008d94:	200013bc 	.word	0x200013bc
 8008d98:	e000ed04 	.word	0xe000ed04

08008d9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008da2:	2300      	movs	r3, #0
 8008da4:	607b      	str	r3, [r7, #4]
 8008da6:	e00c      	b.n	8008dc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	4613      	mov	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4a12      	ldr	r2, [pc, #72]	@ (8008dfc <prvInitialiseTaskLists+0x60>)
 8008db4:	4413      	add	r3, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe f97c 	bl	80070b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	607b      	str	r3, [r7, #4]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b37      	cmp	r3, #55	@ 0x37
 8008dc6:	d9ef      	bls.n	8008da8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008dc8:	480d      	ldr	r0, [pc, #52]	@ (8008e00 <prvInitialiseTaskLists+0x64>)
 8008dca:	f7fe f973 	bl	80070b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008dce:	480d      	ldr	r0, [pc, #52]	@ (8008e04 <prvInitialiseTaskLists+0x68>)
 8008dd0:	f7fe f970 	bl	80070b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008dd4:	480c      	ldr	r0, [pc, #48]	@ (8008e08 <prvInitialiseTaskLists+0x6c>)
 8008dd6:	f7fe f96d 	bl	80070b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008dda:	480c      	ldr	r0, [pc, #48]	@ (8008e0c <prvInitialiseTaskLists+0x70>)
 8008ddc:	f7fe f96a 	bl	80070b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008de0:	480b      	ldr	r0, [pc, #44]	@ (8008e10 <prvInitialiseTaskLists+0x74>)
 8008de2:	f7fe f967 	bl	80070b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008de6:	4b0b      	ldr	r3, [pc, #44]	@ (8008e14 <prvInitialiseTaskLists+0x78>)
 8008de8:	4a05      	ldr	r2, [pc, #20]	@ (8008e00 <prvInitialiseTaskLists+0x64>)
 8008dea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008dec:	4b0a      	ldr	r3, [pc, #40]	@ (8008e18 <prvInitialiseTaskLists+0x7c>)
 8008dee:	4a05      	ldr	r2, [pc, #20]	@ (8008e04 <prvInitialiseTaskLists+0x68>)
 8008df0:	601a      	str	r2, [r3, #0]
}
 8008df2:	bf00      	nop
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	200013bc 	.word	0x200013bc
 8008e00:	2000181c 	.word	0x2000181c
 8008e04:	20001830 	.word	0x20001830
 8008e08:	2000184c 	.word	0x2000184c
 8008e0c:	20001860 	.word	0x20001860
 8008e10:	20001878 	.word	0x20001878
 8008e14:	20001844 	.word	0x20001844
 8008e18:	20001848 	.word	0x20001848

08008e1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e22:	e019      	b.n	8008e58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e24:	f000 ffa8 	bl	8009d78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e28:	4b10      	ldr	r3, [pc, #64]	@ (8008e6c <prvCheckTasksWaitingTermination+0x50>)
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3304      	adds	r3, #4
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fe f9c7 	bl	80071c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e70 <prvCheckTasksWaitingTermination+0x54>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	4a0b      	ldr	r2, [pc, #44]	@ (8008e70 <prvCheckTasksWaitingTermination+0x54>)
 8008e42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e44:	4b0b      	ldr	r3, [pc, #44]	@ (8008e74 <prvCheckTasksWaitingTermination+0x58>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8008e74 <prvCheckTasksWaitingTermination+0x58>)
 8008e4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e4e:	f000 ffc5 	bl	8009ddc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f810 	bl	8008e78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e58:	4b06      	ldr	r3, [pc, #24]	@ (8008e74 <prvCheckTasksWaitingTermination+0x58>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1e1      	bne.n	8008e24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e60:	bf00      	nop
 8008e62:	bf00      	nop
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20001860 	.word	0x20001860
 8008e70:	2000188c 	.word	0x2000188c
 8008e74:	20001874 	.word	0x20001874

08008e78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3354      	adds	r3, #84	@ 0x54
 8008e84:	4618      	mov	r0, r3
 8008e86:	f006 f9a7 	bl	800f1d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d108      	bne.n	8008ea6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f001 f95d 	bl	800a158 <vPortFree>
				vPortFree( pxTCB );
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f001 f95a 	bl	800a158 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ea4:	e019      	b.n	8008eda <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d103      	bne.n	8008eb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f001 f951 	bl	800a158 <vPortFree>
	}
 8008eb6:	e010      	b.n	8008eda <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d00b      	beq.n	8008eda <prvDeleteTCB+0x62>
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	60fb      	str	r3, [r7, #12]
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop
 8008ed8:	e7fd      	b.n	8008ed6 <prvDeleteTCB+0x5e>
	}
 8008eda:	bf00      	nop
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eea:	4b0c      	ldr	r3, [pc, #48]	@ (8008f1c <prvResetNextTaskUnblockTime+0x38>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d104      	bne.n	8008efe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8008f20 <prvResetNextTaskUnblockTime+0x3c>)
 8008ef6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008efa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008efc:	e008      	b.n	8008f10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008efe:	4b07      	ldr	r3, [pc, #28]	@ (8008f1c <prvResetNextTaskUnblockTime+0x38>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	4a04      	ldr	r2, [pc, #16]	@ (8008f20 <prvResetNextTaskUnblockTime+0x3c>)
 8008f0e:	6013      	str	r3, [r2, #0]
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	20001844 	.word	0x20001844
 8008f20:	200018ac 	.word	0x200018ac

08008f24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f58 <xTaskGetSchedulerState+0x34>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d102      	bne.n	8008f38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f32:	2301      	movs	r3, #1
 8008f34:	607b      	str	r3, [r7, #4]
 8008f36:	e008      	b.n	8008f4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f38:	4b08      	ldr	r3, [pc, #32]	@ (8008f5c <xTaskGetSchedulerState+0x38>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d102      	bne.n	8008f46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f40:	2302      	movs	r3, #2
 8008f42:	607b      	str	r3, [r7, #4]
 8008f44:	e001      	b.n	8008f4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f46:	2300      	movs	r3, #0
 8008f48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f4a:	687b      	ldr	r3, [r7, #4]
	}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	20001898 	.word	0x20001898
 8008f5c:	200018b4 	.word	0x200018b4

08008f60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d051      	beq.n	800901a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8009024 <xTaskPriorityInherit+0xc4>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d241      	bcs.n	8009008 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	db06      	blt.n	8008f9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f8c:	4b25      	ldr	r3, [pc, #148]	@ (8009024 <xTaskPriorityInherit+0xc4>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f92:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	6959      	ldr	r1, [r3, #20]
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4a1f      	ldr	r2, [pc, #124]	@ (8009028 <xTaskPriorityInherit+0xc8>)
 8008fac:	4413      	add	r3, r2
 8008fae:	4299      	cmp	r1, r3
 8008fb0:	d122      	bne.n	8008ff8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fe f906 	bl	80071c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008fbc:	4b19      	ldr	r3, [pc, #100]	@ (8009024 <xTaskPriorityInherit+0xc4>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fca:	4b18      	ldr	r3, [pc, #96]	@ (800902c <xTaskPriorityInherit+0xcc>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d903      	bls.n	8008fda <xTaskPriorityInherit+0x7a>
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd6:	4a15      	ldr	r2, [pc, #84]	@ (800902c <xTaskPriorityInherit+0xcc>)
 8008fd8:	6013      	str	r3, [r2, #0]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fde:	4613      	mov	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4413      	add	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4a10      	ldr	r2, [pc, #64]	@ (8009028 <xTaskPriorityInherit+0xc8>)
 8008fe8:	441a      	add	r2, r3
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	3304      	adds	r3, #4
 8008fee:	4619      	mov	r1, r3
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	f7fe f88c 	bl	800710e <vListInsertEnd>
 8008ff6:	e004      	b.n	8009002 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8009024 <xTaskPriorityInherit+0xc4>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009002:	2301      	movs	r3, #1
 8009004:	60fb      	str	r3, [r7, #12]
 8009006:	e008      	b.n	800901a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800900c:	4b05      	ldr	r3, [pc, #20]	@ (8009024 <xTaskPriorityInherit+0xc4>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009012:	429a      	cmp	r2, r3
 8009014:	d201      	bcs.n	800901a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009016:	2301      	movs	r3, #1
 8009018:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800901a:	68fb      	ldr	r3, [r7, #12]
	}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	200013b8 	.word	0x200013b8
 8009028:	200013bc 	.word	0x200013bc
 800902c:	20001894 	.word	0x20001894

08009030 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800903c:	2300      	movs	r3, #0
 800903e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d058      	beq.n	80090f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009046:	4b2f      	ldr	r3, [pc, #188]	@ (8009104 <xTaskPriorityDisinherit+0xd4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	429a      	cmp	r2, r3
 800904e:	d00b      	beq.n	8009068 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	60fb      	str	r3, [r7, #12]
}
 8009062:	bf00      	nop
 8009064:	bf00      	nop
 8009066:	e7fd      	b.n	8009064 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10b      	bne.n	8009088 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	60bb      	str	r3, [r7, #8]
}
 8009082:	bf00      	nop
 8009084:	bf00      	nop
 8009086:	e7fd      	b.n	8009084 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800908c:	1e5a      	subs	r2, r3, #1
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800909a:	429a      	cmp	r2, r3
 800909c:	d02c      	beq.n	80090f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d128      	bne.n	80090f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	3304      	adds	r3, #4
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fe f88c 	bl	80071c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009108 <xTaskPriorityDisinherit+0xd8>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d903      	bls.n	80090d8 <xTaskPriorityDisinherit+0xa8>
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d4:	4a0c      	ldr	r2, [pc, #48]	@ (8009108 <xTaskPriorityDisinherit+0xd8>)
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090dc:	4613      	mov	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4a09      	ldr	r2, [pc, #36]	@ (800910c <xTaskPriorityDisinherit+0xdc>)
 80090e6:	441a      	add	r2, r3
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4619      	mov	r1, r3
 80090ee:	4610      	mov	r0, r2
 80090f0:	f7fe f80d 	bl	800710e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090f4:	2301      	movs	r3, #1
 80090f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090f8:	697b      	ldr	r3, [r7, #20]
	}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3718      	adds	r7, #24
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	200013b8 	.word	0x200013b8
 8009108:	20001894 	.word	0x20001894
 800910c:	200013bc 	.word	0x200013bc

08009110 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800911e:	2301      	movs	r3, #1
 8009120:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d06c      	beq.n	8009202 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10b      	bne.n	8009148 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	60fb      	str	r3, [r7, #12]
}
 8009142:	bf00      	nop
 8009144:	bf00      	nop
 8009146:	e7fd      	b.n	8009144 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	429a      	cmp	r2, r3
 8009150:	d902      	bls.n	8009158 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	61fb      	str	r3, [r7, #28]
 8009156:	e002      	b.n	800915e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800915c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009162:	69fa      	ldr	r2, [r7, #28]
 8009164:	429a      	cmp	r2, r3
 8009166:	d04c      	beq.n	8009202 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	429a      	cmp	r2, r3
 8009170:	d147      	bne.n	8009202 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009172:	4b26      	ldr	r3, [pc, #152]	@ (800920c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	69ba      	ldr	r2, [r7, #24]
 8009178:	429a      	cmp	r2, r3
 800917a:	d10b      	bne.n	8009194 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	60bb      	str	r3, [r7, #8]
}
 800918e:	bf00      	nop
 8009190:	bf00      	nop
 8009192:	e7fd      	b.n	8009190 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009198:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	69fa      	ldr	r2, [r7, #28]
 800919e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	db04      	blt.n	80091b2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	6959      	ldr	r1, [r3, #20]
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	4613      	mov	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4a13      	ldr	r2, [pc, #76]	@ (8009210 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80091c2:	4413      	add	r3, r2
 80091c4:	4299      	cmp	r1, r3
 80091c6:	d11c      	bne.n	8009202 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	3304      	adds	r3, #4
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fd fffb 	bl	80071c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009214 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d903      	bls.n	80091e6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009214 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80091e4:	6013      	str	r3, [r2, #0]
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ea:	4613      	mov	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4a07      	ldr	r2, [pc, #28]	@ (8009210 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80091f4:	441a      	add	r2, r3
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	3304      	adds	r3, #4
 80091fa:	4619      	mov	r1, r3
 80091fc:	4610      	mov	r0, r2
 80091fe:	f7fd ff86 	bl	800710e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009202:	bf00      	nop
 8009204:	3720      	adds	r7, #32
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	200013b8 	.word	0x200013b8
 8009210:	200013bc 	.word	0x200013bc
 8009214:	20001894 	.word	0x20001894

08009218 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009218:	b480      	push	{r7}
 800921a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800921c:	4b07      	ldr	r3, [pc, #28]	@ (800923c <pvTaskIncrementMutexHeldCount+0x24>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d004      	beq.n	800922e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009224:	4b05      	ldr	r3, [pc, #20]	@ (800923c <pvTaskIncrementMutexHeldCount+0x24>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800922a:	3201      	adds	r2, #1
 800922c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800922e:	4b03      	ldr	r3, [pc, #12]	@ (800923c <pvTaskIncrementMutexHeldCount+0x24>)
 8009230:	681b      	ldr	r3, [r3, #0]
	}
 8009232:	4618      	mov	r0, r3
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	200013b8 	.word	0x200013b8

08009240 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800924a:	4b21      	ldr	r3, [pc, #132]	@ (80092d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009250:	4b20      	ldr	r3, [pc, #128]	@ (80092d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	3304      	adds	r3, #4
 8009256:	4618      	mov	r0, r3
 8009258:	f7fd ffb6 	bl	80071c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009262:	d10a      	bne.n	800927a <prvAddCurrentTaskToDelayedList+0x3a>
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d007      	beq.n	800927a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800926a:	4b1a      	ldr	r3, [pc, #104]	@ (80092d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	3304      	adds	r3, #4
 8009270:	4619      	mov	r1, r3
 8009272:	4819      	ldr	r0, [pc, #100]	@ (80092d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009274:	f7fd ff4b 	bl	800710e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009278:	e026      	b.n	80092c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4413      	add	r3, r2
 8009280:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009282:	4b14      	ldr	r3, [pc, #80]	@ (80092d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	429a      	cmp	r2, r3
 8009290:	d209      	bcs.n	80092a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009292:	4b12      	ldr	r3, [pc, #72]	@ (80092dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	4b0f      	ldr	r3, [pc, #60]	@ (80092d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3304      	adds	r3, #4
 800929c:	4619      	mov	r1, r3
 800929e:	4610      	mov	r0, r2
 80092a0:	f7fd ff59 	bl	8007156 <vListInsert>
}
 80092a4:	e010      	b.n	80092c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092a6:	4b0e      	ldr	r3, [pc, #56]	@ (80092e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	4b0a      	ldr	r3, [pc, #40]	@ (80092d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3304      	adds	r3, #4
 80092b0:	4619      	mov	r1, r3
 80092b2:	4610      	mov	r0, r2
 80092b4:	f7fd ff4f 	bl	8007156 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80092b8:	4b0a      	ldr	r3, [pc, #40]	@ (80092e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d202      	bcs.n	80092c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80092c2:	4a08      	ldr	r2, [pc, #32]	@ (80092e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	6013      	str	r3, [r2, #0]
}
 80092c8:	bf00      	nop
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	20001890 	.word	0x20001890
 80092d4:	200013b8 	.word	0x200013b8
 80092d8:	20001878 	.word	0x20001878
 80092dc:	20001848 	.word	0x20001848
 80092e0:	20001844 	.word	0x20001844
 80092e4:	200018ac 	.word	0x200018ac

080092e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08a      	sub	sp, #40	@ 0x28
 80092ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80092ee:	2300      	movs	r3, #0
 80092f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092f2:	f000 fbb1 	bl	8009a58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80092f6:	4b1d      	ldr	r3, [pc, #116]	@ (800936c <xTimerCreateTimerTask+0x84>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d021      	beq.n	8009342 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092fe:	2300      	movs	r3, #0
 8009300:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009302:	2300      	movs	r3, #0
 8009304:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009306:	1d3a      	adds	r2, r7, #4
 8009308:	f107 0108 	add.w	r1, r7, #8
 800930c:	f107 030c 	add.w	r3, r7, #12
 8009310:	4618      	mov	r0, r3
 8009312:	f7fd feb5 	bl	8007080 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	9202      	str	r2, [sp, #8]
 800931e:	9301      	str	r3, [sp, #4]
 8009320:	2302      	movs	r3, #2
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	2300      	movs	r3, #0
 8009326:	460a      	mov	r2, r1
 8009328:	4911      	ldr	r1, [pc, #68]	@ (8009370 <xTimerCreateTimerTask+0x88>)
 800932a:	4812      	ldr	r0, [pc, #72]	@ (8009374 <xTimerCreateTimerTask+0x8c>)
 800932c:	f7fe ffa2 	bl	8008274 <xTaskCreateStatic>
 8009330:	4603      	mov	r3, r0
 8009332:	4a11      	ldr	r2, [pc, #68]	@ (8009378 <xTimerCreateTimerTask+0x90>)
 8009334:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009336:	4b10      	ldr	r3, [pc, #64]	@ (8009378 <xTimerCreateTimerTask+0x90>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800933e:	2301      	movs	r3, #1
 8009340:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10b      	bne.n	8009360 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	613b      	str	r3, [r7, #16]
}
 800935a:	bf00      	nop
 800935c:	bf00      	nop
 800935e:	e7fd      	b.n	800935c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009360:	697b      	ldr	r3, [r7, #20]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	200018e8 	.word	0x200018e8
 8009370:	08013640 	.word	0x08013640
 8009374:	080095f1 	.word	0x080095f1
 8009378:	200018ec 	.word	0x200018ec

0800937c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800937c:	b580      	push	{r7, lr}
 800937e:	b088      	sub	sp, #32
 8009380:	af02      	add	r7, sp, #8
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
 8009388:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800938a:	202c      	movs	r0, #44	@ 0x2c
 800938c:	f000 fe16 	bl	8009fbc <pvPortMalloc>
 8009390:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00d      	beq.n	80093b4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	9301      	str	r3, [sp, #4]
 80093a4:	6a3b      	ldr	r3, [r7, #32]
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	68b9      	ldr	r1, [r7, #8]
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f000 f845 	bl	800943e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80093b4:	697b      	ldr	r3, [r7, #20]
	}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b08a      	sub	sp, #40	@ 0x28
 80093c2:	af02      	add	r7, sp, #8
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	60b9      	str	r1, [r7, #8]
 80093c8:	607a      	str	r2, [r7, #4]
 80093ca:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80093cc:	232c      	movs	r3, #44	@ 0x2c
 80093ce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	2b2c      	cmp	r3, #44	@ 0x2c
 80093d4:	d00b      	beq.n	80093ee <xTimerCreateStatic+0x30>
	__asm volatile
 80093d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093da:	f383 8811 	msr	BASEPRI, r3
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	61bb      	str	r3, [r7, #24]
}
 80093e8:	bf00      	nop
 80093ea:	bf00      	nop
 80093ec:	e7fd      	b.n	80093ea <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80093ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80093f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10b      	bne.n	800940e <xTimerCreateStatic+0x50>
	__asm volatile
 80093f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fa:	f383 8811 	msr	BASEPRI, r3
 80093fe:	f3bf 8f6f 	isb	sy
 8009402:	f3bf 8f4f 	dsb	sy
 8009406:	617b      	str	r3, [r7, #20]
}
 8009408:	bf00      	nop
 800940a:	bf00      	nop
 800940c:	e7fd      	b.n	800940a <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800940e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009410:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00d      	beq.n	8009434 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	2202      	movs	r2, #2
 800941c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	9301      	str	r3, [sp, #4]
 8009424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	68b9      	ldr	r1, [r7, #8]
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f000 f805 	bl	800943e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009434:	69fb      	ldr	r3, [r7, #28]
	}
 8009436:	4618      	mov	r0, r3
 8009438:	3720      	adds	r7, #32
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b086      	sub	sp, #24
 8009442:	af00      	add	r7, sp, #0
 8009444:	60f8      	str	r0, [r7, #12]
 8009446:	60b9      	str	r1, [r7, #8]
 8009448:	607a      	str	r2, [r7, #4]
 800944a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10b      	bne.n	800946a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8009452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009456:	f383 8811 	msr	BASEPRI, r3
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	617b      	str	r3, [r7, #20]
}
 8009464:	bf00      	nop
 8009466:	bf00      	nop
 8009468:	e7fd      	b.n	8009466 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800946a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946c:	2b00      	cmp	r3, #0
 800946e:	d01e      	beq.n	80094ae <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009470:	f000 faf2 	bl	8009a58 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800947a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009488:	6a3a      	ldr	r2, [r7, #32]
 800948a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800948c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948e:	3304      	adds	r3, #4
 8009490:	4618      	mov	r0, r3
 8009492:	f7fd fe2f 	bl	80070f4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d008      	beq.n	80094ae <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800949c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094a2:	f043 0304 	orr.w	r3, r3, #4
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80094ae:	bf00      	nop
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
	...

080094b8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b08a      	sub	sp, #40	@ 0x28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
 80094c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80094c6:	2300      	movs	r3, #0
 80094c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10b      	bne.n	80094e8 <xTimerGenericCommand+0x30>
	__asm volatile
 80094d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	623b      	str	r3, [r7, #32]
}
 80094e2:	bf00      	nop
 80094e4:	bf00      	nop
 80094e6:	e7fd      	b.n	80094e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80094e8:	4b19      	ldr	r3, [pc, #100]	@ (8009550 <xTimerGenericCommand+0x98>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d02a      	beq.n	8009546 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	2b05      	cmp	r3, #5
 8009500:	dc18      	bgt.n	8009534 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009502:	f7ff fd0f 	bl	8008f24 <xTaskGetSchedulerState>
 8009506:	4603      	mov	r3, r0
 8009508:	2b02      	cmp	r3, #2
 800950a:	d109      	bne.n	8009520 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800950c:	4b10      	ldr	r3, [pc, #64]	@ (8009550 <xTimerGenericCommand+0x98>)
 800950e:	6818      	ldr	r0, [r3, #0]
 8009510:	f107 0110 	add.w	r1, r7, #16
 8009514:	2300      	movs	r3, #0
 8009516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009518:	f7fe f834 	bl	8007584 <xQueueGenericSend>
 800951c:	6278      	str	r0, [r7, #36]	@ 0x24
 800951e:	e012      	b.n	8009546 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009520:	4b0b      	ldr	r3, [pc, #44]	@ (8009550 <xTimerGenericCommand+0x98>)
 8009522:	6818      	ldr	r0, [r3, #0]
 8009524:	f107 0110 	add.w	r1, r7, #16
 8009528:	2300      	movs	r3, #0
 800952a:	2200      	movs	r2, #0
 800952c:	f7fe f82a 	bl	8007584 <xQueueGenericSend>
 8009530:	6278      	str	r0, [r7, #36]	@ 0x24
 8009532:	e008      	b.n	8009546 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009534:	4b06      	ldr	r3, [pc, #24]	@ (8009550 <xTimerGenericCommand+0x98>)
 8009536:	6818      	ldr	r0, [r3, #0]
 8009538:	f107 0110 	add.w	r1, r7, #16
 800953c:	2300      	movs	r3, #0
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	f7fe f922 	bl	8007788 <xQueueGenericSendFromISR>
 8009544:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009548:	4618      	mov	r0, r3
 800954a:	3728      	adds	r7, #40	@ 0x28
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	200018e8 	.word	0x200018e8

08009554 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b088      	sub	sp, #32
 8009558:	af02      	add	r7, sp, #8
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800955e:	4b23      	ldr	r3, [pc, #140]	@ (80095ec <prvProcessExpiredTimer+0x98>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	3304      	adds	r3, #4
 800956c:	4618      	mov	r0, r3
 800956e:	f7fd fe2b 	bl	80071c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009578:	f003 0304 	and.w	r3, r3, #4
 800957c:	2b00      	cmp	r3, #0
 800957e:	d023      	beq.n	80095c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	699a      	ldr	r2, [r3, #24]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	18d1      	adds	r1, r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	6978      	ldr	r0, [r7, #20]
 800958e:	f000 f8d5 	bl	800973c <prvInsertTimerInActiveList>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d020      	beq.n	80095da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009598:	2300      	movs	r3, #0
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	2300      	movs	r3, #0
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	2100      	movs	r1, #0
 80095a2:	6978      	ldr	r0, [r7, #20]
 80095a4:	f7ff ff88 	bl	80094b8 <xTimerGenericCommand>
 80095a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d114      	bne.n	80095da <prvProcessExpiredTimer+0x86>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	60fb      	str	r3, [r7, #12]
}
 80095c2:	bf00      	nop
 80095c4:	bf00      	nop
 80095c6:	e7fd      	b.n	80095c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095ce:	f023 0301 	bic.w	r3, r3, #1
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	6978      	ldr	r0, [r7, #20]
 80095e0:	4798      	blx	r3
}
 80095e2:	bf00      	nop
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	200018e0 	.word	0x200018e0

080095f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095f8:	f107 0308 	add.w	r3, r7, #8
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f859 	bl	80096b4 <prvGetNextExpireTime>
 8009602:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	4619      	mov	r1, r3
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f000 f805 	bl	8009618 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800960e:	f000 f8d7 	bl	80097c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009612:	bf00      	nop
 8009614:	e7f0      	b.n	80095f8 <prvTimerTask+0x8>
	...

08009618 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009622:	f7ff f88b 	bl	800873c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009626:	f107 0308 	add.w	r3, r7, #8
 800962a:	4618      	mov	r0, r3
 800962c:	f000 f866 	bl	80096fc <prvSampleTimeNow>
 8009630:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d130      	bne.n	800969a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10a      	bne.n	8009654 <prvProcessTimerOrBlockTask+0x3c>
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	429a      	cmp	r2, r3
 8009644:	d806      	bhi.n	8009654 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009646:	f7ff f887 	bl	8008758 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800964a:	68f9      	ldr	r1, [r7, #12]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff ff81 	bl	8009554 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009652:	e024      	b.n	800969e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d008      	beq.n	800966c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800965a:	4b13      	ldr	r3, [pc, #76]	@ (80096a8 <prvProcessTimerOrBlockTask+0x90>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <prvProcessTimerOrBlockTask+0x50>
 8009664:	2301      	movs	r3, #1
 8009666:	e000      	b.n	800966a <prvProcessTimerOrBlockTask+0x52>
 8009668:	2300      	movs	r3, #0
 800966a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800966c:	4b0f      	ldr	r3, [pc, #60]	@ (80096ac <prvProcessTimerOrBlockTask+0x94>)
 800966e:	6818      	ldr	r0, [r3, #0]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	683a      	ldr	r2, [r7, #0]
 8009678:	4619      	mov	r1, r3
 800967a:	f7fe fdc7 	bl	800820c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800967e:	f7ff f86b 	bl	8008758 <xTaskResumeAll>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009688:	4b09      	ldr	r3, [pc, #36]	@ (80096b0 <prvProcessTimerOrBlockTask+0x98>)
 800968a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800968e:	601a      	str	r2, [r3, #0]
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	f3bf 8f6f 	isb	sy
}
 8009698:	e001      	b.n	800969e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800969a:	f7ff f85d 	bl	8008758 <xTaskResumeAll>
}
 800969e:	bf00      	nop
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	200018e4 	.word	0x200018e4
 80096ac:	200018e8 	.word	0x200018e8
 80096b0:	e000ed04 	.word	0xe000ed04

080096b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096bc:	4b0e      	ldr	r3, [pc, #56]	@ (80096f8 <prvGetNextExpireTime+0x44>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <prvGetNextExpireTime+0x16>
 80096c6:	2201      	movs	r2, #1
 80096c8:	e000      	b.n	80096cc <prvGetNextExpireTime+0x18>
 80096ca:	2200      	movs	r2, #0
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d105      	bne.n	80096e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096d8:	4b07      	ldr	r3, [pc, #28]	@ (80096f8 <prvGetNextExpireTime+0x44>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	e001      	b.n	80096e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80096e4:	2300      	movs	r3, #0
 80096e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80096e8:	68fb      	ldr	r3, [r7, #12]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	200018e0 	.word	0x200018e0

080096fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009704:	f7ff f8c6 	bl	8008894 <xTaskGetTickCount>
 8009708:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800970a:	4b0b      	ldr	r3, [pc, #44]	@ (8009738 <prvSampleTimeNow+0x3c>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	429a      	cmp	r2, r3
 8009712:	d205      	bcs.n	8009720 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009714:	f000 f93a 	bl	800998c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	601a      	str	r2, [r3, #0]
 800971e:	e002      	b.n	8009726 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009726:	4a04      	ldr	r2, [pc, #16]	@ (8009738 <prvSampleTimeNow+0x3c>)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800972c:	68fb      	ldr	r3, [r7, #12]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	200018f0 	.word	0x200018f0

0800973c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
 8009748:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800974a:	2300      	movs	r3, #0
 800974c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	429a      	cmp	r2, r3
 8009760:	d812      	bhi.n	8009788 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	1ad2      	subs	r2, r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	429a      	cmp	r2, r3
 800976e:	d302      	bcc.n	8009776 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009770:	2301      	movs	r3, #1
 8009772:	617b      	str	r3, [r7, #20]
 8009774:	e01b      	b.n	80097ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009776:	4b10      	ldr	r3, [pc, #64]	@ (80097b8 <prvInsertTimerInActiveList+0x7c>)
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	3304      	adds	r3, #4
 800977e:	4619      	mov	r1, r3
 8009780:	4610      	mov	r0, r2
 8009782:	f7fd fce8 	bl	8007156 <vListInsert>
 8009786:	e012      	b.n	80097ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	429a      	cmp	r2, r3
 800978e:	d206      	bcs.n	800979e <prvInsertTimerInActiveList+0x62>
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	429a      	cmp	r2, r3
 8009796:	d302      	bcc.n	800979e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009798:	2301      	movs	r3, #1
 800979a:	617b      	str	r3, [r7, #20]
 800979c:	e007      	b.n	80097ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800979e:	4b07      	ldr	r3, [pc, #28]	@ (80097bc <prvInsertTimerInActiveList+0x80>)
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	3304      	adds	r3, #4
 80097a6:	4619      	mov	r1, r3
 80097a8:	4610      	mov	r0, r2
 80097aa:	f7fd fcd4 	bl	8007156 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80097ae:	697b      	ldr	r3, [r7, #20]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	200018e4 	.word	0x200018e4
 80097bc:	200018e0 	.word	0x200018e0

080097c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08e      	sub	sp, #56	@ 0x38
 80097c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097c6:	e0ce      	b.n	8009966 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	da19      	bge.n	8009802 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80097ce:	1d3b      	adds	r3, r7, #4
 80097d0:	3304      	adds	r3, #4
 80097d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80097d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10b      	bne.n	80097f2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80097da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	61fb      	str	r3, [r7, #28]
}
 80097ec:	bf00      	nop
 80097ee:	bf00      	nop
 80097f0:	e7fd      	b.n	80097ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80097f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097f8:	6850      	ldr	r0, [r2, #4]
 80097fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097fc:	6892      	ldr	r2, [r2, #8]
 80097fe:	4611      	mov	r1, r2
 8009800:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	f2c0 80ae 	blt.w	8009966 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800980e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d004      	beq.n	8009820 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009818:	3304      	adds	r3, #4
 800981a:	4618      	mov	r0, r3
 800981c:	f7fd fcd4 	bl	80071c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009820:	463b      	mov	r3, r7
 8009822:	4618      	mov	r0, r3
 8009824:	f7ff ff6a 	bl	80096fc <prvSampleTimeNow>
 8009828:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2b09      	cmp	r3, #9
 800982e:	f200 8097 	bhi.w	8009960 <prvProcessReceivedCommands+0x1a0>
 8009832:	a201      	add	r2, pc, #4	@ (adr r2, 8009838 <prvProcessReceivedCommands+0x78>)
 8009834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009838:	08009861 	.word	0x08009861
 800983c:	08009861 	.word	0x08009861
 8009840:	08009861 	.word	0x08009861
 8009844:	080098d7 	.word	0x080098d7
 8009848:	080098eb 	.word	0x080098eb
 800984c:	08009937 	.word	0x08009937
 8009850:	08009861 	.word	0x08009861
 8009854:	08009861 	.word	0x08009861
 8009858:	080098d7 	.word	0x080098d7
 800985c:	080098eb 	.word	0x080098eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009862:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009866:	f043 0301 	orr.w	r3, r3, #1
 800986a:	b2da      	uxtb	r2, r3
 800986c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	18d1      	adds	r1, r2, r3
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800987e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009880:	f7ff ff5c 	bl	800973c <prvInsertTimerInActiveList>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d06c      	beq.n	8009964 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800988a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988c:	6a1b      	ldr	r3, [r3, #32]
 800988e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009890:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009894:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009898:	f003 0304 	and.w	r3, r3, #4
 800989c:	2b00      	cmp	r3, #0
 800989e:	d061      	beq.n	8009964 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	441a      	add	r2, r3
 80098a8:	2300      	movs	r3, #0
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	2300      	movs	r3, #0
 80098ae:	2100      	movs	r1, #0
 80098b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098b2:	f7ff fe01 	bl	80094b8 <xTimerGenericCommand>
 80098b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d152      	bne.n	8009964 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	61bb      	str	r3, [r7, #24]
}
 80098d0:	bf00      	nop
 80098d2:	bf00      	nop
 80098d4:	e7fd      	b.n	80098d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098dc:	f023 0301 	bic.w	r3, r3, #1
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80098e8:	e03d      	b.n	8009966 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098f0:	f043 0301 	orr.w	r3, r3, #1
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009900:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10b      	bne.n	8009922 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	617b      	str	r3, [r7, #20]
}
 800991c:	bf00      	nop
 800991e:	bf00      	nop
 8009920:	e7fd      	b.n	800991e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009924:	699a      	ldr	r2, [r3, #24]
 8009926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009928:	18d1      	adds	r1, r2, r3
 800992a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800992e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009930:	f7ff ff04 	bl	800973c <prvInsertTimerInActiveList>
					break;
 8009934:	e017      	b.n	8009966 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800993c:	f003 0302 	and.w	r3, r3, #2
 8009940:	2b00      	cmp	r3, #0
 8009942:	d103      	bne.n	800994c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009944:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009946:	f000 fc07 	bl	800a158 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800994a:	e00c      	b.n	8009966 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800994c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009952:	f023 0301 	bic.w	r3, r3, #1
 8009956:	b2da      	uxtb	r2, r3
 8009958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800995e:	e002      	b.n	8009966 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009960:	bf00      	nop
 8009962:	e000      	b.n	8009966 <prvProcessReceivedCommands+0x1a6>
					break;
 8009964:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009966:	4b08      	ldr	r3, [pc, #32]	@ (8009988 <prvProcessReceivedCommands+0x1c8>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	1d39      	adds	r1, r7, #4
 800996c:	2200      	movs	r2, #0
 800996e:	4618      	mov	r0, r3
 8009970:	f7fe f838 	bl	80079e4 <xQueueReceive>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	f47f af26 	bne.w	80097c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800997c:	bf00      	nop
 800997e:	bf00      	nop
 8009980:	3730      	adds	r7, #48	@ 0x30
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	200018e8 	.word	0x200018e8

0800998c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b088      	sub	sp, #32
 8009990:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009992:	e049      	b.n	8009a28 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009994:	4b2e      	ldr	r3, [pc, #184]	@ (8009a50 <prvSwitchTimerLists+0xc4>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800999e:	4b2c      	ldr	r3, [pc, #176]	@ (8009a50 <prvSwitchTimerLists+0xc4>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	3304      	adds	r3, #4
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fd fc0b 	bl	80071c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099c0:	f003 0304 	and.w	r3, r3, #4
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d02f      	beq.n	8009a28 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	693a      	ldr	r2, [r7, #16]
 80099ce:	4413      	add	r3, r2
 80099d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80099d2:	68ba      	ldr	r2, [r7, #8]
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d90e      	bls.n	80099f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009a50 <prvSwitchTimerLists+0xc4>)
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	3304      	adds	r3, #4
 80099ee:	4619      	mov	r1, r3
 80099f0:	4610      	mov	r0, r2
 80099f2:	f7fd fbb0 	bl	8007156 <vListInsert>
 80099f6:	e017      	b.n	8009a28 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099f8:	2300      	movs	r3, #0
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	2300      	movs	r3, #0
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	2100      	movs	r1, #0
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f7ff fd58 	bl	80094b8 <xTimerGenericCommand>
 8009a08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10b      	bne.n	8009a28 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	603b      	str	r3, [r7, #0]
}
 8009a22:	bf00      	nop
 8009a24:	bf00      	nop
 8009a26:	e7fd      	b.n	8009a24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a28:	4b09      	ldr	r3, [pc, #36]	@ (8009a50 <prvSwitchTimerLists+0xc4>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1b0      	bne.n	8009994 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a32:	4b07      	ldr	r3, [pc, #28]	@ (8009a50 <prvSwitchTimerLists+0xc4>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a38:	4b06      	ldr	r3, [pc, #24]	@ (8009a54 <prvSwitchTimerLists+0xc8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a04      	ldr	r2, [pc, #16]	@ (8009a50 <prvSwitchTimerLists+0xc4>)
 8009a3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a40:	4a04      	ldr	r2, [pc, #16]	@ (8009a54 <prvSwitchTimerLists+0xc8>)
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	6013      	str	r3, [r2, #0]
}
 8009a46:	bf00      	nop
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	200018e0 	.word	0x200018e0
 8009a54:	200018e4 	.word	0x200018e4

08009a58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a5e:	f000 f98b 	bl	8009d78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a62:	4b15      	ldr	r3, [pc, #84]	@ (8009ab8 <prvCheckForValidListAndQueue+0x60>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d120      	bne.n	8009aac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009a6a:	4814      	ldr	r0, [pc, #80]	@ (8009abc <prvCheckForValidListAndQueue+0x64>)
 8009a6c:	f7fd fb22 	bl	80070b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a70:	4813      	ldr	r0, [pc, #76]	@ (8009ac0 <prvCheckForValidListAndQueue+0x68>)
 8009a72:	f7fd fb1f 	bl	80070b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009a76:	4b13      	ldr	r3, [pc, #76]	@ (8009ac4 <prvCheckForValidListAndQueue+0x6c>)
 8009a78:	4a10      	ldr	r2, [pc, #64]	@ (8009abc <prvCheckForValidListAndQueue+0x64>)
 8009a7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a7c:	4b12      	ldr	r3, [pc, #72]	@ (8009ac8 <prvCheckForValidListAndQueue+0x70>)
 8009a7e:	4a10      	ldr	r2, [pc, #64]	@ (8009ac0 <prvCheckForValidListAndQueue+0x68>)
 8009a80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a82:	2300      	movs	r3, #0
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	4b11      	ldr	r3, [pc, #68]	@ (8009acc <prvCheckForValidListAndQueue+0x74>)
 8009a88:	4a11      	ldr	r2, [pc, #68]	@ (8009ad0 <prvCheckForValidListAndQueue+0x78>)
 8009a8a:	2110      	movs	r1, #16
 8009a8c:	200a      	movs	r0, #10
 8009a8e:	f7fd fc2f 	bl	80072f0 <xQueueGenericCreateStatic>
 8009a92:	4603      	mov	r3, r0
 8009a94:	4a08      	ldr	r2, [pc, #32]	@ (8009ab8 <prvCheckForValidListAndQueue+0x60>)
 8009a96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a98:	4b07      	ldr	r3, [pc, #28]	@ (8009ab8 <prvCheckForValidListAndQueue+0x60>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d005      	beq.n	8009aac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009aa0:	4b05      	ldr	r3, [pc, #20]	@ (8009ab8 <prvCheckForValidListAndQueue+0x60>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	490b      	ldr	r1, [pc, #44]	@ (8009ad4 <prvCheckForValidListAndQueue+0x7c>)
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe fb5c 	bl	8008164 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009aac:	f000 f996 	bl	8009ddc <vPortExitCritical>
}
 8009ab0:	bf00      	nop
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	200018e8 	.word	0x200018e8
 8009abc:	200018b8 	.word	0x200018b8
 8009ac0:	200018cc 	.word	0x200018cc
 8009ac4:	200018e0 	.word	0x200018e0
 8009ac8:	200018e4 	.word	0x200018e4
 8009acc:	20001994 	.word	0x20001994
 8009ad0:	200018f4 	.word	0x200018f4
 8009ad4:	08013648 	.word	0x08013648

08009ad8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10b      	bne.n	8009b02 <pvTimerGetTimerID+0x2a>
	__asm volatile
 8009aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	60fb      	str	r3, [r7, #12]
}
 8009afc:	bf00      	nop
 8009afe:	bf00      	nop
 8009b00:	e7fd      	b.n	8009afe <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8009b02:	f000 f939 	bl	8009d78 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009b0c:	f000 f966 	bl	8009ddc <vPortExitCritical>

	return pvReturn;
 8009b10:	693b      	ldr	r3, [r7, #16]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3718      	adds	r7, #24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	3b04      	subs	r3, #4
 8009b2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	3b04      	subs	r3, #4
 8009b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	f023 0201 	bic.w	r2, r3, #1
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3b04      	subs	r3, #4
 8009b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b4c:	4a0c      	ldr	r2, [pc, #48]	@ (8009b80 <pxPortInitialiseStack+0x64>)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	3b14      	subs	r3, #20
 8009b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3b04      	subs	r3, #4
 8009b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f06f 0202 	mvn.w	r2, #2
 8009b6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	3b20      	subs	r3, #32
 8009b70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b72:	68fb      	ldr	r3, [r7, #12]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3714      	adds	r7, #20
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	08009b85 	.word	0x08009b85

08009b84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b8e:	4b13      	ldr	r3, [pc, #76]	@ (8009bdc <prvTaskExitError+0x58>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b96:	d00b      	beq.n	8009bb0 <prvTaskExitError+0x2c>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	60fb      	str	r3, [r7, #12]
}
 8009baa:	bf00      	nop
 8009bac:	bf00      	nop
 8009bae:	e7fd      	b.n	8009bac <prvTaskExitError+0x28>
	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	60bb      	str	r3, [r7, #8]
}
 8009bc2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bc4:	bf00      	nop
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d0fc      	beq.n	8009bc6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009bcc:	bf00      	nop
 8009bce:	bf00      	nop
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	200000dc 	.word	0x200000dc

08009be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009be0:	4b07      	ldr	r3, [pc, #28]	@ (8009c00 <pxCurrentTCBConst2>)
 8009be2:	6819      	ldr	r1, [r3, #0]
 8009be4:	6808      	ldr	r0, [r1, #0]
 8009be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bea:	f380 8809 	msr	PSP, r0
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f04f 0000 	mov.w	r0, #0
 8009bf6:	f380 8811 	msr	BASEPRI, r0
 8009bfa:	4770      	bx	lr
 8009bfc:	f3af 8000 	nop.w

08009c00 <pxCurrentTCBConst2>:
 8009c00:	200013b8 	.word	0x200013b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop

08009c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c08:	4808      	ldr	r0, [pc, #32]	@ (8009c2c <prvPortStartFirstTask+0x24>)
 8009c0a:	6800      	ldr	r0, [r0, #0]
 8009c0c:	6800      	ldr	r0, [r0, #0]
 8009c0e:	f380 8808 	msr	MSP, r0
 8009c12:	f04f 0000 	mov.w	r0, #0
 8009c16:	f380 8814 	msr	CONTROL, r0
 8009c1a:	b662      	cpsie	i
 8009c1c:	b661      	cpsie	f
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	df00      	svc	0
 8009c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c2a:	bf00      	nop
 8009c2c:	e000ed08 	.word	0xe000ed08

08009c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c36:	4b47      	ldr	r3, [pc, #284]	@ (8009d54 <xPortStartScheduler+0x124>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a47      	ldr	r2, [pc, #284]	@ (8009d58 <xPortStartScheduler+0x128>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d10b      	bne.n	8009c58 <xPortStartScheduler+0x28>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	613b      	str	r3, [r7, #16]
}
 8009c52:	bf00      	nop
 8009c54:	bf00      	nop
 8009c56:	e7fd      	b.n	8009c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c58:	4b3e      	ldr	r3, [pc, #248]	@ (8009d54 <xPortStartScheduler+0x124>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8009d5c <xPortStartScheduler+0x12c>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d10b      	bne.n	8009c7a <xPortStartScheduler+0x4a>
	__asm volatile
 8009c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	60fb      	str	r3, [r7, #12]
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop
 8009c78:	e7fd      	b.n	8009c76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c7a:	4b39      	ldr	r3, [pc, #228]	@ (8009d60 <xPortStartScheduler+0x130>)
 8009c7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	22ff      	movs	r2, #255	@ 0xff
 8009c8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c94:	78fb      	ldrb	r3, [r7, #3]
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	4b31      	ldr	r3, [pc, #196]	@ (8009d64 <xPortStartScheduler+0x134>)
 8009ca0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ca2:	4b31      	ldr	r3, [pc, #196]	@ (8009d68 <xPortStartScheduler+0x138>)
 8009ca4:	2207      	movs	r2, #7
 8009ca6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ca8:	e009      	b.n	8009cbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009caa:	4b2f      	ldr	r3, [pc, #188]	@ (8009d68 <xPortStartScheduler+0x138>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8009d68 <xPortStartScheduler+0x138>)
 8009cb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009cb4:	78fb      	ldrb	r3, [r7, #3]
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	005b      	lsls	r3, r3, #1
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cbe:	78fb      	ldrb	r3, [r7, #3]
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cc6:	2b80      	cmp	r3, #128	@ 0x80
 8009cc8:	d0ef      	beq.n	8009caa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009cca:	4b27      	ldr	r3, [pc, #156]	@ (8009d68 <xPortStartScheduler+0x138>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f1c3 0307 	rsb	r3, r3, #7
 8009cd2:	2b04      	cmp	r3, #4
 8009cd4:	d00b      	beq.n	8009cee <xPortStartScheduler+0xbe>
	__asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	60bb      	str	r3, [r7, #8]
}
 8009ce8:	bf00      	nop
 8009cea:	bf00      	nop
 8009cec:	e7fd      	b.n	8009cea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009cee:	4b1e      	ldr	r3, [pc, #120]	@ (8009d68 <xPortStartScheduler+0x138>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	021b      	lsls	r3, r3, #8
 8009cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8009d68 <xPortStartScheduler+0x138>)
 8009cf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8009d68 <xPortStartScheduler+0x138>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d00:	4a19      	ldr	r2, [pc, #100]	@ (8009d68 <xPortStartScheduler+0x138>)
 8009d02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	b2da      	uxtb	r2, r3
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d0c:	4b17      	ldr	r3, [pc, #92]	@ (8009d6c <xPortStartScheduler+0x13c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a16      	ldr	r2, [pc, #88]	@ (8009d6c <xPortStartScheduler+0x13c>)
 8009d12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009d16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d18:	4b14      	ldr	r3, [pc, #80]	@ (8009d6c <xPortStartScheduler+0x13c>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a13      	ldr	r2, [pc, #76]	@ (8009d6c <xPortStartScheduler+0x13c>)
 8009d1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009d22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d24:	f000 f8da 	bl	8009edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d28:	4b11      	ldr	r3, [pc, #68]	@ (8009d70 <xPortStartScheduler+0x140>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d2e:	f000 f8f9 	bl	8009f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d32:	4b10      	ldr	r3, [pc, #64]	@ (8009d74 <xPortStartScheduler+0x144>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a0f      	ldr	r2, [pc, #60]	@ (8009d74 <xPortStartScheduler+0x144>)
 8009d38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009d3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d3e:	f7ff ff63 	bl	8009c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d42:	f7fe fe71 	bl	8008a28 <vTaskSwitchContext>
	prvTaskExitError();
 8009d46:	f7ff ff1d 	bl	8009b84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3718      	adds	r7, #24
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	e000ed00 	.word	0xe000ed00
 8009d58:	410fc271 	.word	0x410fc271
 8009d5c:	410fc270 	.word	0x410fc270
 8009d60:	e000e400 	.word	0xe000e400
 8009d64:	200019e4 	.word	0x200019e4
 8009d68:	200019e8 	.word	0x200019e8
 8009d6c:	e000ed20 	.word	0xe000ed20
 8009d70:	200000dc 	.word	0x200000dc
 8009d74:	e000ef34 	.word	0xe000ef34

08009d78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	607b      	str	r3, [r7, #4]
}
 8009d90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d92:	4b10      	ldr	r3, [pc, #64]	@ (8009dd4 <vPortEnterCritical+0x5c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3301      	adds	r3, #1
 8009d98:	4a0e      	ldr	r2, [pc, #56]	@ (8009dd4 <vPortEnterCritical+0x5c>)
 8009d9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd4 <vPortEnterCritical+0x5c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d110      	bne.n	8009dc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009da4:	4b0c      	ldr	r3, [pc, #48]	@ (8009dd8 <vPortEnterCritical+0x60>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00b      	beq.n	8009dc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	603b      	str	r3, [r7, #0]
}
 8009dc0:	bf00      	nop
 8009dc2:	bf00      	nop
 8009dc4:	e7fd      	b.n	8009dc2 <vPortEnterCritical+0x4a>
	}
}
 8009dc6:	bf00      	nop
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	200000dc 	.word	0x200000dc
 8009dd8:	e000ed04 	.word	0xe000ed04

08009ddc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009de2:	4b12      	ldr	r3, [pc, #72]	@ (8009e2c <vPortExitCritical+0x50>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10b      	bne.n	8009e02 <vPortExitCritical+0x26>
	__asm volatile
 8009dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	607b      	str	r3, [r7, #4]
}
 8009dfc:	bf00      	nop
 8009dfe:	bf00      	nop
 8009e00:	e7fd      	b.n	8009dfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e02:	4b0a      	ldr	r3, [pc, #40]	@ (8009e2c <vPortExitCritical+0x50>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3b01      	subs	r3, #1
 8009e08:	4a08      	ldr	r2, [pc, #32]	@ (8009e2c <vPortExitCritical+0x50>)
 8009e0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e0c:	4b07      	ldr	r3, [pc, #28]	@ (8009e2c <vPortExitCritical+0x50>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d105      	bne.n	8009e20 <vPortExitCritical+0x44>
 8009e14:	2300      	movs	r3, #0
 8009e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	f383 8811 	msr	BASEPRI, r3
}
 8009e1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	200000dc 	.word	0x200000dc

08009e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e30:	f3ef 8009 	mrs	r0, PSP
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	4b15      	ldr	r3, [pc, #84]	@ (8009e90 <pxCurrentTCBConst>)
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	f01e 0f10 	tst.w	lr, #16
 8009e40:	bf08      	it	eq
 8009e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4a:	6010      	str	r0, [r2, #0]
 8009e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009e54:	f380 8811 	msr	BASEPRI, r0
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f7fe fde2 	bl	8008a28 <vTaskSwitchContext>
 8009e64:	f04f 0000 	mov.w	r0, #0
 8009e68:	f380 8811 	msr	BASEPRI, r0
 8009e6c:	bc09      	pop	{r0, r3}
 8009e6e:	6819      	ldr	r1, [r3, #0]
 8009e70:	6808      	ldr	r0, [r1, #0]
 8009e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e76:	f01e 0f10 	tst.w	lr, #16
 8009e7a:	bf08      	it	eq
 8009e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e80:	f380 8809 	msr	PSP, r0
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	f3af 8000 	nop.w

08009e90 <pxCurrentTCBConst>:
 8009e90:	200013b8 	.word	0x200013b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop

08009e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	607b      	str	r3, [r7, #4]
}
 8009eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009eb2:	f7fe fcff 	bl	80088b4 <xTaskIncrementTick>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ebc:	4b06      	ldr	r3, [pc, #24]	@ (8009ed8 <xPortSysTickHandler+0x40>)
 8009ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	f383 8811 	msr	BASEPRI, r3
}
 8009ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	e000ed04 	.word	0xe000ed04

08009edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8009f10 <vPortSetupTimerInterrupt+0x34>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8009f14 <vPortSetupTimerInterrupt+0x38>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009eec:	4b0a      	ldr	r3, [pc, #40]	@ (8009f18 <vPortSetupTimerInterrupt+0x3c>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8009f1c <vPortSetupTimerInterrupt+0x40>)
 8009ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ef6:	099b      	lsrs	r3, r3, #6
 8009ef8:	4a09      	ldr	r2, [pc, #36]	@ (8009f20 <vPortSetupTimerInterrupt+0x44>)
 8009efa:	3b01      	subs	r3, #1
 8009efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009efe:	4b04      	ldr	r3, [pc, #16]	@ (8009f10 <vPortSetupTimerInterrupt+0x34>)
 8009f00:	2207      	movs	r2, #7
 8009f02:	601a      	str	r2, [r3, #0]
}
 8009f04:	bf00      	nop
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	e000e010 	.word	0xe000e010
 8009f14:	e000e018 	.word	0xe000e018
 8009f18:	200000d0 	.word	0x200000d0
 8009f1c:	10624dd3 	.word	0x10624dd3
 8009f20:	e000e014 	.word	0xe000e014

08009f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009f34 <vPortEnableVFP+0x10>
 8009f28:	6801      	ldr	r1, [r0, #0]
 8009f2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009f2e:	6001      	str	r1, [r0, #0]
 8009f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f32:	bf00      	nop
 8009f34:	e000ed88 	.word	0xe000ed88

08009f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f3e:	f3ef 8305 	mrs	r3, IPSR
 8009f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b0f      	cmp	r3, #15
 8009f48:	d915      	bls.n	8009f76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f4a:	4a18      	ldr	r2, [pc, #96]	@ (8009fac <vPortValidateInterruptPriority+0x74>)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4413      	add	r3, r2
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f54:	4b16      	ldr	r3, [pc, #88]	@ (8009fb0 <vPortValidateInterruptPriority+0x78>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	7afa      	ldrb	r2, [r7, #11]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d20b      	bcs.n	8009f76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	607b      	str	r3, [r7, #4]
}
 8009f70:	bf00      	nop
 8009f72:	bf00      	nop
 8009f74:	e7fd      	b.n	8009f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f76:	4b0f      	ldr	r3, [pc, #60]	@ (8009fb4 <vPortValidateInterruptPriority+0x7c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb8 <vPortValidateInterruptPriority+0x80>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d90b      	bls.n	8009f9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	603b      	str	r3, [r7, #0]
}
 8009f98:	bf00      	nop
 8009f9a:	bf00      	nop
 8009f9c:	e7fd      	b.n	8009f9a <vPortValidateInterruptPriority+0x62>
	}
 8009f9e:	bf00      	nop
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	e000e3f0 	.word	0xe000e3f0
 8009fb0:	200019e4 	.word	0x200019e4
 8009fb4:	e000ed0c 	.word	0xe000ed0c
 8009fb8:	200019e8 	.word	0x200019e8

08009fbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08a      	sub	sp, #40	@ 0x28
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009fc8:	f7fe fbb8 	bl	800873c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009fcc:	4b5c      	ldr	r3, [pc, #368]	@ (800a140 <pvPortMalloc+0x184>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009fd4:	f000 f924 	bl	800a220 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009fd8:	4b5a      	ldr	r3, [pc, #360]	@ (800a144 <pvPortMalloc+0x188>)
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4013      	ands	r3, r2
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f040 8095 	bne.w	800a110 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d01e      	beq.n	800a02a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009fec:	2208      	movs	r2, #8
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f003 0307 	and.w	r3, r3, #7
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d015      	beq.n	800a02a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f023 0307 	bic.w	r3, r3, #7
 800a004:	3308      	adds	r3, #8
 800a006:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f003 0307 	and.w	r3, r3, #7
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00b      	beq.n	800a02a <pvPortMalloc+0x6e>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	617b      	str	r3, [r7, #20]
}
 800a024:	bf00      	nop
 800a026:	bf00      	nop
 800a028:	e7fd      	b.n	800a026 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d06f      	beq.n	800a110 <pvPortMalloc+0x154>
 800a030:	4b45      	ldr	r3, [pc, #276]	@ (800a148 <pvPortMalloc+0x18c>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	429a      	cmp	r2, r3
 800a038:	d86a      	bhi.n	800a110 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a03a:	4b44      	ldr	r3, [pc, #272]	@ (800a14c <pvPortMalloc+0x190>)
 800a03c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a03e:	4b43      	ldr	r3, [pc, #268]	@ (800a14c <pvPortMalloc+0x190>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a044:	e004      	b.n	800a050 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a048:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	429a      	cmp	r2, r3
 800a058:	d903      	bls.n	800a062 <pvPortMalloc+0xa6>
 800a05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1f1      	bne.n	800a046 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a062:	4b37      	ldr	r3, [pc, #220]	@ (800a140 <pvPortMalloc+0x184>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a068:	429a      	cmp	r2, r3
 800a06a:	d051      	beq.n	800a110 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a06c:	6a3b      	ldr	r3, [r7, #32]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2208      	movs	r2, #8
 800a072:	4413      	add	r3, r2
 800a074:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a080:	685a      	ldr	r2, [r3, #4]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	1ad2      	subs	r2, r2, r3
 800a086:	2308      	movs	r3, #8
 800a088:	005b      	lsls	r3, r3, #1
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d920      	bls.n	800a0d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a08e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4413      	add	r3, r2
 800a094:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	f003 0307 	and.w	r3, r3, #7
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00b      	beq.n	800a0b8 <pvPortMalloc+0xfc>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	613b      	str	r3, [r7, #16]
}
 800a0b2:	bf00      	nop
 800a0b4:	bf00      	nop
 800a0b6:	e7fd      	b.n	800a0b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	1ad2      	subs	r2, r2, r3
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0ca:	69b8      	ldr	r0, [r7, #24]
 800a0cc:	f000 f90a 	bl	800a2e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a148 <pvPortMalloc+0x18c>)
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	4a1b      	ldr	r2, [pc, #108]	@ (800a148 <pvPortMalloc+0x18c>)
 800a0dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0de:	4b1a      	ldr	r3, [pc, #104]	@ (800a148 <pvPortMalloc+0x18c>)
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	4b1b      	ldr	r3, [pc, #108]	@ (800a150 <pvPortMalloc+0x194>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d203      	bcs.n	800a0f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0ea:	4b17      	ldr	r3, [pc, #92]	@ (800a148 <pvPortMalloc+0x18c>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a18      	ldr	r2, [pc, #96]	@ (800a150 <pvPortMalloc+0x194>)
 800a0f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	4b13      	ldr	r3, [pc, #76]	@ (800a144 <pvPortMalloc+0x188>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	431a      	orrs	r2, r3
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a102:	2200      	movs	r2, #0
 800a104:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a106:	4b13      	ldr	r3, [pc, #76]	@ (800a154 <pvPortMalloc+0x198>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	3301      	adds	r3, #1
 800a10c:	4a11      	ldr	r2, [pc, #68]	@ (800a154 <pvPortMalloc+0x198>)
 800a10e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a110:	f7fe fb22 	bl	8008758 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	f003 0307 	and.w	r3, r3, #7
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00b      	beq.n	800a136 <pvPortMalloc+0x17a>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	60fb      	str	r3, [r7, #12]
}
 800a130:	bf00      	nop
 800a132:	bf00      	nop
 800a134:	e7fd      	b.n	800a132 <pvPortMalloc+0x176>
	return pvReturn;
 800a136:	69fb      	ldr	r3, [r7, #28]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3728      	adds	r7, #40	@ 0x28
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	200055f4 	.word	0x200055f4
 800a144:	20005608 	.word	0x20005608
 800a148:	200055f8 	.word	0x200055f8
 800a14c:	200055ec 	.word	0x200055ec
 800a150:	200055fc 	.word	0x200055fc
 800a154:	20005600 	.word	0x20005600

0800a158 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d04f      	beq.n	800a20a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a16a:	2308      	movs	r3, #8
 800a16c:	425b      	negs	r3, r3
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	4413      	add	r3, r2
 800a172:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	4b25      	ldr	r3, [pc, #148]	@ (800a214 <vPortFree+0xbc>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4013      	ands	r3, r2
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10b      	bne.n	800a19e <vPortFree+0x46>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	60fb      	str	r3, [r7, #12]
}
 800a198:	bf00      	nop
 800a19a:	bf00      	nop
 800a19c:	e7fd      	b.n	800a19a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00b      	beq.n	800a1be <vPortFree+0x66>
	__asm volatile
 800a1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	60bb      	str	r3, [r7, #8]
}
 800a1b8:	bf00      	nop
 800a1ba:	bf00      	nop
 800a1bc:	e7fd      	b.n	800a1ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	685a      	ldr	r2, [r3, #4]
 800a1c2:	4b14      	ldr	r3, [pc, #80]	@ (800a214 <vPortFree+0xbc>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d01e      	beq.n	800a20a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d11a      	bne.n	800a20a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a214 <vPortFree+0xbc>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	43db      	mvns	r3, r3
 800a1de:	401a      	ands	r2, r3
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1e4:	f7fe faaa 	bl	800873c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a218 <vPortFree+0xc0>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	4a09      	ldr	r2, [pc, #36]	@ (800a218 <vPortFree+0xc0>)
 800a1f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1f6:	6938      	ldr	r0, [r7, #16]
 800a1f8:	f000 f874 	bl	800a2e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a1fc:	4b07      	ldr	r3, [pc, #28]	@ (800a21c <vPortFree+0xc4>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3301      	adds	r3, #1
 800a202:	4a06      	ldr	r2, [pc, #24]	@ (800a21c <vPortFree+0xc4>)
 800a204:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a206:	f7fe faa7 	bl	8008758 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a20a:	bf00      	nop
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20005608 	.word	0x20005608
 800a218:	200055f8 	.word	0x200055f8
 800a21c:	20005604 	.word	0x20005604

0800a220 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a226:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a22a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a22c:	4b27      	ldr	r3, [pc, #156]	@ (800a2cc <prvHeapInit+0xac>)
 800a22e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f003 0307 	and.w	r3, r3, #7
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00c      	beq.n	800a254 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	3307      	adds	r3, #7
 800a23e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f023 0307 	bic.w	r3, r3, #7
 800a246:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	4a1f      	ldr	r2, [pc, #124]	@ (800a2cc <prvHeapInit+0xac>)
 800a250:	4413      	add	r3, r2
 800a252:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a258:	4a1d      	ldr	r2, [pc, #116]	@ (800a2d0 <prvHeapInit+0xb0>)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a25e:	4b1c      	ldr	r3, [pc, #112]	@ (800a2d0 <prvHeapInit+0xb0>)
 800a260:	2200      	movs	r2, #0
 800a262:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	4413      	add	r3, r2
 800a26a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a26c:	2208      	movs	r2, #8
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	1a9b      	subs	r3, r3, r2
 800a272:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f023 0307 	bic.w	r3, r3, #7
 800a27a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	4a15      	ldr	r2, [pc, #84]	@ (800a2d4 <prvHeapInit+0xb4>)
 800a280:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a282:	4b14      	ldr	r3, [pc, #80]	@ (800a2d4 <prvHeapInit+0xb4>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2200      	movs	r2, #0
 800a288:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a28a:	4b12      	ldr	r3, [pc, #72]	@ (800a2d4 <prvHeapInit+0xb4>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2200      	movs	r2, #0
 800a290:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	1ad2      	subs	r2, r2, r3
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a2a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d4 <prvHeapInit+0xb4>)
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	4a0a      	ldr	r2, [pc, #40]	@ (800a2d8 <prvHeapInit+0xb8>)
 800a2ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	4a09      	ldr	r2, [pc, #36]	@ (800a2dc <prvHeapInit+0xbc>)
 800a2b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a2b8:	4b09      	ldr	r3, [pc, #36]	@ (800a2e0 <prvHeapInit+0xc0>)
 800a2ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a2be:	601a      	str	r2, [r3, #0]
}
 800a2c0:	bf00      	nop
 800a2c2:	3714      	adds	r7, #20
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	200019ec 	.word	0x200019ec
 800a2d0:	200055ec 	.word	0x200055ec
 800a2d4:	200055f4 	.word	0x200055f4
 800a2d8:	200055fc 	.word	0x200055fc
 800a2dc:	200055f8 	.word	0x200055f8
 800a2e0:	20005608 	.word	0x20005608

0800a2e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2ec:	4b28      	ldr	r3, [pc, #160]	@ (800a390 <prvInsertBlockIntoFreeList+0xac>)
 800a2ee:	60fb      	str	r3, [r7, #12]
 800a2f0:	e002      	b.n	800a2f8 <prvInsertBlockIntoFreeList+0x14>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d8f7      	bhi.n	800a2f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	4413      	add	r3, r2
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	429a      	cmp	r2, r3
 800a312:	d108      	bne.n	800a326 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	441a      	add	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	68ba      	ldr	r2, [r7, #8]
 800a330:	441a      	add	r2, r3
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d118      	bne.n	800a36c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	4b15      	ldr	r3, [pc, #84]	@ (800a394 <prvInsertBlockIntoFreeList+0xb0>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	429a      	cmp	r2, r3
 800a344:	d00d      	beq.n	800a362 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	441a      	add	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	601a      	str	r2, [r3, #0]
 800a360:	e008      	b.n	800a374 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a362:	4b0c      	ldr	r3, [pc, #48]	@ (800a394 <prvInsertBlockIntoFreeList+0xb0>)
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	601a      	str	r2, [r3, #0]
 800a36a:	e003      	b.n	800a374 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d002      	beq.n	800a382 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a382:	bf00      	nop
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	200055ec 	.word	0x200055ec
 800a394:	200055f4 	.word	0x200055f4

0800a398 <cJSON_GetNumberValue>:

    return item->valuestring;
}

CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
    if (!cJSON_IsNumber(item))
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f002 f858 	bl	800c456 <cJSON_IsNumber>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d103      	bne.n	800a3b4 <cJSON_GetNumberValue+0x1c>
    {
        return (double) NAN;
 800a3ac:	f04f 0200 	mov.w	r2, #0
 800a3b0:	4b06      	ldr	r3, [pc, #24]	@ (800a3cc <cJSON_GetNumberValue+0x34>)
 800a3b2:	e002      	b.n	800a3ba <cJSON_GetNumberValue+0x22>
    }

    return item->valuedouble;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 800a3ba:	ec43 2b17 	vmov	d7, r2, r3
 800a3be:	eeb0 0a47 	vmov.f32	s0, s14
 800a3c2:	eef0 0a67 	vmov.f32	s1, s15
 800a3c6:	3708      	adds	r7, #8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	7ff80000 	.word	0x7ff80000

0800a3d0 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <case_insensitive_strcmp+0x16>
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d101      	bne.n	800a3ea <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e056      	b.n	800a498 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d10d      	bne.n	800a40e <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	e050      	b.n	800a498 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <case_insensitive_strcmp+0x32>
        {
            return 0;
 800a3fe:	2300      	movs	r3, #0
 800a400:	e04a      	b.n	800a498 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	3301      	adds	r3, #1
 800a406:	607b      	str	r3, [r7, #4]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	3301      	adds	r3, #1
 800a40c:	603b      	str	r3, [r7, #0]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	73fb      	strb	r3, [r7, #15]
 800a414:	7bfb      	ldrb	r3, [r7, #15]
 800a416:	3301      	adds	r3, #1
 800a418:	4a22      	ldr	r2, [pc, #136]	@ (800a4a4 <case_insensitive_strcmp+0xd4>)
 800a41a:	4413      	add	r3, r2
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	f003 0303 	and.w	r3, r3, #3
 800a422:	2b01      	cmp	r3, #1
 800a424:	d103      	bne.n	800a42e <case_insensitive_strcmp+0x5e>
 800a426:	7bfb      	ldrb	r3, [r7, #15]
 800a428:	f103 0220 	add.w	r2, r3, #32
 800a42c:	e000      	b.n	800a430 <case_insensitive_strcmp+0x60>
 800a42e:	7bfa      	ldrb	r2, [r7, #15]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	73bb      	strb	r3, [r7, #14]
 800a436:	7bbb      	ldrb	r3, [r7, #14]
 800a438:	3301      	adds	r3, #1
 800a43a:	491a      	ldr	r1, [pc, #104]	@ (800a4a4 <case_insensitive_strcmp+0xd4>)
 800a43c:	440b      	add	r3, r1
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	f003 0303 	and.w	r3, r3, #3
 800a444:	2b01      	cmp	r3, #1
 800a446:	d102      	bne.n	800a44e <case_insensitive_strcmp+0x7e>
 800a448:	7bbb      	ldrb	r3, [r7, #14]
 800a44a:	3320      	adds	r3, #32
 800a44c:	e000      	b.n	800a450 <case_insensitive_strcmp+0x80>
 800a44e:	7bbb      	ldrb	r3, [r7, #14]
 800a450:	429a      	cmp	r2, r3
 800a452:	d0d0      	beq.n	800a3f6 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	737b      	strb	r3, [r7, #13]
 800a45a:	7b7b      	ldrb	r3, [r7, #13]
 800a45c:	3301      	adds	r3, #1
 800a45e:	4a11      	ldr	r2, [pc, #68]	@ (800a4a4 <case_insensitive_strcmp+0xd4>)
 800a460:	4413      	add	r3, r2
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	f003 0303 	and.w	r3, r3, #3
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d103      	bne.n	800a474 <case_insensitive_strcmp+0xa4>
 800a46c:	7b7b      	ldrb	r3, [r7, #13]
 800a46e:	f103 0220 	add.w	r2, r3, #32
 800a472:	e000      	b.n	800a476 <case_insensitive_strcmp+0xa6>
 800a474:	7b7a      	ldrb	r2, [r7, #13]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	733b      	strb	r3, [r7, #12]
 800a47c:	7b3b      	ldrb	r3, [r7, #12]
 800a47e:	3301      	adds	r3, #1
 800a480:	4908      	ldr	r1, [pc, #32]	@ (800a4a4 <case_insensitive_strcmp+0xd4>)
 800a482:	440b      	add	r3, r1
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	f003 0303 	and.w	r3, r3, #3
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d102      	bne.n	800a494 <case_insensitive_strcmp+0xc4>
 800a48e:	7b3b      	ldrb	r3, [r7, #12]
 800a490:	3320      	adds	r3, #32
 800a492:	e000      	b.n	800a496 <case_insensitive_strcmp+0xc6>
 800a494:	7b3b      	ldrb	r3, [r7, #12]
 800a496:	1ad3      	subs	r3, r2, r3
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr
 800a4a4:	080137c8 	.word	0x080137c8

0800a4a8 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d101      	bne.n	800a4c4 <cJSON_strdup+0x1c>
    {
        return NULL;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	e015      	b.n	800a4f0 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f7f5 feeb 	bl	80002a0 <strlen>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	4798      	blx	r3
 800a4d8:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d101      	bne.n	800a4e4 <cJSON_strdup+0x3c>
    {
        return NULL;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	e005      	b.n	800a4f0 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	68b8      	ldr	r0, [r7, #8]
 800a4ea:	f004 ff3e 	bl	800f36a <memcpy>

    return copy;
 800a4ee:	68bb      	ldr	r3, [r7, #8]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <cJSON_InitHooks>:

CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
    if (hooks == NULL)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d109      	bne.n	800a51a <cJSON_InitHooks+0x22>
    {
        /* Reset hooks */
        global_hooks.allocate = malloc;
 800a506:	4b1a      	ldr	r3, [pc, #104]	@ (800a570 <cJSON_InitHooks+0x78>)
 800a508:	4a1a      	ldr	r2, [pc, #104]	@ (800a574 <cJSON_InitHooks+0x7c>)
 800a50a:	601a      	str	r2, [r3, #0]
        global_hooks.deallocate = free;
 800a50c:	4b18      	ldr	r3, [pc, #96]	@ (800a570 <cJSON_InitHooks+0x78>)
 800a50e:	4a1a      	ldr	r2, [pc, #104]	@ (800a578 <cJSON_InitHooks+0x80>)
 800a510:	605a      	str	r2, [r3, #4]
        global_hooks.reallocate = realloc;
 800a512:	4b17      	ldr	r3, [pc, #92]	@ (800a570 <cJSON_InitHooks+0x78>)
 800a514:	4a19      	ldr	r2, [pc, #100]	@ (800a57c <cJSON_InitHooks+0x84>)
 800a516:	609a      	str	r2, [r3, #8]
        return;
 800a518:	e025      	b.n	800a566 <cJSON_InitHooks+0x6e>
    }

    global_hooks.allocate = malloc;
 800a51a:	4b15      	ldr	r3, [pc, #84]	@ (800a570 <cJSON_InitHooks+0x78>)
 800a51c:	4a15      	ldr	r2, [pc, #84]	@ (800a574 <cJSON_InitHooks+0x7c>)
 800a51e:	601a      	str	r2, [r3, #0]
    if (hooks->malloc_fn != NULL)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d003      	beq.n	800a530 <cJSON_InitHooks+0x38>
    {
        global_hooks.allocate = hooks->malloc_fn;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a10      	ldr	r2, [pc, #64]	@ (800a570 <cJSON_InitHooks+0x78>)
 800a52e:	6013      	str	r3, [r2, #0]
    }

    global_hooks.deallocate = free;
 800a530:	4b0f      	ldr	r3, [pc, #60]	@ (800a570 <cJSON_InitHooks+0x78>)
 800a532:	4a11      	ldr	r2, [pc, #68]	@ (800a578 <cJSON_InitHooks+0x80>)
 800a534:	605a      	str	r2, [r3, #4]
    if (hooks->free_fn != NULL)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <cJSON_InitHooks+0x4e>
    {
        global_hooks.deallocate = hooks->free_fn;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	4a0b      	ldr	r2, [pc, #44]	@ (800a570 <cJSON_InitHooks+0x78>)
 800a544:	6053      	str	r3, [r2, #4]
    }

    /* use realloc only if both free and malloc are used */
    global_hooks.reallocate = NULL;
 800a546:	4b0a      	ldr	r3, [pc, #40]	@ (800a570 <cJSON_InitHooks+0x78>)
 800a548:	2200      	movs	r2, #0
 800a54a:	609a      	str	r2, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
 800a54c:	4b08      	ldr	r3, [pc, #32]	@ (800a570 <cJSON_InitHooks+0x78>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a08      	ldr	r2, [pc, #32]	@ (800a574 <cJSON_InitHooks+0x7c>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d107      	bne.n	800a566 <cJSON_InitHooks+0x6e>
 800a556:	4b06      	ldr	r3, [pc, #24]	@ (800a570 <cJSON_InitHooks+0x78>)
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	4a07      	ldr	r2, [pc, #28]	@ (800a578 <cJSON_InitHooks+0x80>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d102      	bne.n	800a566 <cJSON_InitHooks+0x6e>
    {
        global_hooks.reallocate = realloc;
 800a560:	4b03      	ldr	r3, [pc, #12]	@ (800a570 <cJSON_InitHooks+0x78>)
 800a562:	4a06      	ldr	r2, [pc, #24]	@ (800a57c <cJSON_InitHooks+0x84>)
 800a564:	609a      	str	r2, [r3, #8]
    }
}
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr
 800a570:	200000e0 	.word	0x200000e0
 800a574:	0800d619 	.word	0x0800d619
 800a578:	0800d629 	.word	0x0800d629
 800a57c:	0800d795 	.word	0x0800d795

0800a580 <cJSON_New_Item>:

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2028      	movs	r0, #40	@ 0x28
 800a58e:	4798      	blx	r3
 800a590:	60f8      	str	r0, [r7, #12]
    if (node)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d004      	beq.n	800a5a2 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800a598:	2228      	movs	r2, #40	@ 0x28
 800a59a:	2100      	movs	r1, #0
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f004 fded 	bl	800f17c <memset>
    }

    return node;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800a5b8:	e037      	b.n	800a62a <cJSON_Delete+0x7e>
    {
        next = item->next;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d108      	bne.n	800a5de <cJSON_Delete+0x32>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d004      	beq.n	800a5de <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7ff ffe7 	bl	800a5ac <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d109      	bne.n	800a5fe <cJSON_Delete+0x52>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d005      	beq.n	800a5fe <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800a5f2:	4b12      	ldr	r3, [pc, #72]	@ (800a63c <cJSON_Delete+0x90>)
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	6912      	ldr	r2, [r2, #16]
 800a5fa:	4610      	mov	r0, r2
 800a5fc:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a606:	2b00      	cmp	r3, #0
 800a608:	d109      	bne.n	800a61e <cJSON_Delete+0x72>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a1b      	ldr	r3, [r3, #32]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d005      	beq.n	800a61e <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 800a612:	4b0a      	ldr	r3, [pc, #40]	@ (800a63c <cJSON_Delete+0x90>)
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	6a12      	ldr	r2, [r2, #32]
 800a61a:	4610      	mov	r0, r2
 800a61c:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 800a61e:	4b07      	ldr	r3, [pc, #28]	@ (800a63c <cJSON_Delete+0x90>)
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	4798      	blx	r3
        item = next;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1c4      	bne.n	800a5ba <cJSON_Delete+0xe>
    }
}
 800a630:	bf00      	nop
 800a632:	bf00      	nop
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	200000e0 	.word	0x200000e0

0800a640 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800a640:	b480      	push	{r7}
 800a642:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800a644:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800a646:	4618      	mov	r0, r3
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b098      	sub	sp, #96	@ 0x60
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
    double number = 0;
 800a65a:	f04f 0200 	mov.w	r2, #0
 800a65e:	f04f 0300 	mov.w	r3, #0
 800a662:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800a666:	2300      	movs	r3, #0
 800a668:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800a66a:	f7ff ffe9 	bl	800a640 <get_decimal_point>
 800a66e:	4603      	mov	r3, r0
 800a670:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d003      	beq.n	800a686 <parse_number+0x36>
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d101      	bne.n	800a68a <parse_number+0x3a>
    {
        return false;
 800a686:	2300      	movs	r3, #0
 800a688:	e0a0      	b.n	800a7cc <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800a68a:	2300      	movs	r3, #0
 800a68c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a68e:	e03d      	b.n	800a70c <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	6899      	ldr	r1, [r3, #8]
 800a698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a69a:	440b      	add	r3, r1
 800a69c:	4413      	add	r3, r2
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	2b45      	cmp	r3, #69	@ 0x45
 800a6a2:	dc17      	bgt.n	800a6d4 <parse_number+0x84>
 800a6a4:	2b2b      	cmp	r3, #43	@ 0x2b
 800a6a6:	db40      	blt.n	800a72a <parse_number+0xda>
 800a6a8:	3b2b      	subs	r3, #43	@ 0x2b
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	409a      	lsls	r2, r3
 800a6ae:	4b4c      	ldr	r3, [pc, #304]	@ (800a7e0 <parse_number+0x190>)
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	bf14      	ite	ne
 800a6b6:	2301      	movne	r3, #1
 800a6b8:	2300      	moveq	r3, #0
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d10b      	bne.n	800a6d8 <parse_number+0x88>
 800a6c0:	f002 0308 	and.w	r3, r2, #8
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	bf14      	ite	ne
 800a6c8:	2301      	movne	r3, #1
 800a6ca:	2300      	moveq	r3, #0
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d111      	bne.n	800a6f6 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800a6d2:	e02a      	b.n	800a72a <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800a6d4:	2b65      	cmp	r3, #101	@ 0x65
 800a6d6:	d128      	bne.n	800a72a <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	6899      	ldr	r1, [r3, #8]
 800a6e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6e2:	440b      	add	r3, r1
 800a6e4:	4413      	add	r3, r2
 800a6e6:	7819      	ldrb	r1, [r3, #0]
 800a6e8:	f107 0208 	add.w	r2, r7, #8
 800a6ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6ee:	4413      	add	r3, r2
 800a6f0:	460a      	mov	r2, r1
 800a6f2:	701a      	strb	r2, [r3, #0]
                break;
 800a6f4:	e007      	b.n	800a706 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800a6f6:	f107 0208 	add.w	r2, r7, #8
 800a6fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800a702:	701a      	strb	r2, [r3, #0]
                break;
 800a704:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800a706:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a708:	3301      	adds	r3, #1
 800a70a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a70c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a70e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a710:	d80d      	bhi.n	800a72e <parse_number+0xde>
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d00a      	beq.n	800a72e <parse_number+0xde>
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	689a      	ldr	r2, [r3, #8]
 800a71c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a71e:	441a      	add	r2, r3
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	429a      	cmp	r2, r3
 800a726:	d3b3      	bcc.n	800a690 <parse_number+0x40>
        }
    }
loop_end:
 800a728:	e001      	b.n	800a72e <parse_number+0xde>
                goto loop_end;
 800a72a:	bf00      	nop
 800a72c:	e000      	b.n	800a730 <parse_number+0xe0>
loop_end:
 800a72e:	bf00      	nop
    number_c_string[i] = '\0';
 800a730:	f107 0208 	add.w	r2, r7, #8
 800a734:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a736:	4413      	add	r3, r2
 800a738:	2200      	movs	r2, #0
 800a73a:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800a73c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800a740:	f107 0308 	add.w	r3, r7, #8
 800a744:	4611      	mov	r1, r2
 800a746:	4618      	mov	r0, r3
 800a748:	f003 fe5e 	bl	800e408 <strtod>
 800a74c:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 800a750:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a752:	f107 0308 	add.w	r3, r7, #8
 800a756:	429a      	cmp	r2, r3
 800a758:	d101      	bne.n	800a75e <parse_number+0x10e>
    {
        return false; /* parse_error */
 800a75a:	2300      	movs	r3, #0
 800a75c:	e036      	b.n	800a7cc <parse_number+0x17c>
    }

    item->valuedouble = number;
 800a75e:	6879      	ldr	r1, [r7, #4]
 800a760:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a764:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 800a768:	a31b      	add	r3, pc, #108	@ (adr r3, 800a7d8 <parse_number+0x188>)
 800a76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a772:	f7f6 f9df 	bl	8000b34 <__aeabi_dcmpge>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d004      	beq.n	800a786 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800a782:	615a      	str	r2, [r3, #20]
 800a784:	e015      	b.n	800a7b2 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800a786:	f04f 0200 	mov.w	r2, #0
 800a78a:	4b16      	ldr	r3, [pc, #88]	@ (800a7e4 <parse_number+0x194>)
 800a78c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a790:	f7f6 f9c6 	bl	8000b20 <__aeabi_dcmple>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d004      	beq.n	800a7a4 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a7a0:	615a      	str	r2, [r3, #20]
 800a7a2:	e006      	b.n	800a7b2 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800a7a4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800a7a8:	f7f6 f9ee 	bl	8000b88 <__aeabi_d2iz>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2208      	movs	r2, #8
 800a7b6:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a7be:	f107 0208 	add.w	r2, r7, #8
 800a7c2:	1a8a      	subs	r2, r1, r2
 800a7c4:	441a      	add	r2, r3
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	609a      	str	r2, [r3, #8]
    return true;
 800a7ca:	2301      	movs	r3, #1
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3760      	adds	r7, #96	@ 0x60
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	f3af 8000 	nop.w
 800a7d8:	ffc00000 	.word	0xffc00000
 800a7dc:	41dfffff 	.word	0x41dfffff
 800a7e0:	04007fe5 	.word	0x04007fe5
 800a7e4:	c1e00000 	.word	0xc1e00000

0800a7e8 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d003      	beq.n	800a808 <ensure+0x20>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d101      	bne.n	800a80c <ensure+0x24>
    {
        return NULL;
 800a808:	2300      	movs	r3, #0
 800a80a:	e083      	b.n	800a914 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d007      	beq.n	800a824 <ensure+0x3c>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	689a      	ldr	r2, [r3, #8]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d301      	bcc.n	800a824 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 800a820:	2300      	movs	r3, #0
 800a822:	e077      	b.n	800a914 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	da01      	bge.n	800a82e <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800a82a:	2300      	movs	r3, #0
 800a82c:	e072      	b.n	800a914 <ensure+0x12c>
    }

    needed += p->offset + 1;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	689a      	ldr	r2, [r3, #8]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	4413      	add	r3, r2
 800a836:	3301      	adds	r3, #1
 800a838:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	429a      	cmp	r2, r3
 800a842:	d805      	bhi.n	800a850 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	4413      	add	r3, r2
 800a84e:	e061      	b.n	800a914 <ensure+0x12c>
    }

    if (p->noalloc) {
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d001      	beq.n	800a85c <ensure+0x74>
        return NULL;
 800a858:	2300      	movs	r3, #0
 800a85a:	e05b      	b.n	800a914 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a862:	d308      	bcc.n	800a876 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	db03      	blt.n	800a872 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800a86a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a86e:	60bb      	str	r3, [r7, #8]
 800a870:	e004      	b.n	800a87c <ensure+0x94>
        }
        else
        {
            return NULL;
 800a872:	2300      	movs	r3, #0
 800a874:	e04e      	b.n	800a914 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	005b      	lsls	r3, r3, #1
 800a87a:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a1b      	ldr	r3, [r3, #32]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d018      	beq.n	800a8b6 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a1b      	ldr	r3, [r3, #32]
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	6812      	ldr	r2, [r2, #0]
 800a88c:	68b9      	ldr	r1, [r7, #8]
 800a88e:	4610      	mov	r0, r2
 800a890:	4798      	blx	r3
 800a892:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d132      	bne.n	800a900 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	69db      	ldr	r3, [r3, #28]
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	6812      	ldr	r2, [r2, #0]
 800a8a2:	4610      	mov	r0, r2
 800a8a4:	4798      	blx	r3
            p->length = 0;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	601a      	str	r2, [r3, #0]

            return NULL;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	e02e      	b.n	800a914 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	68b8      	ldr	r0, [r7, #8]
 800a8bc:	4798      	blx	r3
 800a8be:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10d      	bne.n	800a8e2 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	69db      	ldr	r3, [r3, #28]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	6812      	ldr	r2, [r2, #0]
 800a8ce:	4610      	mov	r0, r2
 800a8d0:	4798      	blx	r3
            p->length = 0;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	601a      	str	r2, [r3, #0]

            return NULL;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	e018      	b.n	800a914 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6819      	ldr	r1, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f004 fd3b 	bl	800f36a <memcpy>
        p->hooks.deallocate(p->buffer);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	6812      	ldr	r2, [r2, #0]
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	4798      	blx	r3
    }
    p->length = newsize;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	4413      	add	r3, r2
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800a91c:	b590      	push	{r4, r7, lr}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 800a924:	2300      	movs	r3, #0
 800a926:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d013      	beq.n	800a956 <update_offset+0x3a>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00f      	beq.n	800a956 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	4413      	add	r3, r2
 800a940:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	689c      	ldr	r4, [r3, #8]
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f7f5 fcaa 	bl	80002a0 <strlen>
 800a94c:	4603      	mov	r3, r0
 800a94e:	18e2      	adds	r2, r4, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	609a      	str	r2, [r3, #8]
 800a954:	e000      	b.n	800a958 <update_offset+0x3c>
        return;
 800a956:	bf00      	nop
}
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd90      	pop	{r4, r7, pc}
	...

0800a960 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 800a960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a964:	b087      	sub	sp, #28
 800a966:	af00      	add	r7, sp, #0
 800a968:	ed87 0b02 	vstr	d0, [r7, #8]
 800a96c:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 800a970:	68b8      	ldr	r0, [r7, #8]
 800a972:	68fe      	ldr	r6, [r7, #12]
 800a974:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 800a978:	683a      	ldr	r2, [r7, #0]
 800a97a:	687e      	ldr	r6, [r7, #4]
 800a97c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800a980:	f7f6 f8e2 	bl	8000b48 <__aeabi_dcmpgt>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d004      	beq.n	800a994 <compare_double+0x34>
 800a98a:	68bc      	ldr	r4, [r7, #8]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800a992:	e003      	b.n	800a99c <compare_double+0x3c>
 800a994:	683c      	ldr	r4, [r7, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800a99c:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 800a9a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a9a8:	f7f5 fc86 	bl	80002b8 <__aeabi_dsub>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4690      	mov	r8, r2
 800a9b2:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800a9b6:	f04f 0200 	mov.w	r2, #0
 800a9ba:	4b0c      	ldr	r3, [pc, #48]	@ (800a9ec <compare_double+0x8c>)
 800a9bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a9c0:	f7f5 fe32 	bl	8000628 <__aeabi_dmul>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	2101      	movs	r1, #1
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	4640      	mov	r0, r8
 800a9ce:	4649      	mov	r1, r9
 800a9d0:	f7f6 f8a6 	bl	8000b20 <__aeabi_dcmple>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <compare_double+0x7e>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	461c      	mov	r4, r3
 800a9de:	b2e3      	uxtb	r3, r4
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	371c      	adds	r7, #28
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9ea:	bf00      	nop
 800a9ec:	3cb00000 	.word	0x3cb00000

0800a9f0 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 800a9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9f2:	b093      	sub	sp, #76	@ 0x4c
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800aa04:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 800aa10:	2300      	movs	r3, #0
 800aa12:	617b      	str	r3, [r7, #20]
 800aa14:	f107 0318 	add.w	r3, r7, #24
 800aa18:	2200      	movs	r2, #0
 800aa1a:	601a      	str	r2, [r3, #0]
 800aa1c:	605a      	str	r2, [r3, #4]
 800aa1e:	609a      	str	r2, [r3, #8]
 800aa20:	60da      	str	r2, [r3, #12]
 800aa22:	611a      	str	r2, [r3, #16]
 800aa24:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 800aa26:	f7ff fe0b 	bl	800a640 <get_decimal_point>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 800aa30:	f04f 0200 	mov.w	r2, #0
 800aa34:	f04f 0300 	mov.w	r3, #0
 800aa38:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d101      	bne.n	800aa46 <print_number+0x56>
    {
        return false;
 800aa42:	2300      	movs	r3, #0
 800aa44:	e0b4      	b.n	800abb0 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800aa46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800aa4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800aa4e:	f7f6 f885 	bl	8000b5c <__aeabi_dcmpun>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d121      	bne.n	800aa9c <print_number+0xac>
 800aa58:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 800aa5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa5c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800aa60:	2301      	movs	r3, #1
 800aa62:	461e      	mov	r6, r3
 800aa64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa68:	4b53      	ldr	r3, [pc, #332]	@ (800abb8 <print_number+0x1c8>)
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	f7f6 f875 	bl	8000b5c <__aeabi_dcmpun>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10b      	bne.n	800aa90 <print_number+0xa0>
 800aa78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa7c:	4b4e      	ldr	r3, [pc, #312]	@ (800abb8 <print_number+0x1c8>)
 800aa7e:	4620      	mov	r0, r4
 800aa80:	4629      	mov	r1, r5
 800aa82:	f7f6 f84d 	bl	8000b20 <__aeabi_dcmple>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d101      	bne.n	800aa90 <print_number+0xa0>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	461e      	mov	r6, r3
 800aa90:	b2f3      	uxtb	r3, r6
 800aa92:	f083 0301 	eor.w	r3, r3, #1
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d007      	beq.n	800aaac <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 800aa9c:	f107 0314 	add.w	r3, r7, #20
 800aaa0:	4946      	ldr	r1, [pc, #280]	@ (800abbc <print_number+0x1cc>)
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f004 fa46 	bl	800ef34 <siprintf>
 800aaa8:	6478      	str	r0, [r7, #68]	@ 0x44
 800aaaa:	e03f      	b.n	800ab2c <print_number+0x13c>
    }
	else if(d == (double)item->valueint)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7f5 fd4f 	bl	8000554 <__aeabi_i2d>
 800aab6:	4602      	mov	r2, r0
 800aab8:	460b      	mov	r3, r1
 800aaba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800aabe:	f7f6 f81b 	bl	8000af8 <__aeabi_dcmpeq>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d009      	beq.n	800aadc <print_number+0xec>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	695a      	ldr	r2, [r3, #20]
 800aacc:	f107 0314 	add.w	r3, r7, #20
 800aad0:	493b      	ldr	r1, [pc, #236]	@ (800abc0 <print_number+0x1d0>)
 800aad2:	4618      	mov	r0, r3
 800aad4:	f004 fa2e 	bl	800ef34 <siprintf>
 800aad8:	6478      	str	r0, [r7, #68]	@ 0x44
 800aada:	e027      	b.n	800ab2c <print_number+0x13c>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 800aadc:	f107 0014 	add.w	r0, r7, #20
 800aae0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800aae4:	4937      	ldr	r1, [pc, #220]	@ (800abc4 <print_number+0x1d4>)
 800aae6:	f004 fa25 	bl	800ef34 <siprintf>
 800aaea:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 800aaec:	f107 0208 	add.w	r2, r7, #8
 800aaf0:	f107 0314 	add.w	r3, r7, #20
 800aaf4:	4934      	ldr	r1, [pc, #208]	@ (800abc8 <print_number+0x1d8>)
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f004 fa3c 	bl	800ef74 <siscanf>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d10c      	bne.n	800ab1c <print_number+0x12c>
 800ab02:	ed97 7b02 	vldr	d7, [r7, #8]
 800ab06:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 800ab0a:	eeb0 0a47 	vmov.f32	s0, s14
 800ab0e:	eef0 0a67 	vmov.f32	s1, s15
 800ab12:	f7ff ff25 	bl	800a960 <compare_double>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d107      	bne.n	800ab2c <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800ab1c:	f107 0014 	add.w	r0, r7, #20
 800ab20:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ab24:	4929      	ldr	r1, [pc, #164]	@ (800abcc <print_number+0x1dc>)
 800ab26:	f004 fa05 	bl	800ef34 <siprintf>
 800ab2a:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800ab2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	db02      	blt.n	800ab38 <print_number+0x148>
 800ab32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab34:	2b19      	cmp	r3, #25
 800ab36:	dd01      	ble.n	800ab3c <print_number+0x14c>
    {
        return false;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	e039      	b.n	800abb0 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800ab3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab3e:	3301      	adds	r3, #1
 800ab40:	4619      	mov	r1, r3
 800ab42:	6838      	ldr	r0, [r7, #0]
 800ab44:	f7ff fe50 	bl	800a7e8 <ensure>
 800ab48:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 800ab4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d101      	bne.n	800ab54 <print_number+0x164>
    {
        return false;
 800ab50:	2300      	movs	r3, #0
 800ab52:	e02d      	b.n	800abb0 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800ab54:	2300      	movs	r3, #0
 800ab56:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab58:	e01a      	b.n	800ab90 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 800ab5a:	f107 0214 	add.w	r2, r7, #20
 800ab5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab60:	4413      	add	r3, r2
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d105      	bne.n	800ab78 <print_number+0x188>
        {
            output_pointer[i] = '.';
 800ab6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab70:	4413      	add	r3, r2
 800ab72:	222e      	movs	r2, #46	@ 0x2e
 800ab74:	701a      	strb	r2, [r3, #0]
            continue;
 800ab76:	e008      	b.n	800ab8a <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 800ab78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab7c:	4413      	add	r3, r2
 800ab7e:	f107 0114 	add.w	r1, r7, #20
 800ab82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab84:	440a      	add	r2, r1
 800ab86:	7812      	ldrb	r2, [r2, #0]
 800ab88:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800ab8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d3e0      	bcc.n	800ab5a <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 800ab98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ab9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab9c:	4413      	add	r3, r2
 800ab9e:	2200      	movs	r2, #0
 800aba0:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	689a      	ldr	r2, [r3, #8]
 800aba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aba8:	441a      	add	r2, r3
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	609a      	str	r2, [r3, #8]

    return true;
 800abae:	2301      	movs	r3, #1
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	374c      	adds	r7, #76	@ 0x4c
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abb8:	7fefffff 	.word	0x7fefffff
 800abbc:	0801365c 	.word	0x0801365c
 800abc0:	08013664 	.word	0x08013664
 800abc4:	08013668 	.word	0x08013668
 800abc8:	08013670 	.word	0x08013670
 800abcc:	08013674 	.word	0x08013674

0800abd0 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b085      	sub	sp, #20
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800abdc:	2300      	movs	r3, #0
 800abde:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 800abe0:	2300      	movs	r3, #0
 800abe2:	60bb      	str	r3, [r7, #8]
 800abe4:	e04c      	b.n	800ac80 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	4413      	add	r3, r2
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	2b2f      	cmp	r3, #47	@ 0x2f
 800abf0:	d90f      	bls.n	800ac12 <parse_hex4+0x42>
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	4413      	add	r3, r2
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	2b39      	cmp	r3, #57	@ 0x39
 800abfc:	d809      	bhi.n	800ac12 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	4413      	add	r3, r2
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	461a      	mov	r2, r3
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	3b30      	subs	r3, #48	@ 0x30
 800ac0e:	60fb      	str	r3, [r7, #12]
 800ac10:	e02d      	b.n	800ac6e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	4413      	add	r3, r2
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	2b40      	cmp	r3, #64	@ 0x40
 800ac1c:	d90f      	bls.n	800ac3e <parse_hex4+0x6e>
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	4413      	add	r3, r2
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	2b46      	cmp	r3, #70	@ 0x46
 800ac28:	d809      	bhi.n	800ac3e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	4413      	add	r3, r2
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	461a      	mov	r2, r3
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	4413      	add	r3, r2
 800ac38:	3b37      	subs	r3, #55	@ 0x37
 800ac3a:	60fb      	str	r3, [r7, #12]
 800ac3c:	e017      	b.n	800ac6e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	4413      	add	r3, r2
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	2b60      	cmp	r3, #96	@ 0x60
 800ac48:	d90f      	bls.n	800ac6a <parse_hex4+0x9a>
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	4413      	add	r3, r2
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	2b66      	cmp	r3, #102	@ 0x66
 800ac54:	d809      	bhi.n	800ac6a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	4413      	add	r3, r2
 800ac64:	3b57      	subs	r3, #87	@ 0x57
 800ac66:	60fb      	str	r3, [r7, #12]
 800ac68:	e001      	b.n	800ac6e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	e00c      	b.n	800ac88 <parse_hex4+0xb8>
        }

        if (i < 3)
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	d802      	bhi.n	800ac7a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	011b      	lsls	r3, r3, #4
 800ac78:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	60bb      	str	r3, [r7, #8]
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	d9af      	bls.n	800abe6 <parse_hex4+0x16>
        }
    }

    return h;
 800ac86:	68fb      	ldr	r3, [r7, #12]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3714      	adds	r7, #20
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b08a      	sub	sp, #40	@ 0x28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 800aca0:	2300      	movs	r3, #0
 800aca2:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800acac:	2300      	movs	r3, #0
 800acae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 800acb8:	2300      	movs	r3, #0
 800acba:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 800acbe:	2300      	movs	r3, #0
 800acc0:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 800acc4:	68ba      	ldr	r2, [r7, #8]
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	2b05      	cmp	r3, #5
 800accc:	f340 80b7 	ble.w	800ae3e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	3302      	adds	r3, #2
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7ff ff7b 	bl	800abd0 <parse_hex4>
 800acda:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800ace2:	d304      	bcc.n	800acee <utf16_literal_to_utf8+0x5a>
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800acea:	f0c0 80aa 	bcc.w	800ae42 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800acf4:	d337      	bcc.n	800ad66 <utf16_literal_to_utf8+0xd2>
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800acfc:	d233      	bcs.n	800ad66 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	3306      	adds	r3, #6
 800ad02:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800ad04:	2300      	movs	r3, #0
 800ad06:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800ad08:	230c      	movs	r3, #12
 800ad0a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	2b05      	cmp	r3, #5
 800ad16:	f340 8096 	ble.w	800ae46 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	2b5c      	cmp	r3, #92	@ 0x5c
 800ad20:	f040 8093 	bne.w	800ae4a <utf16_literal_to_utf8+0x1b6>
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	3301      	adds	r3, #1
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	2b75      	cmp	r3, #117	@ 0x75
 800ad2c:	f040 808d 	bne.w	800ae4a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	3302      	adds	r3, #2
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7ff ff4b 	bl	800abd0 <parse_hex4>
 800ad3a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800ad42:	f0c0 8084 	bcc.w	800ae4e <utf16_literal_to_utf8+0x1ba>
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800ad4c:	d27f      	bcs.n	800ae4e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	029a      	lsls	r2, r3, #10
 800ad52:	4b43      	ldr	r3, [pc, #268]	@ (800ae60 <utf16_literal_to_utf8+0x1cc>)
 800ad54:	4013      	ands	r3, r2
 800ad56:	693a      	ldr	r2, [r7, #16]
 800ad58:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800ad62:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 800ad64:	e004      	b.n	800ad70 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800ad66:	2306      	movs	r3, #6
 800ad68:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800ad70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad72:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad74:	d803      	bhi.n	800ad7e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800ad76:	2301      	movs	r3, #1
 800ad78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad7c:	e01f      	b.n	800adbe <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad84:	d206      	bcs.n	800ad94 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800ad86:	2302      	movs	r3, #2
 800ad88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800ad8c:	23c0      	movs	r3, #192	@ 0xc0
 800ad8e:	f887 3020 	strb.w	r3, [r7, #32]
 800ad92:	e014      	b.n	800adbe <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800ad94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad9a:	d206      	bcs.n	800adaa <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800ad9c:	2303      	movs	r3, #3
 800ad9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800ada2:	23e0      	movs	r3, #224	@ 0xe0
 800ada4:	f887 3020 	strb.w	r3, [r7, #32]
 800ada8:	e009      	b.n	800adbe <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800adaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adac:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800adb0:	d24f      	bcs.n	800ae52 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800adb2:	2304      	movs	r3, #4
 800adb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800adb8:	23f0      	movs	r3, #240	@ 0xf0
 800adba:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800adbe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800adc2:	3b01      	subs	r3, #1
 800adc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800adc8:	e015      	b.n	800adf6 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800adca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800add2:	b2da      	uxtb	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6819      	ldr	r1, [r3, #0]
 800add8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800addc:	440b      	add	r3, r1
 800adde:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ade2:	b2d2      	uxtb	r2, r2
 800ade4:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800ade6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade8:	099b      	lsrs	r3, r3, #6
 800adea:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800adec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800adf0:	3b01      	subs	r3, #1
 800adf2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800adf6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d1e5      	bne.n	800adca <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800adfe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d909      	bls.n	800ae1a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800ae06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae08:	b2d9      	uxtb	r1, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ae12:	430a      	orrs	r2, r1
 800ae14:	b2d2      	uxtb	r2, r2
 800ae16:	701a      	strb	r2, [r3, #0]
 800ae18:	e007      	b.n	800ae2a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ae26:	b2d2      	uxtb	r2, r2
 800ae28:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae32:	441a      	add	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800ae38:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ae3c:	e00b      	b.n	800ae56 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800ae3e:	bf00      	nop
 800ae40:	e008      	b.n	800ae54 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800ae42:	bf00      	nop
 800ae44:	e006      	b.n	800ae54 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800ae46:	bf00      	nop
 800ae48:	e004      	b.n	800ae54 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800ae4a:	bf00      	nop
 800ae4c:	e002      	b.n	800ae54 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800ae4e:	bf00      	nop
 800ae50:	e000      	b.n	800ae54 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800ae52:	bf00      	nop

fail:
    return 0;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3728      	adds	r7, #40	@ 0x28
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	000ffc00 	.word	0x000ffc00

0800ae64 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b08a      	sub	sp, #40	@ 0x28
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	3301      	adds	r3, #1
 800ae78:	4413      	add	r3, r2
 800ae7a:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	3301      	adds	r3, #1
 800ae86:	4413      	add	r3, r2
 800ae88:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	2b22      	cmp	r3, #34	@ 0x22
 800aea0:	f040 8103 	bne.w	800b0aa <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800aea4:	2300      	movs	r3, #0
 800aea6:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800aeac:	e017      	b.n	800aede <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800aeae:	6a3b      	ldr	r3, [r7, #32]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	2b5c      	cmp	r3, #92	@ 0x5c
 800aeb4:	d110      	bne.n	800aed8 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	1c5a      	adds	r2, r3, #1
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	1ad3      	subs	r3, r2, r3
 800aec0:	461a      	mov	r2, r3
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	f080 80f1 	bcs.w	800b0ae <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	3301      	adds	r3, #1
 800aed0:	61bb      	str	r3, [r7, #24]
                input_end++;
 800aed2:	6a3b      	ldr	r3, [r7, #32]
 800aed4:	3301      	adds	r3, #1
 800aed6:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800aed8:	6a3b      	ldr	r3, [r7, #32]
 800aeda:	3301      	adds	r3, #1
 800aedc:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	6a3a      	ldr	r2, [r7, #32]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	461a      	mov	r2, r3
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d203      	bcs.n	800aef8 <parse_string+0x94>
 800aef0:	6a3b      	ldr	r3, [r7, #32]
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	2b22      	cmp	r3, #34	@ 0x22
 800aef6:	d1da      	bne.n	800aeae <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6a3a      	ldr	r2, [r7, #32]
 800aefe:	1ad3      	subs	r3, r2, r3
 800af00:	461a      	mov	r2, r3
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	429a      	cmp	r2, r3
 800af08:	f080 80d3 	bcs.w	800b0b2 <parse_string+0x24e>
 800af0c:	6a3b      	ldr	r3, [r7, #32]
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	2b22      	cmp	r3, #34	@ 0x22
 800af12:	f040 80ce 	bne.w	800b0b2 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	4413      	add	r3, r2
 800af20:	6a3a      	ldr	r2, [r7, #32]
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	461a      	mov	r2, r3
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	3201      	adds	r2, #1
 800af34:	4610      	mov	r0, r2
 800af36:	4798      	blx	r3
 800af38:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f000 80ba 	beq.w	800b0b6 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800af46:	e094      	b.n	800b072 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 800af48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	2b5c      	cmp	r3, #92	@ 0x5c
 800af4e:	d008      	beq.n	800af62 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 800af50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af52:	1c53      	adds	r3, r2, #1
 800af54:	627b      	str	r3, [r7, #36]	@ 0x24
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	1c59      	adds	r1, r3, #1
 800af5a:	60f9      	str	r1, [r7, #12]
 800af5c:	7812      	ldrb	r2, [r2, #0]
 800af5e:	701a      	strb	r2, [r3, #0]
 800af60:	e087      	b.n	800b072 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800af62:	2302      	movs	r3, #2
 800af64:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800af66:	6a3a      	ldr	r2, [r7, #32]
 800af68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f340 80a4 	ble.w	800b0ba <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800af72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af74:	3301      	adds	r3, #1
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	2b75      	cmp	r3, #117	@ 0x75
 800af7a:	f300 80a0 	bgt.w	800b0be <parse_string+0x25a>
 800af7e:	2b5c      	cmp	r3, #92	@ 0x5c
 800af80:	da04      	bge.n	800af8c <parse_string+0x128>
 800af82:	2b22      	cmp	r3, #34	@ 0x22
 800af84:	d05c      	beq.n	800b040 <parse_string+0x1dc>
 800af86:	2b2f      	cmp	r3, #47	@ 0x2f
 800af88:	d05a      	beq.n	800b040 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800af8a:	e098      	b.n	800b0be <parse_string+0x25a>
            switch (input_pointer[1])
 800af8c:	3b5c      	subs	r3, #92	@ 0x5c
 800af8e:	2b19      	cmp	r3, #25
 800af90:	f200 8095 	bhi.w	800b0be <parse_string+0x25a>
 800af94:	a201      	add	r2, pc, #4	@ (adr r2, 800af9c <parse_string+0x138>)
 800af96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9a:	bf00      	nop
 800af9c:	0800b041 	.word	0x0800b041
 800afa0:	0800b0bf 	.word	0x0800b0bf
 800afa4:	0800b0bf 	.word	0x0800b0bf
 800afa8:	0800b0bf 	.word	0x0800b0bf
 800afac:	0800b0bf 	.word	0x0800b0bf
 800afb0:	0800b0bf 	.word	0x0800b0bf
 800afb4:	0800b005 	.word	0x0800b005
 800afb8:	0800b0bf 	.word	0x0800b0bf
 800afbc:	0800b0bf 	.word	0x0800b0bf
 800afc0:	0800b0bf 	.word	0x0800b0bf
 800afc4:	0800b011 	.word	0x0800b011
 800afc8:	0800b0bf 	.word	0x0800b0bf
 800afcc:	0800b0bf 	.word	0x0800b0bf
 800afd0:	0800b0bf 	.word	0x0800b0bf
 800afd4:	0800b0bf 	.word	0x0800b0bf
 800afd8:	0800b0bf 	.word	0x0800b0bf
 800afdc:	0800b0bf 	.word	0x0800b0bf
 800afe0:	0800b0bf 	.word	0x0800b0bf
 800afe4:	0800b01d 	.word	0x0800b01d
 800afe8:	0800b0bf 	.word	0x0800b0bf
 800afec:	0800b0bf 	.word	0x0800b0bf
 800aff0:	0800b0bf 	.word	0x0800b0bf
 800aff4:	0800b029 	.word	0x0800b029
 800aff8:	0800b0bf 	.word	0x0800b0bf
 800affc:	0800b035 	.word	0x0800b035
 800b000:	0800b051 	.word	0x0800b051
                    *output_pointer++ = '\b';
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	1c5a      	adds	r2, r3, #1
 800b008:	60fa      	str	r2, [r7, #12]
 800b00a:	2208      	movs	r2, #8
 800b00c:	701a      	strb	r2, [r3, #0]
                    break;
 800b00e:	e02c      	b.n	800b06a <parse_string+0x206>
                    *output_pointer++ = '\f';
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	1c5a      	adds	r2, r3, #1
 800b014:	60fa      	str	r2, [r7, #12]
 800b016:	220c      	movs	r2, #12
 800b018:	701a      	strb	r2, [r3, #0]
                    break;
 800b01a:	e026      	b.n	800b06a <parse_string+0x206>
                    *output_pointer++ = '\n';
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	1c5a      	adds	r2, r3, #1
 800b020:	60fa      	str	r2, [r7, #12]
 800b022:	220a      	movs	r2, #10
 800b024:	701a      	strb	r2, [r3, #0]
                    break;
 800b026:	e020      	b.n	800b06a <parse_string+0x206>
                    *output_pointer++ = '\r';
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	1c5a      	adds	r2, r3, #1
 800b02c:	60fa      	str	r2, [r7, #12]
 800b02e:	220d      	movs	r2, #13
 800b030:	701a      	strb	r2, [r3, #0]
                    break;
 800b032:	e01a      	b.n	800b06a <parse_string+0x206>
                    *output_pointer++ = '\t';
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	1c5a      	adds	r2, r3, #1
 800b038:	60fa      	str	r2, [r7, #12]
 800b03a:	2209      	movs	r2, #9
 800b03c:	701a      	strb	r2, [r3, #0]
                    break;
 800b03e:	e014      	b.n	800b06a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 800b040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b042:	1c5a      	adds	r2, r3, #1
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	1c59      	adds	r1, r3, #1
 800b048:	60f9      	str	r1, [r7, #12]
 800b04a:	7812      	ldrb	r2, [r2, #0]
 800b04c:	701a      	strb	r2, [r3, #0]
                    break;
 800b04e:	e00c      	b.n	800b06a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 800b050:	f107 030c 	add.w	r3, r7, #12
 800b054:	461a      	mov	r2, r3
 800b056:	6a39      	ldr	r1, [r7, #32]
 800b058:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b05a:	f7ff fe1b 	bl	800ac94 <utf16_literal_to_utf8>
 800b05e:	4603      	mov	r3, r0
 800b060:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800b062:	7dfb      	ldrb	r3, [r7, #23]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d02c      	beq.n	800b0c2 <parse_string+0x25e>
                    break;
 800b068:	bf00      	nop
            }
            input_pointer += sequence_length;
 800b06a:	7dfb      	ldrb	r3, [r7, #23]
 800b06c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b06e:	4413      	add	r3, r2
 800b070:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800b072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b074:	6a3b      	ldr	r3, [r7, #32]
 800b076:	429a      	cmp	r2, r3
 800b078:	f4ff af66 	bcc.w	800af48 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2210      	movs	r2, #16
 800b086:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	69fa      	ldr	r2, [r7, #28]
 800b08c:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	6a3a      	ldr	r2, [r7, #32]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	461a      	mov	r2, r3
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	1c5a      	adds	r2, r3, #1
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	609a      	str	r2, [r3, #8]

    return true;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e01e      	b.n	800b0e8 <parse_string+0x284>
        goto fail;
 800b0aa:	bf00      	nop
 800b0ac:	e00a      	b.n	800b0c4 <parse_string+0x260>
                    goto fail;
 800b0ae:	bf00      	nop
 800b0b0:	e008      	b.n	800b0c4 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800b0b2:	bf00      	nop
 800b0b4:	e006      	b.n	800b0c4 <parse_string+0x260>
            goto fail; /* allocation failure */
 800b0b6:	bf00      	nop
 800b0b8:	e004      	b.n	800b0c4 <parse_string+0x260>
                goto fail;
 800b0ba:	bf00      	nop
 800b0bc:	e002      	b.n	800b0c4 <parse_string+0x260>
                    goto fail;
 800b0be:	bf00      	nop
 800b0c0:	e000      	b.n	800b0c4 <parse_string+0x260>
                        goto fail;
 800b0c2:	bf00      	nop

fail:
    if (output != NULL)
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d003      	beq.n	800b0d2 <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	69f8      	ldr	r0, [r7, #28]
 800b0d0:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 800b0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d006      	beq.n	800b0e6 <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	609a      	str	r2, [r3, #8]
    }

    return false;
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3728      	adds	r7, #40	@ 0x28
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 800b0fe:	2300      	movs	r3, #0
 800b100:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800b102:	2300      	movs	r3, #0
 800b104:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800b106:	2300      	movs	r3, #0
 800b108:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d101      	bne.n	800b118 <print_string_ptr+0x28>
    {
        return false;
 800b114:	2300      	movs	r3, #0
 800b116:	e110      	b.n	800b33a <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d111      	bne.n	800b142 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 800b11e:	2103      	movs	r1, #3
 800b120:	6838      	ldr	r0, [r7, #0]
 800b122:	f7ff fb61 	bl	800a7e8 <ensure>
 800b126:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d101      	bne.n	800b132 <print_string_ptr+0x42>
        {
            return false;
 800b12e:	2300      	movs	r3, #0
 800b130:	e103      	b.n	800b33a <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	4a83      	ldr	r2, [pc, #524]	@ (800b344 <print_string_ptr+0x254>)
 800b136:	8811      	ldrh	r1, [r2, #0]
 800b138:	7892      	ldrb	r2, [r2, #2]
 800b13a:	8019      	strh	r1, [r3, #0]
 800b13c:	709a      	strb	r2, [r3, #2]

        return true;
 800b13e:	2301      	movs	r3, #1
 800b140:	e0fb      	b.n	800b33a <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	61fb      	str	r3, [r7, #28]
 800b146:	e024      	b.n	800b192 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	2b22      	cmp	r3, #34	@ 0x22
 800b14e:	dc0f      	bgt.n	800b170 <print_string_ptr+0x80>
 800b150:	2b08      	cmp	r3, #8
 800b152:	db13      	blt.n	800b17c <print_string_ptr+0x8c>
 800b154:	3b08      	subs	r3, #8
 800b156:	4a7c      	ldr	r2, [pc, #496]	@ (800b348 <print_string_ptr+0x258>)
 800b158:	fa22 f303 	lsr.w	r3, r2, r3
 800b15c:	f003 0301 	and.w	r3, r3, #1
 800b160:	2b00      	cmp	r3, #0
 800b162:	bf14      	ite	ne
 800b164:	2301      	movne	r3, #1
 800b166:	2300      	moveq	r3, #0
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d102      	bne.n	800b174 <print_string_ptr+0x84>
 800b16e:	e005      	b.n	800b17c <print_string_ptr+0x8c>
 800b170:	2b5c      	cmp	r3, #92	@ 0x5c
 800b172:	d103      	bne.n	800b17c <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	3301      	adds	r3, #1
 800b178:	617b      	str	r3, [r7, #20]
                break;
 800b17a:	e007      	b.n	800b18c <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	2b1f      	cmp	r3, #31
 800b182:	d802      	bhi.n	800b18a <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	3305      	adds	r3, #5
 800b188:	617b      	str	r3, [r7, #20]
                }
                break;
 800b18a:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	3301      	adds	r3, #1
 800b190:	61fb      	str	r3, [r7, #28]
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1d6      	bne.n	800b148 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800b19a:	69fa      	ldr	r2, [r7, #28]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	3303      	adds	r3, #3
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	6838      	ldr	r0, [r7, #0]
 800b1b0:	f7ff fb1a 	bl	800a7e8 <ensure>
 800b1b4:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d101      	bne.n	800b1c0 <print_string_ptr+0xd0>
    {
        return false;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	e0bc      	b.n	800b33a <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d117      	bne.n	800b1f6 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2222      	movs	r2, #34	@ 0x22
 800b1ca:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	6879      	ldr	r1, [r7, #4]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f004 f8c8 	bl	800f36a <memcpy>
        output[output_length + 1] = '\"';
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	2222      	movs	r2, #34	@ 0x22
 800b1e4:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	3302      	adds	r3, #2
 800b1ea:	693a      	ldr	r2, [r7, #16]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	701a      	strb	r2, [r3, #0]

        return true;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e0a1      	b.n	800b33a <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	2222      	movs	r2, #34	@ 0x22
 800b1fa:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	3301      	adds	r3, #1
 800b200:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	61fb      	str	r3, [r7, #28]
 800b206:	e086      	b.n	800b316 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	2b1f      	cmp	r3, #31
 800b20e:	d90c      	bls.n	800b22a <print_string_ptr+0x13a>
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	2b22      	cmp	r3, #34	@ 0x22
 800b216:	d008      	beq.n	800b22a <print_string_ptr+0x13a>
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b21e:	d004      	beq.n	800b22a <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	781a      	ldrb	r2, [r3, #0]
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	701a      	strb	r2, [r3, #0]
 800b228:	e06f      	b.n	800b30a <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	1c5a      	adds	r2, r3, #1
 800b22e:	61ba      	str	r2, [r7, #24]
 800b230:	225c      	movs	r2, #92	@ 0x5c
 800b232:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	2b22      	cmp	r3, #34	@ 0x22
 800b23a:	dc3d      	bgt.n	800b2b8 <print_string_ptr+0x1c8>
 800b23c:	2b08      	cmp	r3, #8
 800b23e:	db59      	blt.n	800b2f4 <print_string_ptr+0x204>
 800b240:	3b08      	subs	r3, #8
 800b242:	2b1a      	cmp	r3, #26
 800b244:	d856      	bhi.n	800b2f4 <print_string_ptr+0x204>
 800b246:	a201      	add	r2, pc, #4	@ (adr r2, 800b24c <print_string_ptr+0x15c>)
 800b248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24c:	0800b2cd 	.word	0x0800b2cd
 800b250:	0800b2ed 	.word	0x0800b2ed
 800b254:	0800b2dd 	.word	0x0800b2dd
 800b258:	0800b2f5 	.word	0x0800b2f5
 800b25c:	0800b2d5 	.word	0x0800b2d5
 800b260:	0800b2e5 	.word	0x0800b2e5
 800b264:	0800b2f5 	.word	0x0800b2f5
 800b268:	0800b2f5 	.word	0x0800b2f5
 800b26c:	0800b2f5 	.word	0x0800b2f5
 800b270:	0800b2f5 	.word	0x0800b2f5
 800b274:	0800b2f5 	.word	0x0800b2f5
 800b278:	0800b2f5 	.word	0x0800b2f5
 800b27c:	0800b2f5 	.word	0x0800b2f5
 800b280:	0800b2f5 	.word	0x0800b2f5
 800b284:	0800b2f5 	.word	0x0800b2f5
 800b288:	0800b2f5 	.word	0x0800b2f5
 800b28c:	0800b2f5 	.word	0x0800b2f5
 800b290:	0800b2f5 	.word	0x0800b2f5
 800b294:	0800b2f5 	.word	0x0800b2f5
 800b298:	0800b2f5 	.word	0x0800b2f5
 800b29c:	0800b2f5 	.word	0x0800b2f5
 800b2a0:	0800b2f5 	.word	0x0800b2f5
 800b2a4:	0800b2f5 	.word	0x0800b2f5
 800b2a8:	0800b2f5 	.word	0x0800b2f5
 800b2ac:	0800b2f5 	.word	0x0800b2f5
 800b2b0:	0800b2f5 	.word	0x0800b2f5
 800b2b4:	0800b2c5 	.word	0x0800b2c5
 800b2b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800b2ba:	d11b      	bne.n	800b2f4 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	225c      	movs	r2, #92	@ 0x5c
 800b2c0:	701a      	strb	r2, [r3, #0]
                    break;
 800b2c2:	e022      	b.n	800b30a <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	2222      	movs	r2, #34	@ 0x22
 800b2c8:	701a      	strb	r2, [r3, #0]
                    break;
 800b2ca:	e01e      	b.n	800b30a <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	2262      	movs	r2, #98	@ 0x62
 800b2d0:	701a      	strb	r2, [r3, #0]
                    break;
 800b2d2:	e01a      	b.n	800b30a <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	2266      	movs	r2, #102	@ 0x66
 800b2d8:	701a      	strb	r2, [r3, #0]
                    break;
 800b2da:	e016      	b.n	800b30a <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	226e      	movs	r2, #110	@ 0x6e
 800b2e0:	701a      	strb	r2, [r3, #0]
                    break;
 800b2e2:	e012      	b.n	800b30a <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	2272      	movs	r2, #114	@ 0x72
 800b2e8:	701a      	strb	r2, [r3, #0]
                    break;
 800b2ea:	e00e      	b.n	800b30a <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	2274      	movs	r2, #116	@ 0x74
 800b2f0:	701a      	strb	r2, [r3, #0]
                    break;
 800b2f2:	e00a      	b.n	800b30a <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	4914      	ldr	r1, [pc, #80]	@ (800b34c <print_string_ptr+0x25c>)
 800b2fc:	69b8      	ldr	r0, [r7, #24]
 800b2fe:	f003 fe19 	bl	800ef34 <siprintf>
                    output_pointer += 4;
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	3304      	adds	r3, #4
 800b306:	61bb      	str	r3, [r7, #24]
                    break;
 800b308:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800b30a:	69fb      	ldr	r3, [r7, #28]
 800b30c:	3301      	adds	r3, #1
 800b30e:	61fb      	str	r3, [r7, #28]
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	3301      	adds	r3, #1
 800b314:	61bb      	str	r3, [r7, #24]
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f47f af74 	bne.w	800b208 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	3301      	adds	r3, #1
 800b324:	693a      	ldr	r2, [r7, #16]
 800b326:	4413      	add	r3, r2
 800b328:	2222      	movs	r2, #34	@ 0x22
 800b32a:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	3302      	adds	r3, #2
 800b330:	693a      	ldr	r2, [r7, #16]
 800b332:	4413      	add	r3, r2
 800b334:	2200      	movs	r2, #0
 800b336:	701a      	strb	r2, [r3, #0]

    return true;
 800b338:	2301      	movs	r3, #1
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3720      	adds	r7, #32
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	0801367c 	.word	0x0801367c
 800b348:	04000037 	.word	0x04000037
 800b34c:	08013680 	.word	0x08013680

0800b350 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	691b      	ldr	r3, [r3, #16]
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	4618      	mov	r0, r3
 800b362:	f7ff fec5 	bl	800b0f0 <print_string_ptr>
 800b366:	4603      	mov	r3, r0
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <buffer_skip_whitespace+0x16>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d101      	bne.n	800b38a <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800b386:	2300      	movs	r3, #0
 800b388:	e02c      	b.n	800b3e4 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d005      	beq.n	800b39c <buffer_skip_whitespace+0x2c>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	689a      	ldr	r2, [r3, #8]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d306      	bcc.n	800b3aa <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	e021      	b.n	800b3e4 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	1c5a      	adds	r2, r3, #1
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00d      	beq.n	800b3cc <buffer_skip_whitespace+0x5c>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	689a      	ldr	r2, [r3, #8]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d207      	bcs.n	800b3cc <buffer_skip_whitespace+0x5c>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	2b20      	cmp	r3, #32
 800b3ca:	d9e9      	bls.n	800b3a0 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	689a      	ldr	r2, [r3, #8]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d104      	bne.n	800b3e2 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	1e5a      	subs	r2, r3, #1
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800b3e2:	687b      	ldr	r3, [r7, #4]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d007      	beq.n	800b40e <skip_utf8_bom+0x1e>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d003      	beq.n	800b40e <skip_utf8_bom+0x1e>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d001      	beq.n	800b412 <skip_utf8_bom+0x22>
    {
        return NULL;
 800b40e:	2300      	movs	r3, #0
 800b410:	e01c      	b.n	800b44c <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d018      	beq.n	800b44a <skip_utf8_bom+0x5a>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	1d1a      	adds	r2, r3, #4
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	429a      	cmp	r2, r3
 800b424:	d211      	bcs.n	800b44a <skip_utf8_bom+0x5a>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	4413      	add	r3, r2
 800b430:	2203      	movs	r2, #3
 800b432:	4908      	ldr	r1, [pc, #32]	@ (800b454 <skip_utf8_bom+0x64>)
 800b434:	4618      	mov	r0, r3
 800b436:	f003 fea9 	bl	800f18c <strncmp>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d104      	bne.n	800b44a <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	1cda      	adds	r2, r3, #3
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800b44a:	687b      	ldr	r3, [r7, #4]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	08013688 	.word	0x08013688

0800b458 <cJSON_ParseWithLengthOpts>:
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
}

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08e      	sub	sp, #56	@ 0x38
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
 800b464:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800b466:	f107 0318 	add.w	r3, r7, #24
 800b46a:	2200      	movs	r2, #0
 800b46c:	601a      	str	r2, [r3, #0]
 800b46e:	605a      	str	r2, [r3, #4]
 800b470:	609a      	str	r2, [r3, #8]
 800b472:	60da      	str	r2, [r3, #12]
 800b474:	611a      	str	r2, [r3, #16]
 800b476:	615a      	str	r2, [r3, #20]
 800b478:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800b47a:	2300      	movs	r3, #0
 800b47c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 800b47e:	4b41      	ldr	r3, [pc, #260]	@ (800b584 <cJSON_ParseWithLengthOpts+0x12c>)
 800b480:	2200      	movs	r2, #0
 800b482:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800b484:	4b3f      	ldr	r3, [pc, #252]	@ (800b584 <cJSON_ParseWithLengthOpts+0x12c>)
 800b486:	2200      	movs	r2, #0
 800b488:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d042      	beq.n	800b516 <cJSON_ParseWithLengthOpts+0xbe>
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d03f      	beq.n	800b516 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 800b4a2:	4a39      	ldr	r2, [pc, #228]	@ (800b588 <cJSON_ParseWithLengthOpts+0x130>)
 800b4a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b4a8:	ca07      	ldmia	r2, {r0, r1, r2}
 800b4aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800b4ae:	4836      	ldr	r0, [pc, #216]	@ (800b588 <cJSON_ParseWithLengthOpts+0x130>)
 800b4b0:	f7ff f866 	bl	800a580 <cJSON_New_Item>
 800b4b4:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800b4b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d02e      	beq.n	800b51a <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800b4bc:	f107 0318 	add.w	r3, r7, #24
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f7ff ff95 	bl	800b3f0 <skip_utf8_bom>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7ff ff51 	bl	800b370 <buffer_skip_whitespace>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b4d4:	f000 f8fe 	bl	800b6d4 <parse_value>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d01f      	beq.n	800b51e <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00e      	beq.n	800b502 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 800b4e4:	f107 0318 	add.w	r3, r7, #24
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7ff ff41 	bl	800b370 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800b4ee:	6a3a      	ldr	r2, [r7, #32]
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d215      	bcs.n	800b522 <cJSON_ParseWithLengthOpts+0xca>
 800b4f6:	69ba      	ldr	r2, [r7, #24]
 800b4f8:	6a3b      	ldr	r3, [r7, #32]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d10f      	bne.n	800b522 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d004      	beq.n	800b512 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 800b508:	69ba      	ldr	r2, [r7, #24]
 800b50a:	6a3b      	ldr	r3, [r7, #32]
 800b50c:	441a      	add	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	601a      	str	r2, [r3, #0]
    }

    return item;
 800b512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b514:	e031      	b.n	800b57a <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 800b516:	bf00      	nop
 800b518:	e004      	b.n	800b524 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800b51a:	bf00      	nop
 800b51c:	e002      	b.n	800b524 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800b51e:	bf00      	nop
 800b520:	e000      	b.n	800b524 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800b522:	bf00      	nop

fail:
    if (item != NULL)
 800b524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b526:	2b00      	cmp	r3, #0
 800b528:	d002      	beq.n	800b530 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 800b52a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b52c:	f7ff f83e 	bl	800a5ac <cJSON_Delete>
    }

    if (value != NULL)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d020      	beq.n	800b578 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800b53a:	2300      	movs	r3, #0
 800b53c:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800b53e:	6a3a      	ldr	r2, [r7, #32]
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	429a      	cmp	r2, r3
 800b544:	d202      	bcs.n	800b54c <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800b546:	6a3b      	ldr	r3, [r7, #32]
 800b548:	617b      	str	r3, [r7, #20]
 800b54a:	e005      	b.n	800b558 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d002      	beq.n	800b558 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	3b01      	subs	r3, #1
 800b556:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d004      	beq.n	800b568 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	441a      	add	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800b568:	4b06      	ldr	r3, [pc, #24]	@ (800b584 <cJSON_ParseWithLengthOpts+0x12c>)
 800b56a:	461a      	mov	r2, r3
 800b56c:	f107 0310 	add.w	r3, r7, #16
 800b570:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b574:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3738      	adds	r7, #56	@ 0x38
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	2000560c 	.word	0x2000560c
 800b588:	200000e0 	.word	0x200000e0

0800b58c <cJSON_ParseWithLength>:
{
    return cJSON_ParseWithOpts(value, 0, 0);
}

CJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(const char *value, size_t buffer_length)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
    return cJSON_ParseWithLengthOpts(value, buffer_length, 0, 0);
 800b596:	2300      	movs	r3, #0
 800b598:	2200      	movs	r2, #0
 800b59a:	6839      	ldr	r1, [r7, #0]
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f7ff ff5b 	bl	800b458 <cJSON_ParseWithLengthOpts>
 800b5a2:	4603      	mov	r3, r0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <print>:

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08e      	sub	sp, #56	@ 0x38
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	60b9      	str	r1, [r7, #8]
 800b5b6:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800b5bc:	f107 0310 	add.w	r3, r7, #16
 800b5c0:	2224      	movs	r2, #36	@ 0x24
 800b5c2:	2100      	movs	r1, #0
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f003 fdd9 	bl	800f17c <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a38      	ldr	r2, [pc, #224]	@ (800b6b0 <print+0x104>)
 800b5d0:	6812      	ldr	r2, [r2, #0]
 800b5d2:	4610      	mov	r0, r2
 800b5d4:	4798      	blx	r3
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800b5da:	4b35      	ldr	r3, [pc, #212]	@ (800b6b0 <print+0x104>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b5ea:	ca07      	ldmia	r2, {r0, r1, r2}
 800b5ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d040      	beq.n	800b678 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800b5f6:	f107 0310 	add.w	r3, r7, #16
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	68f8      	ldr	r0, [r7, #12]
 800b5fe:	f000 f955 	bl	800b8ac <print_value>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d039      	beq.n	800b67c <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 800b608:	f107 0310 	add.w	r3, r7, #16
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7ff f985 	bl	800a91c <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00d      	beq.n	800b636 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	6938      	ldr	r0, [r7, #16]
 800b620:	69ba      	ldr	r2, [r7, #24]
 800b622:	3201      	adds	r2, #1
 800b624:	4611      	mov	r1, r2
 800b626:	4798      	blx	r3
 800b628:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 800b62a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d027      	beq.n	800b680 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 800b630:	2300      	movs	r3, #0
 800b632:	613b      	str	r3, [r7, #16]
 800b634:	e01e      	b.n	800b674 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	69ba      	ldr	r2, [r7, #24]
 800b63c:	3201      	adds	r2, #1
 800b63e:	4610      	mov	r0, r2
 800b640:	4798      	blx	r3
 800b642:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 800b644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b646:	2b00      	cmp	r3, #0
 800b648:	d01c      	beq.n	800b684 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800b64a:	6939      	ldr	r1, [r7, #16]
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	1c5a      	adds	r2, r3, #1
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	4293      	cmp	r3, r2
 800b654:	bf28      	it	cs
 800b656:	4613      	movcs	r3, r2
 800b658:	461a      	mov	r2, r3
 800b65a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b65c:	f003 fe85 	bl	800f36a <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b664:	4413      	add	r3, r2
 800b666:	2200      	movs	r2, #0
 800b668:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	4610      	mov	r0, r2
 800b672:	4798      	blx	r3
    }

    return printed;
 800b674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b676:	e016      	b.n	800b6a6 <print+0xfa>
        goto fail;
 800b678:	bf00      	nop
 800b67a:	e004      	b.n	800b686 <print+0xda>
        goto fail;
 800b67c:	bf00      	nop
 800b67e:	e002      	b.n	800b686 <print+0xda>
            goto fail;
 800b680:	bf00      	nop
 800b682:	e000      	b.n	800b686 <print+0xda>
            goto fail;
 800b684:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d004      	beq.n	800b696 <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	693a      	ldr	r2, [r7, #16]
 800b692:	4610      	mov	r0, r2
 800b694:	4798      	blx	r3
    }

    if (printed != NULL)
 800b696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d003      	beq.n	800b6a4 <print+0xf8>
    {
        hooks->deallocate(printed);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b6a2:	4798      	blx	r3
    }

    return NULL;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3738      	adds	r7, #56	@ 0x38
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	08013770 	.word	0x08013770

0800b6b4 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 800b6bc:	4a04      	ldr	r2, [pc, #16]	@ (800b6d0 <cJSON_Print+0x1c>)
 800b6be:	2101      	movs	r1, #1
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7ff ff73 	bl	800b5ac <print>
 800b6c6:	4603      	mov	r3, r0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	200000e0 	.word	0x200000e0

0800b6d4 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d003      	beq.n	800b6ec <parse_value+0x18>
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d101      	bne.n	800b6f0 <parse_value+0x1c>
    {
        return false; /* no input */
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	e0d2      	b.n	800b896 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d01d      	beq.n	800b732 <parse_value+0x5e>
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	1d1a      	adds	r2, r3, #4
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	429a      	cmp	r2, r3
 800b702:	d816      	bhi.n	800b732 <parse_value+0x5e>
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	4413      	add	r3, r2
 800b70e:	2204      	movs	r2, #4
 800b710:	4963      	ldr	r1, [pc, #396]	@ (800b8a0 <parse_value+0x1cc>)
 800b712:	4618      	mov	r0, r3
 800b714:	f003 fd3a 	bl	800f18c <strncmp>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d109      	bne.n	800b732 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2204      	movs	r2, #4
 800b722:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	1d1a      	adds	r2, r3, #4
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	609a      	str	r2, [r3, #8]
        return true;
 800b72e:	2301      	movs	r3, #1
 800b730:	e0b1      	b.n	800b896 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d01d      	beq.n	800b774 <parse_value+0xa0>
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	1d5a      	adds	r2, r3, #5
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	429a      	cmp	r2, r3
 800b744:	d816      	bhi.n	800b774 <parse_value+0xa0>
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	4413      	add	r3, r2
 800b750:	2205      	movs	r2, #5
 800b752:	4954      	ldr	r1, [pc, #336]	@ (800b8a4 <parse_value+0x1d0>)
 800b754:	4618      	mov	r0, r3
 800b756:	f003 fd19 	bl	800f18c <strncmp>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d109      	bne.n	800b774 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	1d5a      	adds	r2, r3, #5
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	609a      	str	r2, [r3, #8]
        return true;
 800b770:	2301      	movs	r3, #1
 800b772:	e090      	b.n	800b896 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d020      	beq.n	800b7bc <parse_value+0xe8>
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	1d1a      	adds	r2, r3, #4
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	429a      	cmp	r2, r3
 800b786:	d819      	bhi.n	800b7bc <parse_value+0xe8>
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	4413      	add	r3, r2
 800b792:	2204      	movs	r2, #4
 800b794:	4944      	ldr	r1, [pc, #272]	@ (800b8a8 <parse_value+0x1d4>)
 800b796:	4618      	mov	r0, r3
 800b798:	f003 fcf8 	bl	800f18c <strncmp>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10c      	bne.n	800b7bc <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2202      	movs	r2, #2
 800b7a6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	1d1a      	adds	r2, r3, #4
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	609a      	str	r2, [r3, #8]
        return true;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e06c      	b.n	800b896 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d013      	beq.n	800b7ea <parse_value+0x116>
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	689a      	ldr	r2, [r3, #8]
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d20d      	bcs.n	800b7ea <parse_value+0x116>
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	781b      	ldrb	r3, [r3, #0]
 800b7da:	2b22      	cmp	r3, #34	@ 0x22
 800b7dc:	d105      	bne.n	800b7ea <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7ff fb3f 	bl	800ae64 <parse_string>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	e055      	b.n	800b896 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d023      	beq.n	800b838 <parse_value+0x164>
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	689a      	ldr	r2, [r3, #8]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d21d      	bcs.n	800b838 <parse_value+0x164>
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	681a      	ldr	r2, [r3, #0]
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	4413      	add	r3, r2
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	2b2d      	cmp	r3, #45	@ 0x2d
 800b80a:	d00f      	beq.n	800b82c <parse_value+0x158>
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	4413      	add	r3, r2
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	2b2f      	cmp	r3, #47	@ 0x2f
 800b81a:	d90d      	bls.n	800b838 <parse_value+0x164>
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	4413      	add	r3, r2
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	2b39      	cmp	r3, #57	@ 0x39
 800b82a:	d805      	bhi.n	800b838 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f7fe ff0e 	bl	800a650 <parse_number>
 800b834:	4603      	mov	r3, r0
 800b836:	e02e      	b.n	800b896 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d013      	beq.n	800b866 <parse_value+0x192>
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	689a      	ldr	r2, [r3, #8]
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	429a      	cmp	r2, r3
 800b848:	d20d      	bcs.n	800b866 <parse_value+0x192>
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	4413      	add	r3, r2
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	2b5b      	cmp	r3, #91	@ 0x5b
 800b858:	d105      	bne.n	800b866 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800b85a:	6839      	ldr	r1, [r7, #0]
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f909 	bl	800ba74 <parse_array>
 800b862:	4603      	mov	r3, r0
 800b864:	e017      	b.n	800b896 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d013      	beq.n	800b894 <parse_value+0x1c0>
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	689a      	ldr	r2, [r3, #8]
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	429a      	cmp	r2, r3
 800b876:	d20d      	bcs.n	800b894 <parse_value+0x1c0>
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	4413      	add	r3, r2
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	2b7b      	cmp	r3, #123	@ 0x7b
 800b886:	d105      	bne.n	800b894 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 800b888:	6839      	ldr	r1, [r7, #0]
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 fa3c 	bl	800bd08 <parse_object>
 800b890:	4603      	mov	r3, r0
 800b892:	e000      	b.n	800b896 <parse_value+0x1c2>
    }

    return false;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	0801365c 	.word	0x0801365c
 800b8a4:	0801368c 	.word	0x0801368c
 800b8a8:	08013694 	.word	0x08013694

0800b8ac <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d002      	beq.n	800b8c6 <print_value+0x1a>
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d101      	bne.n	800b8ca <print_value+0x1e>
    {
        return false;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	e0c9      	b.n	800ba5e <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	2b80      	cmp	r3, #128	@ 0x80
 800b8d2:	f000 808e 	beq.w	800b9f2 <print_value+0x146>
 800b8d6:	2b80      	cmp	r3, #128	@ 0x80
 800b8d8:	f300 80c0 	bgt.w	800ba5c <print_value+0x1b0>
 800b8dc:	2b20      	cmp	r3, #32
 800b8de:	dc49      	bgt.n	800b974 <print_value+0xc8>
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f340 80bb 	ble.w	800ba5c <print_value+0x1b0>
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	2b1f      	cmp	r3, #31
 800b8ea:	f200 80b7 	bhi.w	800ba5c <print_value+0x1b0>
 800b8ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b8f4 <print_value+0x48>)
 800b8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f4:	0800b99f 	.word	0x0800b99f
 800b8f8:	0800b9c3 	.word	0x0800b9c3
 800b8fc:	0800ba5d 	.word	0x0800ba5d
 800b900:	0800b97b 	.word	0x0800b97b
 800b904:	0800ba5d 	.word	0x0800ba5d
 800b908:	0800ba5d 	.word	0x0800ba5d
 800b90c:	0800ba5d 	.word	0x0800ba5d
 800b910:	0800b9e7 	.word	0x0800b9e7
 800b914:	0800ba5d 	.word	0x0800ba5d
 800b918:	0800ba5d 	.word	0x0800ba5d
 800b91c:	0800ba5d 	.word	0x0800ba5d
 800b920:	0800ba5d 	.word	0x0800ba5d
 800b924:	0800ba5d 	.word	0x0800ba5d
 800b928:	0800ba5d 	.word	0x0800ba5d
 800b92c:	0800ba5d 	.word	0x0800ba5d
 800b930:	0800ba39 	.word	0x0800ba39
 800b934:	0800ba5d 	.word	0x0800ba5d
 800b938:	0800ba5d 	.word	0x0800ba5d
 800b93c:	0800ba5d 	.word	0x0800ba5d
 800b940:	0800ba5d 	.word	0x0800ba5d
 800b944:	0800ba5d 	.word	0x0800ba5d
 800b948:	0800ba5d 	.word	0x0800ba5d
 800b94c:	0800ba5d 	.word	0x0800ba5d
 800b950:	0800ba5d 	.word	0x0800ba5d
 800b954:	0800ba5d 	.word	0x0800ba5d
 800b958:	0800ba5d 	.word	0x0800ba5d
 800b95c:	0800ba5d 	.word	0x0800ba5d
 800b960:	0800ba5d 	.word	0x0800ba5d
 800b964:	0800ba5d 	.word	0x0800ba5d
 800b968:	0800ba5d 	.word	0x0800ba5d
 800b96c:	0800ba5d 	.word	0x0800ba5d
 800b970:	0800ba45 	.word	0x0800ba45
 800b974:	2b40      	cmp	r3, #64	@ 0x40
 800b976:	d06b      	beq.n	800ba50 <print_value+0x1a4>
 800b978:	e070      	b.n	800ba5c <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 800b97a:	2105      	movs	r1, #5
 800b97c:	6838      	ldr	r0, [r7, #0]
 800b97e:	f7fe ff33 	bl	800a7e8 <ensure>
 800b982:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d101      	bne.n	800b98e <print_value+0xe2>
            {
                return false;
 800b98a:	2300      	movs	r3, #0
 800b98c:	e067      	b.n	800ba5e <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	4a35      	ldr	r2, [pc, #212]	@ (800ba68 <print_value+0x1bc>)
 800b992:	6810      	ldr	r0, [r2, #0]
 800b994:	6018      	str	r0, [r3, #0]
 800b996:	7912      	ldrb	r2, [r2, #4]
 800b998:	711a      	strb	r2, [r3, #4]
            return true;
 800b99a:	2301      	movs	r3, #1
 800b99c:	e05f      	b.n	800ba5e <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 800b99e:	2106      	movs	r1, #6
 800b9a0:	6838      	ldr	r0, [r7, #0]
 800b9a2:	f7fe ff21 	bl	800a7e8 <ensure>
 800b9a6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d101      	bne.n	800b9b2 <print_value+0x106>
            {
                return false;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	e055      	b.n	800ba5e <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	4a2d      	ldr	r2, [pc, #180]	@ (800ba6c <print_value+0x1c0>)
 800b9b6:	6810      	ldr	r0, [r2, #0]
 800b9b8:	6018      	str	r0, [r3, #0]
 800b9ba:	8892      	ldrh	r2, [r2, #4]
 800b9bc:	809a      	strh	r2, [r3, #4]
            return true;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e04d      	b.n	800ba5e <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800b9c2:	2105      	movs	r1, #5
 800b9c4:	6838      	ldr	r0, [r7, #0]
 800b9c6:	f7fe ff0f 	bl	800a7e8 <ensure>
 800b9ca:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d101      	bne.n	800b9d6 <print_value+0x12a>
            {
                return false;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	e043      	b.n	800ba5e <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	4a25      	ldr	r2, [pc, #148]	@ (800ba70 <print_value+0x1c4>)
 800b9da:	6810      	ldr	r0, [r2, #0]
 800b9dc:	6018      	str	r0, [r3, #0]
 800b9de:	7912      	ldrb	r2, [r2, #4]
 800b9e0:	711a      	strb	r2, [r3, #4]
            return true;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e03b      	b.n	800ba5e <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800b9e6:	6839      	ldr	r1, [r7, #0]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f7ff f801 	bl	800a9f0 <print_number>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	e035      	b.n	800ba5e <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	691b      	ldr	r3, [r3, #16]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d101      	bne.n	800ba02 <print_value+0x156>
            {
                return false;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	e02d      	b.n	800ba5e <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7f4 fc4a 	bl	80002a0 <strlen>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	3301      	adds	r3, #1
 800ba10:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800ba12:	68b9      	ldr	r1, [r7, #8]
 800ba14:	6838      	ldr	r0, [r7, #0]
 800ba16:	f7fe fee7 	bl	800a7e8 <ensure>
 800ba1a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d101      	bne.n	800ba26 <print_value+0x17a>
            {
                return false;
 800ba22:	2300      	movs	r3, #0
 800ba24:	e01b      	b.n	800ba5e <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	68ba      	ldr	r2, [r7, #8]
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f003 fc9b 	bl	800f36a <memcpy>
            return true;
 800ba34:	2301      	movs	r3, #1
 800ba36:	e012      	b.n	800ba5e <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 800ba38:	6839      	ldr	r1, [r7, #0]
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f7ff fc88 	bl	800b350 <print_string>
 800ba40:	4603      	mov	r3, r0
 800ba42:	e00c      	b.n	800ba5e <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 800ba44:	6839      	ldr	r1, [r7, #0]
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 f8d8 	bl	800bbfc <print_array>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	e006      	b.n	800ba5e <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 800ba50:	6839      	ldr	r1, [r7, #0]
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 fa57 	bl	800bf06 <print_object>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	e000      	b.n	800ba5e <print_value+0x1b2>

        default:
            return false;
 800ba5c:	2300      	movs	r3, #0
    }
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	0801365c 	.word	0x0801365c
 800ba6c:	0801368c 	.word	0x0801368c
 800ba70:	08013694 	.word	0x08013694

0800ba74 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800ba7e:	2300      	movs	r3, #0
 800ba80:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800ba82:	2300      	movs	r3, #0
 800ba84:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ba8e:	d301      	bcc.n	800ba94 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800ba90:	2300      	movs	r3, #0
 800ba92:	e0af      	b.n	800bbf4 <parse_array+0x180>
    }
    input_buffer->depth++;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	1c5a      	adds	r2, r3, #1
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	4413      	add	r3, r2
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	2b5b      	cmp	r3, #91	@ 0x5b
 800baac:	f040 8094 	bne.w	800bbd8 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	1c5a      	adds	r2, r3, #1
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800baba:	6838      	ldr	r0, [r7, #0]
 800babc:	f7ff fc58 	bl	800b370 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00d      	beq.n	800bae2 <parse_array+0x6e>
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	689a      	ldr	r2, [r3, #8]
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d207      	bcs.n	800bae2 <parse_array+0x6e>
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	4413      	add	r3, r2
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	2b5d      	cmp	r3, #93	@ 0x5d
 800bae0:	d061      	beq.n	800bba6 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d005      	beq.n	800baf4 <parse_array+0x80>
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	689a      	ldr	r2, [r3, #8]
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d305      	bcc.n	800bb00 <parse_array+0x8c>
    {
        input_buffer->offset--;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	1e5a      	subs	r2, r3, #1
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	609a      	str	r2, [r3, #8]
        goto fail;
 800bafe:	e072      	b.n	800bbe6 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	1e5a      	subs	r2, r3, #1
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	3310      	adds	r3, #16
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7fe fd36 	bl	800a580 <cJSON_New_Item>
 800bb14:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d05f      	beq.n	800bbdc <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d104      	bne.n	800bb2c <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	617b      	str	r3, [r7, #20]
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	613b      	str	r3, [r7, #16]
 800bb2a:	e007      	b.n	800bb3c <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	68fa      	ldr	r2, [r7, #12]
 800bb30:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	1c5a      	adds	r2, r3, #1
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800bb46:	6838      	ldr	r0, [r7, #0]
 800bb48:	f7ff fc12 	bl	800b370 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800bb4c:	6839      	ldr	r1, [r7, #0]
 800bb4e:	6938      	ldr	r0, [r7, #16]
 800bb50:	f7ff fdc0 	bl	800b6d4 <parse_value>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d042      	beq.n	800bbe0 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800bb5a:	6838      	ldr	r0, [r7, #0]
 800bb5c:	f7ff fc08 	bl	800b370 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00d      	beq.n	800bb82 <parse_array+0x10e>
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	689a      	ldr	r2, [r3, #8]
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d207      	bcs.n	800bb82 <parse_array+0x10e>
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	2b2c      	cmp	r3, #44	@ 0x2c
 800bb80:	d0c3      	beq.n	800bb0a <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d02d      	beq.n	800bbe4 <parse_array+0x170>
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	689a      	ldr	r2, [r3, #8]
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d227      	bcs.n	800bbe4 <parse_array+0x170>
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	2b5d      	cmp	r3, #93	@ 0x5d
 800bba2:	d11f      	bne.n	800bbe4 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 800bba4:	e000      	b.n	800bba8 <parse_array+0x134>
        goto success;
 800bba6:	bf00      	nop
    input_buffer->depth--;
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	1e5a      	subs	r2, r3, #1
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d002      	beq.n	800bbbe <parse_array+0x14a>
        head->prev = current_item;
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2220      	movs	r2, #32
 800bbc2:	60da      	str	r2, [r3, #12]
    item->child = head;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	697a      	ldr	r2, [r7, #20]
 800bbc8:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	1c5a      	adds	r2, r3, #1
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	609a      	str	r2, [r3, #8]

    return true;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	e00d      	b.n	800bbf4 <parse_array+0x180>
        goto fail;
 800bbd8:	bf00      	nop
 800bbda:	e004      	b.n	800bbe6 <parse_array+0x172>
            goto fail; /* allocation failure */
 800bbdc:	bf00      	nop
 800bbde:	e002      	b.n	800bbe6 <parse_array+0x172>
            goto fail; /* failed to parse value */
 800bbe0:	bf00      	nop
 800bbe2:	e000      	b.n	800bbe6 <parse_array+0x172>
        goto fail; /* expected end of array */
 800bbe4:	bf00      	nop

fail:
    if (head != NULL)
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 800bbec:	6978      	ldr	r0, [r7, #20]
 800bbee:	f7fe fcdd 	bl	800a5ac <cJSON_Delete>
    }

    return false;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3718      	adds	r7, #24
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b086      	sub	sp, #24
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800bc06:	2300      	movs	r3, #0
 800bc08:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d101      	bne.n	800bc1e <print_array+0x22>
    {
        return false;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	e070      	b.n	800bd00 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800bc1e:	2101      	movs	r1, #1
 800bc20:	6838      	ldr	r0, [r7, #0]
 800bc22:	f7fe fde1 	bl	800a7e8 <ensure>
 800bc26:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d101      	bne.n	800bc32 <print_array+0x36>
    {
        return false;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	e066      	b.n	800bd00 <print_array+0x104>
    }

    *output_pointer = '[';
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	225b      	movs	r2, #91	@ 0x5b
 800bc36:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	1c5a      	adds	r2, r3, #1
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	1c5a      	adds	r2, r3, #1
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800bc4c:	e03d      	b.n	800bcca <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800bc4e:	6839      	ldr	r1, [r7, #0]
 800bc50:	6938      	ldr	r0, [r7, #16]
 800bc52:	f7ff fe2b 	bl	800b8ac <print_value>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d101      	bne.n	800bc60 <print_array+0x64>
        {
            return false;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	e04f      	b.n	800bd00 <print_array+0x104>
        }
        update_offset(output_buffer);
 800bc60:	6838      	ldr	r0, [r7, #0]
 800bc62:	f7fe fe5b 	bl	800a91c <update_offset>
        if (current_element->next)
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d02a      	beq.n	800bcc4 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	695b      	ldr	r3, [r3, #20]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d001      	beq.n	800bc7a <print_array+0x7e>
 800bc76:	2302      	movs	r3, #2
 800bc78:	e000      	b.n	800bc7c <print_array+0x80>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	3301      	adds	r3, #1
 800bc82:	4619      	mov	r1, r3
 800bc84:	6838      	ldr	r0, [r7, #0]
 800bc86:	f7fe fdaf 	bl	800a7e8 <ensure>
 800bc8a:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d101      	bne.n	800bc96 <print_array+0x9a>
            {
                return false;
 800bc92:	2300      	movs	r3, #0
 800bc94:	e034      	b.n	800bd00 <print_array+0x104>
            }
            *output_pointer++ = ',';
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	1c5a      	adds	r2, r3, #1
 800bc9a:	617a      	str	r2, [r7, #20]
 800bc9c:	222c      	movs	r2, #44	@ 0x2c
 800bc9e:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	695b      	ldr	r3, [r3, #20]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d004      	beq.n	800bcb2 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	1c5a      	adds	r2, r3, #1
 800bcac:	617a      	str	r2, [r7, #20]
 800bcae:	2220      	movs	r2, #32
 800bcb0:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	689a      	ldr	r2, [r3, #8]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	441a      	add	r2, r3
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d1be      	bne.n	800bc4e <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 800bcd0:	2102      	movs	r1, #2
 800bcd2:	6838      	ldr	r0, [r7, #0]
 800bcd4:	f7fe fd88 	bl	800a7e8 <ensure>
 800bcd8:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d101      	bne.n	800bce4 <print_array+0xe8>
    {
        return false;
 800bce0:	2300      	movs	r3, #0
 800bce2:	e00d      	b.n	800bd00 <print_array+0x104>
    }
    *output_pointer++ = ']';
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	1c5a      	adds	r2, r3, #1
 800bce8:	617a      	str	r2, [r7, #20]
 800bcea:	225d      	movs	r2, #93	@ 0x5d
 800bcec:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	1e5a      	subs	r2, r3, #1
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	60da      	str	r2, [r3, #12]

    return true;
 800bcfe:	2301      	movs	r3, #1
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3718      	adds	r7, #24
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 800bd12:	2300      	movs	r3, #0
 800bd14:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bd22:	d301      	bcc.n	800bd28 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 800bd24:	2300      	movs	r3, #0
 800bd26:	e0ea      	b.n	800befe <parse_object+0x1f6>
    }
    input_buffer->depth++;
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	1c5a      	adds	r2, r3, #1
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f000 80d0 	beq.w	800beda <parse_object+0x1d2>
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	689a      	ldr	r2, [r3, #8]
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	f080 80c9 	bcs.w	800beda <parse_object+0x1d2>
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	4413      	add	r3, r2
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	2b7b      	cmp	r3, #123	@ 0x7b
 800bd56:	f040 80c0 	bne.w	800beda <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	1c5a      	adds	r2, r3, #1
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800bd64:	6838      	ldr	r0, [r7, #0]
 800bd66:	f7ff fb03 	bl	800b370 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d00e      	beq.n	800bd8e <parse_object+0x86>
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	689a      	ldr	r2, [r3, #8]
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d208      	bcs.n	800bd8e <parse_object+0x86>
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	4413      	add	r3, r2
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	2b7d      	cmp	r3, #125	@ 0x7d
 800bd8a:	f000 808d 	beq.w	800bea8 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d005      	beq.n	800bda0 <parse_object+0x98>
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	689a      	ldr	r2, [r3, #8]
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d305      	bcc.n	800bdac <parse_object+0xa4>
    {
        input_buffer->offset--;
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	1e5a      	subs	r2, r3, #1
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	609a      	str	r2, [r3, #8]
        goto fail;
 800bdaa:	e0a1      	b.n	800bef0 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	1e5a      	subs	r2, r3, #1
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	3310      	adds	r3, #16
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fe fbe0 	bl	800a580 <cJSON_New_Item>
 800bdc0:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f000 808a 	beq.w	800bede <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d104      	bne.n	800bdda <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	617b      	str	r3, [r7, #20]
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	613b      	str	r3, [r7, #16]
 800bdd8:	e007      	b.n	800bdea <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	68fa      	ldr	r2, [r7, #12]
 800bdde:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	1c5a      	adds	r2, r3, #1
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800bdf4:	6838      	ldr	r0, [r7, #0]
 800bdf6:	f7ff fabb 	bl	800b370 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800bdfa:	6839      	ldr	r1, [r7, #0]
 800bdfc:	6938      	ldr	r0, [r7, #16]
 800bdfe:	f7ff f831 	bl	800ae64 <parse_string>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d06c      	beq.n	800bee2 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800be08:	6838      	ldr	r0, [r7, #0]
 800be0a:	f7ff fab1 	bl	800b370 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	691a      	ldr	r2, [r3, #16]
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	2200      	movs	r2, #0
 800be1a:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d061      	beq.n	800bee6 <parse_object+0x1de>
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	689a      	ldr	r2, [r3, #8]
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d25b      	bcs.n	800bee6 <parse_object+0x1de>
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	4413      	add	r3, r2
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	2b3a      	cmp	r3, #58	@ 0x3a
 800be3c:	d153      	bne.n	800bee6 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	1c5a      	adds	r2, r3, #1
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800be48:	6838      	ldr	r0, [r7, #0]
 800be4a:	f7ff fa91 	bl	800b370 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6938      	ldr	r0, [r7, #16]
 800be52:	f7ff fc3f 	bl	800b6d4 <parse_value>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d046      	beq.n	800beea <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800be5c:	6838      	ldr	r0, [r7, #0]
 800be5e:	f7ff fa87 	bl	800b370 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d00d      	beq.n	800be84 <parse_object+0x17c>
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	689a      	ldr	r2, [r3, #8]
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	429a      	cmp	r2, r3
 800be72:	d207      	bcs.n	800be84 <parse_object+0x17c>
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	4413      	add	r3, r2
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	2b2c      	cmp	r3, #44	@ 0x2c
 800be82:	d098      	beq.n	800bdb6 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d031      	beq.n	800beee <parse_object+0x1e6>
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	689a      	ldr	r2, [r3, #8]
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	429a      	cmp	r2, r3
 800be94:	d22b      	bcs.n	800beee <parse_object+0x1e6>
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	681a      	ldr	r2, [r3, #0]
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	4413      	add	r3, r2
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	2b7d      	cmp	r3, #125	@ 0x7d
 800bea4:	d123      	bne.n	800beee <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 800bea6:	e000      	b.n	800beaa <parse_object+0x1a2>
        goto success; /* empty object */
 800bea8:	bf00      	nop
    input_buffer->depth--;
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	1e5a      	subs	r2, r3, #1
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d002      	beq.n	800bec0 <parse_object+0x1b8>
        head->prev = current_item;
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2240      	movs	r2, #64	@ 0x40
 800bec4:	60da      	str	r2, [r3, #12]
    item->child = head;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	697a      	ldr	r2, [r7, #20]
 800beca:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	1c5a      	adds	r2, r3, #1
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	609a      	str	r2, [r3, #8]
    return true;
 800bed6:	2301      	movs	r3, #1
 800bed8:	e011      	b.n	800befe <parse_object+0x1f6>
        goto fail; /* not an object */
 800beda:	bf00      	nop
 800bedc:	e008      	b.n	800bef0 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 800bede:	bf00      	nop
 800bee0:	e006      	b.n	800bef0 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 800bee2:	bf00      	nop
 800bee4:	e004      	b.n	800bef0 <parse_object+0x1e8>
            goto fail; /* invalid object */
 800bee6:	bf00      	nop
 800bee8:	e002      	b.n	800bef0 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 800beea:	bf00      	nop
 800beec:	e000      	b.n	800bef0 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 800beee:	bf00      	nop

fail:
    if (head != NULL)
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d002      	beq.n	800befc <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 800bef6:	6978      	ldr	r0, [r7, #20]
 800bef8:	f7fe fb58 	bl	800a5ac <cJSON_Delete>
    }

    return false;
 800befc:	2300      	movs	r3, #0
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3718      	adds	r7, #24
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b088      	sub	sp, #32
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
 800bf0e:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800bf10:	2300      	movs	r3, #0
 800bf12:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800bf14:	2300      	movs	r3, #0
 800bf16:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d101      	bne.n	800bf28 <print_object+0x22>
    {
        return false;
 800bf24:	2300      	movs	r3, #0
 800bf26:	e108      	b.n	800c13a <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	695b      	ldr	r3, [r3, #20]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <print_object+0x2e>
 800bf30:	2302      	movs	r3, #2
 800bf32:	e000      	b.n	800bf36 <print_object+0x30>
 800bf34:	2301      	movs	r3, #1
 800bf36:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	6838      	ldr	r0, [r7, #0]
 800bf40:	f7fe fc52 	bl	800a7e8 <ensure>
 800bf44:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d101      	bne.n	800bf50 <print_object+0x4a>
    {
        return false;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	e0f4      	b.n	800c13a <print_object+0x234>
    }

    *output_pointer++ = '{';
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	1c5a      	adds	r2, r3, #1
 800bf54:	61fa      	str	r2, [r7, #28]
 800bf56:	227b      	movs	r2, #123	@ 0x7b
 800bf58:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	1c5a      	adds	r2, r3, #1
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	695b      	ldr	r3, [r3, #20]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d004      	beq.n	800bf76 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	1c5a      	adds	r2, r3, #1
 800bf70:	61fa      	str	r2, [r7, #28]
 800bf72:	220a      	movs	r2, #10
 800bf74:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	689a      	ldr	r2, [r3, #8]
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	441a      	add	r2, r3
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	609a      	str	r2, [r3, #8]

    while (current_item)
 800bf82:	e0a0      	b.n	800c0c6 <print_object+0x1c0>
    {
        if (output_buffer->format)
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	695b      	ldr	r3, [r3, #20]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d022      	beq.n	800bfd2 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	4619      	mov	r1, r3
 800bf92:	6838      	ldr	r0, [r7, #0]
 800bf94:	f7fe fc28 	bl	800a7e8 <ensure>
 800bf98:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d101      	bne.n	800bfa4 <print_object+0x9e>
            {
                return false;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	e0ca      	b.n	800c13a <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	617b      	str	r3, [r7, #20]
 800bfa8:	e007      	b.n	800bfba <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	1c5a      	adds	r2, r3, #1
 800bfae:	61fa      	str	r2, [r7, #28]
 800bfb0:	2209      	movs	r2, #9
 800bfb2:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	617b      	str	r3, [r7, #20]
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d3f2      	bcc.n	800bfaa <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	689a      	ldr	r2, [r3, #8]
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	441a      	add	r2, r3
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	6a1b      	ldr	r3, [r3, #32]
 800bfd6:	6839      	ldr	r1, [r7, #0]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7ff f889 	bl	800b0f0 <print_string_ptr>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d101      	bne.n	800bfe8 <print_object+0xe2>
        {
            return false;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	e0a8      	b.n	800c13a <print_object+0x234>
        }
        update_offset(output_buffer);
 800bfe8:	6838      	ldr	r0, [r7, #0]
 800bfea:	f7fe fc97 	bl	800a91c <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	695b      	ldr	r3, [r3, #20]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d001      	beq.n	800bffa <print_object+0xf4>
 800bff6:	2302      	movs	r3, #2
 800bff8:	e000      	b.n	800bffc <print_object+0xf6>
 800bffa:	2301      	movs	r3, #1
 800bffc:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800bffe:	68f9      	ldr	r1, [r7, #12]
 800c000:	6838      	ldr	r0, [r7, #0]
 800c002:	f7fe fbf1 	bl	800a7e8 <ensure>
 800c006:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d101      	bne.n	800c012 <print_object+0x10c>
        {
            return false;
 800c00e:	2300      	movs	r3, #0
 800c010:	e093      	b.n	800c13a <print_object+0x234>
        }
        *output_pointer++ = ':';
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	1c5a      	adds	r2, r3, #1
 800c016:	61fa      	str	r2, [r7, #28]
 800c018:	223a      	movs	r2, #58	@ 0x3a
 800c01a:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	695b      	ldr	r3, [r3, #20]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d004      	beq.n	800c02e <print_object+0x128>
        {
            *output_pointer++ = '\t';
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	1c5a      	adds	r2, r3, #1
 800c028:	61fa      	str	r2, [r7, #28]
 800c02a:	2209      	movs	r2, #9
 800c02c:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	689a      	ldr	r2, [r3, #8]
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	441a      	add	r2, r3
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	69b8      	ldr	r0, [r7, #24]
 800c03e:	f7ff fc35 	bl	800b8ac <print_value>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d101      	bne.n	800c04c <print_object+0x146>
        {
            return false;
 800c048:	2300      	movs	r3, #0
 800c04a:	e076      	b.n	800c13a <print_object+0x234>
        }
        update_offset(output_buffer);
 800c04c:	6838      	ldr	r0, [r7, #0]
 800c04e:	f7fe fc65 	bl	800a91c <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	695b      	ldr	r3, [r3, #20]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d001      	beq.n	800c05e <print_object+0x158>
 800c05a:	2201      	movs	r2, #1
 800c05c:	e000      	b.n	800c060 <print_object+0x15a>
 800c05e:	2200      	movs	r2, #0
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d001      	beq.n	800c06c <print_object+0x166>
 800c068:	2301      	movs	r3, #1
 800c06a:	e000      	b.n	800c06e <print_object+0x168>
 800c06c:	2300      	movs	r3, #0
 800c06e:	4413      	add	r3, r2
 800c070:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	3301      	adds	r3, #1
 800c076:	4619      	mov	r1, r3
 800c078:	6838      	ldr	r0, [r7, #0]
 800c07a:	f7fe fbb5 	bl	800a7e8 <ensure>
 800c07e:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d101      	bne.n	800c08a <print_object+0x184>
        {
            return false;
 800c086:	2300      	movs	r3, #0
 800c088:	e057      	b.n	800c13a <print_object+0x234>
        }
        if (current_item->next)
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d004      	beq.n	800c09c <print_object+0x196>
        {
            *output_pointer++ = ',';
 800c092:	69fb      	ldr	r3, [r7, #28]
 800c094:	1c5a      	adds	r2, r3, #1
 800c096:	61fa      	str	r2, [r7, #28]
 800c098:	222c      	movs	r2, #44	@ 0x2c
 800c09a:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	695b      	ldr	r3, [r3, #20]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d004      	beq.n	800c0ae <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	1c5a      	adds	r2, r3, #1
 800c0a8:	61fa      	str	r2, [r7, #28]
 800c0aa:	220a      	movs	r2, #10
 800c0ac:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 800c0ae:	69fb      	ldr	r3, [r7, #28]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	689a      	ldr	r2, [r3, #8]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	441a      	add	r2, r3
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	61bb      	str	r3, [r7, #24]
    while (current_item)
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f47f af5b 	bne.w	800bf84 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	695b      	ldr	r3, [r3, #20]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d003      	beq.n	800c0de <print_object+0x1d8>
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	e000      	b.n	800c0e0 <print_object+0x1da>
 800c0de:	2302      	movs	r3, #2
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6838      	ldr	r0, [r7, #0]
 800c0e4:	f7fe fb80 	bl	800a7e8 <ensure>
 800c0e8:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d101      	bne.n	800c0f4 <print_object+0x1ee>
    {
        return false;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	e022      	b.n	800c13a <print_object+0x234>
    }
    if (output_buffer->format)
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	695b      	ldr	r3, [r3, #20]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d010      	beq.n	800c11e <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	613b      	str	r3, [r7, #16]
 800c100:	e007      	b.n	800c112 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	1c5a      	adds	r2, r3, #1
 800c106:	61fa      	str	r2, [r7, #28]
 800c108:	2209      	movs	r2, #9
 800c10a:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	3301      	adds	r3, #1
 800c110:	613b      	str	r3, [r7, #16]
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	3b01      	subs	r3, #1
 800c118:	693a      	ldr	r2, [r7, #16]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d3f1      	bcc.n	800c102 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 800c11e:	69fb      	ldr	r3, [r7, #28]
 800c120:	1c5a      	adds	r2, r3, #1
 800c122:	61fa      	str	r2, [r7, #28]
 800c124:	227d      	movs	r2, #125	@ 0x7d
 800c126:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800c128:	69fb      	ldr	r3, [r7, #28]
 800c12a:	2200      	movs	r2, #0
 800c12c:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	1e5a      	subs	r2, r3, #1
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	60da      	str	r2, [r3, #12]

    return true;
 800c138:	2301      	movs	r3, #1
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3720      	adds	r7, #32
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b086      	sub	sp, #24
 800c146:	af00      	add	r7, sp, #0
 800c148:	60f8      	str	r0, [r7, #12]
 800c14a:	60b9      	str	r1, [r7, #8]
 800c14c:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 800c14e:	2300      	movs	r3, #0
 800c150:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <get_object_item+0x1c>
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <get_object_item+0x20>
    {
        return NULL;
 800c15e:	2300      	movs	r3, #0
 800c160:	e033      	b.n	800c1ca <get_object_item+0x88>
    }

    current_element = object->child;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d017      	beq.n	800c19e <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800c16e:	e002      	b.n	800c176 <get_object_item+0x34>
        {
            current_element = current_element->next;
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d01c      	beq.n	800c1b6 <get_object_item+0x74>
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	6a1b      	ldr	r3, [r3, #32]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d018      	beq.n	800c1b6 <get_object_item+0x74>
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	6a1b      	ldr	r3, [r3, #32]
 800c188:	4619      	mov	r1, r3
 800c18a:	68b8      	ldr	r0, [r7, #8]
 800c18c:	f7f4 f828 	bl	80001e0 <strcmp>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1ec      	bne.n	800c170 <get_object_item+0x2e>
 800c196:	e00e      	b.n	800c1b6 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d008      	beq.n	800c1b6 <get_object_item+0x74>
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	6a1b      	ldr	r3, [r3, #32]
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	68b8      	ldr	r0, [r7, #8]
 800c1ac:	f7fe f910 	bl	800a3d0 <case_insensitive_strcmp>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1f0      	bne.n	800c198 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d003      	beq.n	800c1c4 <get_object_item+0x82>
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	6a1b      	ldr	r3, [r3, #32]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d101      	bne.n	800c1c8 <get_object_item+0x86>
        return NULL;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	e000      	b.n	800c1ca <get_object_item+0x88>
    }

    return current_element;
 800c1c8:	697b      	ldr	r3, [r7, #20]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3718      	adds	r7, #24
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b082      	sub	sp, #8
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
 800c1da:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800c1dc:	2200      	movs	r2, #0
 800c1de:	6839      	ldr	r1, [r7, #0]
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f7ff ffae 	bl	800c142 <get_object_item>
 800c1e6:	4603      	mov	r3, r0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	683a      	ldr	r2, [r7, #0]
 800c1fe:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	605a      	str	r2, [r3, #4]
}
 800c206:	bf00      	nop
 800c208:	370c      	adds	r7, #12
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr

0800c212 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 800c212:	b580      	push	{r7, lr}
 800c214:	b084      	sub	sp, #16
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
 800c21a:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 800c21c:	2300      	movs	r3, #0
 800c21e:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d006      	beq.n	800c234 <add_item_to_array+0x22>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d003      	beq.n	800c234 <add_item_to_array+0x22>
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	429a      	cmp	r2, r3
 800c232:	d101      	bne.n	800c238 <add_item_to_array+0x26>
    {
        return false;
 800c234:	2300      	movs	r3, #0
 800c236:	e01e      	b.n	800c276 <add_item_to_array+0x64>
    }

    child = array->child;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d109      	bne.n	800c258 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	683a      	ldr	r2, [r7, #0]
 800c248:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	683a      	ldr	r2, [r7, #0]
 800c24e:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	2200      	movs	r2, #0
 800c254:	601a      	str	r2, [r3, #0]
 800c256:	e00d      	b.n	800c274 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d009      	beq.n	800c274 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	4618      	mov	r0, r3
 800c268:	f7ff ffc2 	bl	800c1f0 <suffix_object>
            array->child->prev = item;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	683a      	ldr	r2, [r7, #0]
 800c272:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800c274:	2301      	movs	r3, #1
}
 800c276:	4618      	mov	r0, r3
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800c27e:	b480      	push	{r7}
 800c280:	b083      	sub	sp, #12
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800c286:	687b      	ldr	r3, [r7, #4]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	370c      	adds	r7, #12
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b086      	sub	sp, #24
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
 800c2a0:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d009      	beq.n	800c2c4 <add_item_to_object+0x30>
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d006      	beq.n	800c2c4 <add_item_to_object+0x30>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d003      	beq.n	800c2c4 <add_item_to_object+0x30>
 800c2bc:	68fa      	ldr	r2, [r7, #12]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d101      	bne.n	800c2c8 <add_item_to_object+0x34>
    {
        return false;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	e036      	b.n	800c336 <add_item_to_object+0xa2>
    }

    if (constant_key)
 800c2c8:	6a3b      	ldr	r3, [r7, #32]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d009      	beq.n	800c2e2 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 800c2ce:	68b8      	ldr	r0, [r7, #8]
 800c2d0:	f7ff ffd5 	bl	800c27e <cast_away_const>
 800c2d4:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c2de:	613b      	str	r3, [r7, #16]
 800c2e0:	e00e      	b.n	800c300 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 800c2e2:	6839      	ldr	r1, [r7, #0]
 800c2e4:	68b8      	ldr	r0, [r7, #8]
 800c2e6:	f7fe f8df 	bl	800a4a8 <cJSON_strdup>
 800c2ea:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d101      	bne.n	800c2f6 <add_item_to_object+0x62>
        {
            return false;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	e01f      	b.n	800c336 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c2fe:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d109      	bne.n	800c320 <add_item_to_object+0x8c>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6a1b      	ldr	r3, [r3, #32]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d005      	beq.n	800c320 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	6a12      	ldr	r2, [r2, #32]
 800c31c:	4610      	mov	r0, r2
 800c31e:	4798      	blx	r3
    }

    item->string = new_key;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	697a      	ldr	r2, [r7, #20]
 800c324:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	693a      	ldr	r2, [r7, #16]
 800c32a:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800c32c:	6879      	ldr	r1, [r7, #4]
 800c32e:	68f8      	ldr	r0, [r7, #12]
 800c330:	f7ff ff6f 	bl	800c212 <add_item_to_array>
 800c334:	4603      	mov	r3, r0
}
 800c336:	4618      	mov	r0, r3
 800c338:	3718      	adds	r7, #24
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
	...

0800c340 <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b086      	sub	sp, #24
 800c344:	af02      	add	r7, sp, #8
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 800c34c:	2300      	movs	r3, #0
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	4b05      	ldr	r3, [pc, #20]	@ (800c368 <cJSON_AddItemToObject+0x28>)
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	68b9      	ldr	r1, [r7, #8]
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	f7ff ff9c 	bl	800c294 <add_item_to_object>
 800c35c:	4603      	mov	r3, r0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	200000e0 	.word	0x200000e0
 800c36c:	00000000 	.word	0x00000000

0800c370 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 800c37a:	481f      	ldr	r0, [pc, #124]	@ (800c3f8 <cJSON_CreateNumber+0x88>)
 800c37c:	f7fe f900 	bl	800a580 <cJSON_New_Item>
 800c380:	60f8      	str	r0, [r7, #12]
    if(item)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d02c      	beq.n	800c3e2 <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2208      	movs	r2, #8
 800c38c:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 800c38e:	68f9      	ldr	r1, [r7, #12]
 800c390:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c394:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 800c398:	a315      	add	r3, pc, #84	@ (adr r3, 800c3f0 <cJSON_CreateNumber+0x80>)
 800c39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c3a2:	f7f4 fbc7 	bl	8000b34 <__aeabi_dcmpge>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d004      	beq.n	800c3b6 <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800c3b2:	615a      	str	r2, [r3, #20]
 800c3b4:	e015      	b.n	800c3e2 <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800c3b6:	f04f 0200 	mov.w	r2, #0
 800c3ba:	4b10      	ldr	r3, [pc, #64]	@ (800c3fc <cJSON_CreateNumber+0x8c>)
 800c3bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c3c0:	f7f4 fbae 	bl	8000b20 <__aeabi_dcmple>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d004      	beq.n	800c3d4 <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c3d0:	615a      	str	r2, [r3, #20]
 800c3d2:	e006      	b.n	800c3e2 <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 800c3d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c3d8:	f7f4 fbd6 	bl	8000b88 <__aeabi_d2iz>
 800c3dc:	4602      	mov	r2, r0
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	f3af 8000 	nop.w
 800c3f0:	ffc00000 	.word	0xffc00000
 800c3f4:	41dfffff 	.word	0x41dfffff
 800c3f8:	200000e0 	.word	0x200000e0
 800c3fc:	c1e00000 	.word	0xc1e00000

0800c400 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800c406:	4807      	ldr	r0, [pc, #28]	@ (800c424 <cJSON_CreateObject+0x24>)
 800c408:	f7fe f8ba 	bl	800a580 <cJSON_New_Item>
 800c40c:	6078      	str	r0, [r7, #4]
    if (item)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d002      	beq.n	800c41a <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2240      	movs	r2, #64	@ 0x40
 800c418:	60da      	str	r2, [r3, #12]
    }

    return item;
 800c41a:	687b      	ldr	r3, [r7, #4]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	200000e0 	.word	0x200000e0

0800c428 <cJSON_IsTrue>:

    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d101      	bne.n	800c43a <cJSON_IsTrue+0x12>
    {
        return false;
 800c436:	2300      	movs	r3, #0
 800c438:	e007      	b.n	800c44a <cJSON_IsTrue+0x22>
    }

    return (item->type & 0xff) == cJSON_True;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	2b02      	cmp	r3, #2
 800c442:	bf0c      	ite	eq
 800c444:	2301      	moveq	r3, #1
 800c446:	2300      	movne	r3, #0
 800c448:	b2db      	uxtb	r3, r3
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	370c      	adds	r7, #12
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr

0800c456 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800c456:	b480      	push	{r7}
 800c458:	b083      	sub	sp, #12
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d101      	bne.n	800c468 <cJSON_IsNumber+0x12>
    {
        return false;
 800c464:	2300      	movs	r3, #0
 800c466:	e007      	b.n	800c478 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	2b08      	cmp	r3, #8
 800c470:	bf0c      	ite	eq
 800c472:	2301      	moveq	r3, #1
 800c474:	2300      	movne	r3, #0
 800c476:	b2db      	uxtb	r3, r3
}
 800c478:	4618      	mov	r0, r3
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <cJSON_IsObject>:

    return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d101      	bne.n	800c496 <cJSON_IsObject+0x12>
    {
        return false;
 800c492:	2300      	movs	r3, #0
 800c494:	e007      	b.n	800c4a6 <cJSON_IsObject+0x22>
    }

    return (item->type & 0xFF) == cJSON_Object;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	2b40      	cmp	r3, #64	@ 0x40
 800c49e:	bf0c      	ite	eq
 800c4a0:	2301      	moveq	r3, #1
 800c4a2:	2300      	movne	r3, #0
 800c4a4:	b2db      	uxtb	r3, r3
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	370c      	adds	r7, #12
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr

0800c4b2 <prv_crc_in>:
 * \param[in]       inp: Input data in byte format
 * \param[in]       len: Number of bytes to process
 * \return          Current CRC calculated value after all bytes or `0` on error input data
 */
static uint8_t
prv_crc_in(lwpkt_crc_t* crcobj, const void* inp, const size_t len) {
 800c4b2:	b480      	push	{r7}
 800c4b4:	b089      	sub	sp, #36	@ 0x24
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	60f8      	str	r0, [r7, #12]
 800c4ba:	60b9      	str	r1, [r7, #8]
 800c4bc:	607a      	str	r2, [r7, #4]
    const uint8_t* p_data = inp;
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	61fb      	str	r3, [r7, #28]

    if (crcobj == NULL || p_data == NULL || len == 0) {
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d005      	beq.n	800c4d4 <prv_crc_in+0x22>
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d002      	beq.n	800c4d4 <prv_crc_in+0x22>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d101      	bne.n	800c4d8 <prv_crc_in+0x26>
        return 0;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	e036      	b.n	800c546 <prv_crc_in+0x94>
    }

    for (size_t i = 0; i < len; ++i, ++p_data) {
 800c4d8:	2300      	movs	r3, #0
 800c4da:	61bb      	str	r3, [r7, #24]
 800c4dc:	e02d      	b.n	800c53a <prv_crc_in+0x88>
        uint8_t inbyte = *p_data;
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 8U; j > 0; --j) {
 800c4e4:	2308      	movs	r3, #8
 800c4e6:	75bb      	strb	r3, [r7, #22]
 800c4e8:	e01e      	b.n	800c528 <prv_crc_in+0x76>
            uint8_t mix = (uint8_t)(crcobj->crc ^ inbyte) & 0x01U;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	781a      	ldrb	r2, [r3, #0]
 800c4ee:	7dfb      	ldrb	r3, [r7, #23]
 800c4f0:	4053      	eors	r3, r2
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	f003 0301 	and.w	r3, r3, #1
 800c4f8:	757b      	strb	r3, [r7, #21]
            crcobj->crc >>= 1U;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	085b      	lsrs	r3, r3, #1
 800c500:	b2da      	uxtb	r2, r3
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	701a      	strb	r2, [r3, #0]
            if (mix > 0) {
 800c506:	7d7b      	ldrb	r3, [r7, #21]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d007      	beq.n	800c51c <prv_crc_in+0x6a>
                crcobj->crc ^= 0x8CU;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 800c514:	43db      	mvns	r3, r3
 800c516:	b2da      	uxtb	r2, r3
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	701a      	strb	r2, [r3, #0]
            }
            inbyte >>= 0x01U;
 800c51c:	7dfb      	ldrb	r3, [r7, #23]
 800c51e:	085b      	lsrs	r3, r3, #1
 800c520:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 8U; j > 0; --j) {
 800c522:	7dbb      	ldrb	r3, [r7, #22]
 800c524:	3b01      	subs	r3, #1
 800c526:	75bb      	strb	r3, [r7, #22]
 800c528:	7dbb      	ldrb	r3, [r7, #22]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1dd      	bne.n	800c4ea <prv_crc_in+0x38>
    for (size_t i = 0; i < len; ++i, ++p_data) {
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	3301      	adds	r3, #1
 800c532:	61bb      	str	r3, [r7, #24]
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	3301      	adds	r3, #1
 800c538:	61fb      	str	r3, [r7, #28]
 800c53a:	69ba      	ldr	r2, [r7, #24]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d3cd      	bcc.n	800c4de <prv_crc_in+0x2c>
        }
    }
    return crcobj->crc;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	781b      	ldrb	r3, [r3, #0]
}
 800c546:	4618      	mov	r0, r3
 800c548:	3724      	adds	r7, #36	@ 0x24
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr

0800c552 <prv_crc_init>:
/**
 * \brief           Initialize CRC instance to default values
 * \param[in]       crcobj: CRC instance
 */
static void
prv_crc_init(lwpkt_crc_t* crcobj) {
 800c552:	b580      	push	{r7, lr}
 800c554:	b082      	sub	sp, #8
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
    LWPKT_MEMSET(crcobj, 0x00, sizeof(*crcobj));
 800c55a:	2201      	movs	r2, #1
 800c55c:	2100      	movs	r1, #0
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f002 fe0c 	bl	800f17c <memset>
}
 800c564:	bf00      	nop
 800c566:	3708      	adds	r7, #8
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <lwpkt_init>:
 * \param[in]       tx_rb: TX LwRB instance for data write
 * \param[in]       rx_rb: RX LwRB instance for data read
 * \return          \ref lwpktOK on success, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_init(lwpkt_t* pkt, lwrb_t* tx_rb, lwrb_t* rx_rb) {
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
    if (pkt == NULL) {
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d101      	bne.n	800c582 <lwpkt_init+0x16>
        return lwpktERR;
 800c57e:	2301      	movs	r3, #1
 800c580:	e01a      	b.n	800c5b8 <lwpkt_init+0x4c>
    }

    LWPKT_MEMSET(pkt, 0x00, sizeof(*pkt));
 800c582:	f44f 728e 	mov.w	r2, #284	@ 0x11c
 800c586:	2100      	movs	r1, #0
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	f002 fdf7 	bl	800f17c <memset>
    LWPKT_RESET(pkt);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800c594:	220c      	movs	r2, #12
 800c596:	2100      	movs	r1, #0
 800c598:	4618      	mov	r0, r3
 800c59a:	f002 fdef 	bl	800f17c <memset>
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110

    pkt->tx_rb = tx_rb;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    pkt->rx_rb = rx_rb;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    return lwpktOK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <lwpkt_read>:
 * \brief           Read raw data from RX buffer and prepare packet
 * \param[in]       pkt: Packet instance
 * \return          \ref lwpktVALID when packet valid, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_read(lwpkt_t* pkt) {
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
    lwpktr_t res = lwpktOK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	73fb      	strb	r3, [r7, #15]
    uint8_t b, e = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	73bb      	strb	r3, [r7, #14]

    if (!LWPKT_IS_VALID(pkt)) {
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d101      	bne.n	800c5da <lwpkt_read+0x1a>
        return lwpktERR;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e13e      	b.n	800c858 <lwpkt_read+0x298>
    }

    SEND_EVT(pkt, LWPKT_EVT_PRE_READ);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f000 8108 	beq.w	800c7f6 <lwpkt_read+0x236>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c5ec:	2106      	movs	r1, #6
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	4798      	blx	r3

    /* Process bytes from RX ringbuffer */
    /* Read byte by byte and go through state machine */
    while (lwrb_read(pkt->rx_rb, &b, 1) == 1) {
 800c5f2:	e100      	b.n	800c7f6 <lwpkt_read+0x236>
        e = 1;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	73bb      	strb	r3, [r7, #14]
        switch (pkt->m.state) {
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800c5fe:	2b07      	cmp	r3, #7
 800c600:	f200 80e5 	bhi.w	800c7ce <lwpkt_read+0x20e>
 800c604:	a201      	add	r2, pc, #4	@ (adr r2, 800c60c <lwpkt_read+0x4c>)
 800c606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c60a:	bf00      	nop
 800c60c:	0800c62d 	.word	0x0800c62d
 800c610:	0800c7cf 	.word	0x0800c7cf
 800c614:	0800c7cf 	.word	0x0800c7cf
 800c618:	0800c7cf 	.word	0x0800c7cf
 800c61c:	0800c66b 	.word	0x0800c66b
 800c620:	0800c6e1 	.word	0x0800c6e1
 800c624:	0800c751 	.word	0x0800c751
 800c628:	0800c7ad 	.word	0x0800c7ad
            case LWPKT_STATE_START: {
                if (b == LWPKT_START_BYTE) {
 800c62c:	7b7b      	ldrb	r3, [r7, #13]
 800c62e:	2baa      	cmp	r3, #170	@ 0xaa
 800c630:	f040 80dc 	bne.w	800c7ec <lwpkt_read+0x22c>
                    LWPKT_RESET(pkt); /* Reset instance and make it ready for receiving */
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800c63a:	220c      	movs	r2, #12
 800c63c:	2100      	movs	r1, #0
 800c63e:	4618      	mov	r0, r3
 800c640:	f002 fd9c 	bl	800f17c <memset>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
                    INIT_CRC(&pkt->m.crc);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f203 1311 	addw	r3, r3, #273	@ 0x111
 800c652:	4618      	mov	r0, r3
 800c654:	f7ff ff7d 	bl	800c552 <prv_crc_init>

                    LWPKT_SET_STATE(pkt, LWPKT_CFG_USE_ADDR ? LWPKT_STATE_FROM
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2204      	movs	r2, #4
 800c65c:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                                                            : (LWPKT_CFG_USE_CMD ? LWPKT_STATE_CMD : LWPKT_STATE_LEN));
                }
                break;
 800c668:	e0c0      	b.n	800c7ec <lwpkt_read+0x22c>
                LWPKT_SET_STATE(pkt, LWPKT_STATE_LEN);
                break;
            }
#endif /* LWPKT_CFG_USE_CMD */
            case LWPKT_STATE_LEN: {
                pkt->m.len |= (b & 0x7FU) << ((size_t)7U * (size_t)pkt->m.index++);
 800c66a:	7b7b      	ldrb	r3, [r7, #13]
 800c66c:	f003 017f 	and.w	r1, r3, #127	@ 0x7f
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c676:	1c58      	adds	r0, r3, #1
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	f8c2 0118 	str.w	r0, [r2, #280]	@ 0x118
 800c67e:	461a      	mov	r2, r3
 800c680:	00d2      	lsls	r2, r2, #3
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	fa01 f203 	lsl.w	r2, r1, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c68e:	431a      	orrs	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                ADD_IN_TO_CRC(&pkt->m.crc, &b, 1U);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f203 1311 	addw	r3, r3, #273	@ 0x111
 800c69c:	f107 010d 	add.w	r1, r7, #13
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7ff ff05 	bl	800c4b2 <prv_crc_in>

                /* Last length bytes has MSB bit set to 0 */
                if ((b & 0x80U) == 0) {
 800c6a8:	7b7b      	ldrb	r3, [r7, #13]
 800c6aa:	b25b      	sxtb	r3, r3
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f2c0 809f 	blt.w	800c7f0 <lwpkt_read+0x230>
                    if (pkt->m.len == 0) {
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d108      	bne.n	800c6ce <lwpkt_read+0x10e>
                        LWPKT_SET_STATE(pkt, LWPKT_CFG_USE_CRC ? LWPKT_STATE_CRC : LWPKT_STATE_STOP);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2206      	movs	r2, #6
 800c6c0:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                    } else {
                        LWPKT_SET_STATE(pkt, LWPKT_STATE_DATA);
                    }
                }
                break;
 800c6cc:	e090      	b.n	800c7f0 <lwpkt_read+0x230>
                        LWPKT_SET_STATE(pkt, LWPKT_STATE_DATA);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2205      	movs	r2, #5
 800c6d2:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                break;
 800c6de:	e087      	b.n	800c7f0 <lwpkt_read+0x230>
            }
            case LWPKT_STATE_DATA: {
                if (pkt->m.index < sizeof(pkt->data)) {
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c6e6:	2bff      	cmp	r3, #255	@ 0xff
 800c6e8:	d823      	bhi.n	800c732 <lwpkt_read+0x172>
                    pkt->data[pkt->m.index++] = b;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c6f0:	1c59      	adds	r1, r3, #1
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	f8c2 1118 	str.w	r1, [r2, #280]	@ 0x118
 800c6f8:	7b79      	ldrb	r1, [r7, #13]
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	54d1      	strb	r1, [r2, r3]
                    ADD_IN_TO_CRC(&pkt->m.crc, &b, 1U);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f203 1311 	addw	r3, r3, #273	@ 0x111
 800c704:	f107 010d 	add.w	r1, r7, #13
 800c708:	2201      	movs	r2, #1
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7ff fed1 	bl	800c4b2 <prv_crc_in>
                    if (pkt->m.index == pkt->m.len) {
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d169      	bne.n	800c7f4 <lwpkt_read+0x234>
                        LWPKT_SET_STATE(pkt, LWPKT_CFG_USE_CRC ? LWPKT_STATE_CRC : LWPKT_STATE_STOP);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2206      	movs	r2, #6
 800c724:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                } else {
                    LWPKT_RESET(pkt);
                    res = lwpktERRMEM;
                    goto retpre;
                }
                break;
 800c730:	e060      	b.n	800c7f4 <lwpkt_read+0x234>
                    LWPKT_RESET(pkt);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800c738:	220c      	movs	r2, #12
 800c73a:	2100      	movs	r1, #0
 800c73c:	4618      	mov	r0, r3
 800c73e:	f002 fd1d 	bl	800f17c <memset>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
                    res = lwpktERRMEM;
 800c74a:	2307      	movs	r3, #7
 800c74c:	73fb      	strb	r3, [r7, #15]
                    goto retpre;
 800c74e:	e069      	b.n	800c824 <lwpkt_read+0x264>
            }
#if LWPKT_CFG_USE_CRC
            case LWPKT_STATE_CRC: {
                ADD_IN_TO_CRC(&pkt->m.crc, &b, 1U);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f203 1311 	addw	r3, r3, #273	@ 0x111
 800c756:	f107 010d 	add.w	r1, r7, #13
 800c75a:	2201      	movs	r2, #1
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7ff fea8 	bl	800c4b2 <prv_crc_in>
                if (pkt->m.crc.crc == 0) {
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 3111 	ldrb.w	r3, [r3, #273]	@ 0x111
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d110      	bne.n	800c78e <lwpkt_read+0x1ce>
                    LWPKT_SET_STATE(pkt, LWPKT_STATE_STOP);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2207      	movs	r2, #7
 800c770:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                } else {
                    LWPKT_RESET(pkt);
                    res = lwpktERRCRC;
                    goto retpre;
                }
                LWPKT_SET_STATE(pkt, LWPKT_STATE_STOP);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2207      	movs	r2, #7
 800c780:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2200      	movs	r2, #0
 800c788:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                break;
 800c78c:	e033      	b.n	800c7f6 <lwpkt_read+0x236>
                    LWPKT_RESET(pkt);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800c794:	220c      	movs	r2, #12
 800c796:	2100      	movs	r1, #0
 800c798:	4618      	mov	r0, r3
 800c79a:	f002 fcef 	bl	800f17c <memset>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
                    res = lwpktERRCRC;
 800c7a6:	2304      	movs	r3, #4
 800c7a8:	73fb      	strb	r3, [r7, #15]
                    goto retpre;
 800c7aa:	e03b      	b.n	800c824 <lwpkt_read+0x264>
            }
#endif /* LWPKT_CFG_USE_CRC */
            case LWPKT_STATE_STOP: {
                LWPKT_SET_STATE(pkt, LWPKT_STATE_START); /* Reset packet state */
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                if (b == LWPKT_STOP_BYTE) {
 800c7bc:	7b7b      	ldrb	r3, [r7, #13]
 800c7be:	2b55      	cmp	r3, #85	@ 0x55
 800c7c0:	d102      	bne.n	800c7c8 <lwpkt_read+0x208>
                    res = lwpktVALID; /* Packet fully valid, take data from it */
 800c7c2:	2303      	movs	r3, #3
 800c7c4:	73fb      	strb	r3, [r7, #15]
                    goto retpre;
 800c7c6:	e02d      	b.n	800c824 <lwpkt_read+0x264>
                } else {
                    res = lwpktERRSTOP; /* Packet is missing STOP byte! */
 800c7c8:	2305      	movs	r3, #5
 800c7ca:	73fb      	strb	r3, [r7, #15]
                    goto retpre;
 800c7cc:	e02a      	b.n	800c824 <lwpkt_read+0x264>
                }
            }
            default: {
                LWPKT_RESET(pkt);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800c7d4:	220c      	movs	r2, #12
 800c7d6:	2100      	movs	r1, #0
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f002 fccf 	bl	800f17c <memset>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
                res = lwpktERR; /* Hard error */
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	73fb      	strb	r3, [r7, #15]
                goto retpre;
 800c7ea:	e01b      	b.n	800c824 <lwpkt_read+0x264>
                break;
 800c7ec:	bf00      	nop
 800c7ee:	e002      	b.n	800c7f6 <lwpkt_read+0x236>
                break;
 800c7f0:	bf00      	nop
 800c7f2:	e000      	b.n	800c7f6 <lwpkt_read+0x236>
                break;
 800c7f4:	bf00      	nop
    while (lwrb_read(pkt->rx_rb, &b, 1) == 1) {
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800c7fc:	f107 010d 	add.w	r1, r7, #13
 800c800:	2201      	movs	r2, #1
 800c802:	4618      	mov	r0, r3
 800c804:	f000 fa4f 	bl	800cca6 <lwrb_read>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	f43f aef2 	beq.w	800c5f4 <lwpkt_read+0x34>
            }
        }
    }
    if (pkt->m.state == LWPKT_STATE_START) {
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800c816:	2b00      	cmp	r3, #0
 800c818:	d102      	bne.n	800c820 <lwpkt_read+0x260>
        res = lwpktWAITDATA;
 800c81a:	2306      	movs	r3, #6
 800c81c:	73fb      	strb	r3, [r7, #15]
 800c81e:	e001      	b.n	800c824 <lwpkt_read+0x264>
    } else {
        res = lwpktINPROG;
 800c820:	2302      	movs	r3, #2
 800c822:	73fb      	strb	r3, [r7, #15]
    }
retpre:
    SEND_EVT(pkt, LWPKT_EVT_POST_READ);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d005      	beq.n	800c83a <lwpkt_read+0x27a>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c834:	2107      	movs	r1, #7
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	4798      	blx	r3
    if (e) {
 800c83a:	7bbb      	ldrb	r3, [r7, #14]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d00a      	beq.n	800c856 <lwpkt_read+0x296>
        SEND_EVT(pkt, LWPKT_EVT_READ); /* Send read event */
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c846:	2b00      	cmp	r3, #0
 800c848:	d005      	beq.n	800c856 <lwpkt_read+0x296>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c850:	2102      	movs	r1, #2
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	4798      	blx	r3
    }
    return res;
 800c856:	7bfb      	ldrb	r3, [r7, #15]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3710      	adds	r7, #16
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <lwpkt_process>:
 * \param[in]       pkt: Packet instance
 * \param[in]       time: Current time in units of milliseconds
 * \return          \ref lwpktOK if processing OK, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_process(lwpkt_t* pkt, uint32_t time) {
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
    lwpktr_t pktres;

    if (pkt == NULL) {
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d101      	bne.n	800c874 <lwpkt_process+0x14>
        return lwpktERR;
 800c870:	2301      	movs	r3, #1
 800c872:	e039      	b.n	800c8e8 <lwpkt_process+0x88>
    }

    /* Packet protocol data read */
    pktres = lwpkt_read(pkt);
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7ff fea3 	bl	800c5c0 <lwpkt_read>
 800c87a:	4603      	mov	r3, r0
 800c87c:	73fb      	strb	r3, [r7, #15]
    if (pktres == lwpktVALID) {
 800c87e:	7bfb      	ldrb	r3, [r7, #15]
 800c880:	2b03      	cmp	r3, #3
 800c882:	d10f      	bne.n	800c8a4 <lwpkt_process+0x44>
        pkt->last_rx_time = time;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	683a      	ldr	r2, [r7, #0]
 800c888:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        SEND_EVT(pkt, LWPKT_EVT_PKT);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c892:	2b00      	cmp	r3, #0
 800c894:	d027      	beq.n	800c8e6 <lwpkt_process+0x86>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c89c:	2100      	movs	r1, #0
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	4798      	blx	r3
 800c8a2:	e020      	b.n	800c8e6 <lwpkt_process+0x86>
    } else if (pktres == lwpktINPROG) {
 800c8a4:	7bfb      	ldrb	r3, [r7, #15]
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d119      	bne.n	800c8de <lwpkt_process+0x7e>
        if ((time - pkt->last_rx_time) >= LWPKT_CFG_PROCESS_INPROG_TIMEOUT) {
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c8b0:	683a      	ldr	r2, [r7, #0]
 800c8b2:	1ad3      	subs	r3, r2, r3
 800c8b4:	2b63      	cmp	r3, #99	@ 0x63
 800c8b6:	d916      	bls.n	800c8e6 <lwpkt_process+0x86>
            lwpkt_reset(pkt);
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f000 f8d5 	bl	800ca68 <lwpkt_reset>
            pkt->last_rx_time = time;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	683a      	ldr	r2, [r7, #0]
 800c8c2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            SEND_EVT(pkt, LWPKT_EVT_TIMEOUT);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d00a      	beq.n	800c8e6 <lwpkt_process+0x86>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c8d6:	2101      	movs	r1, #1
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	4798      	blx	r3
 800c8dc:	e003      	b.n	800c8e6 <lwpkt_process+0x86>
        }
    } else {
        pkt->last_rx_time = time;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	683a      	ldr	r2, [r7, #0]
 800c8e2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    }
    return lwpktOK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3710      	adds	r7, #16
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <lwpkt_write>:
            lwpkt_addr_t to,
#endif /* LWPKT_CFG_USE_ADDR || __DOXYGEN__ */
#if LWPKT_CFG_USE_CMD || __DOXYGEN__
            uint8_t cmd,
#endif /* LWPKT_CFG_USE_CMD || __DOXYGEN__ */
            const void* data, size_t len) {
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b08a      	sub	sp, #40	@ 0x28
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
    lwpktr_t res = lwpktOK;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    lwpkt_crc_t crc;
#endif /* LWPKT_CFG_USE_CRC */
#if LWPKT_CFG_ADDR_EXTENDED
    lwpkt_addr_t addr;
#endif /* LWPKT_CFG_ADDR_EXTENDED */
    size_t org_len = len;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	61bb      	str	r3, [r7, #24]
    uint8_t b;

    SEND_EVT(pkt, LWPKT_EVT_PRE_WRITE);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d005      	beq.n	800c91c <lwpkt_write+0x2c>
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800c916:	2104      	movs	r1, #4
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	4798      	blx	r3

    if (!LWPKT_IS_VALID(pkt)) {
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d103      	bne.n	800c92a <lwpkt_write+0x3a>
        res = lwpktERR;
 800c922:	2301      	movs	r3, #1
 800c924:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto fast_return;
 800c928:	e07e      	b.n	800ca28 <lwpkt_write+0x138>
    } else {
        /* Check for required memory for packet */
        size_t min_mem = 2U, tmp_len = 0;
 800c92a:	2302      	movs	r3, #2
 800c92c:	623b      	str	r3, [r7, #32]
 800c92e:	2300      	movs	r3, #0
 800c930:	61fb      	str	r3, [r7, #28]
        /* CMD part */
        ++min_mem;
#endif /* LWPKT_CFG_USE_CMD */

        /* Data length */
        tmp_len = len;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	61fb      	str	r3, [r7, #28]
        do {
            ++min_mem;
 800c936:	6a3b      	ldr	r3, [r7, #32]
 800c938:	3301      	adds	r3, #1
 800c93a:	623b      	str	r3, [r7, #32]
            tmp_len >>= 7U;
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	09db      	lsrs	r3, r3, #7
 800c940:	61fb      	str	r3, [r7, #28]
        } while (tmp_len > 0);
 800c942:	69fb      	ldr	r3, [r7, #28]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d1f6      	bne.n	800c936 <lwpkt_write+0x46>

        /* Data length */
        min_mem += len;
 800c948:	6a3a      	ldr	r2, [r7, #32]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	4413      	add	r3, r2
 800c94e:	623b      	str	r3, [r7, #32]

#if LWPKT_CFG_USE_CRC
        /* CRC part */
        ++min_mem;
 800c950:	6a3b      	ldr	r3, [r7, #32]
 800c952:	3301      	adds	r3, #1
 800c954:	623b      	str	r3, [r7, #32]
#endif /* LWPKT_CFG_USE_CRC */

        /* Verify enough memory */
        if (lwrb_get_free(pkt->tx_rb) < min_mem) {
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800c95c:	4618      	mov	r0, r3
 800c95e:	f000 fa4d 	bl	800cdfc <lwrb_get_free>
 800c962:	4602      	mov	r2, r0
 800c964:	6a3b      	ldr	r3, [r7, #32]
 800c966:	4293      	cmp	r3, r2
 800c968:	d903      	bls.n	800c972 <lwpkt_write+0x82>
            res = lwpktERRMEM;
 800c96a:	2307      	movs	r3, #7
 800c96c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto fast_return;
 800c970:	e05a      	b.n	800ca28 <lwpkt_write+0x138>
        }
    }

#if LWPKT_CFG_USE_CRC
    prv_crc_init(&crc);
 800c972:	f107 0314 	add.w	r3, r7, #20
 800c976:	4618      	mov	r0, r3
 800c978:	f7ff fdeb 	bl	800c552 <prv_crc_init>
#endif /* LWPKT_CFG_USE_CRC */

    /* Start byte */
    b = LWPKT_START_BYTE;
 800c97c:	23aa      	movs	r3, #170	@ 0xaa
 800c97e:	74fb      	strb	r3, [r7, #19]
    lwrb_write(pkt->tx_rb, &b, 1U);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800c986:	f107 0113 	add.w	r1, r7, #19
 800c98a:	2201      	movs	r2, #1
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 f8df 	bl	800cb50 <lwrb_write>
    WRITE_WITH_CRC(&crc, pkt->tx_rb, &cmd, 1);
#endif /* LWPKT_CFG_USE_CMD */

    /* Length bytes */
    do {
        b = (len & 0x7FU) | (len > 0x7FU ? 0x80U : 0);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	b2db      	uxtb	r3, r3
 800c996:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	2a7f      	cmp	r2, #127	@ 0x7f
 800c9a0:	d901      	bls.n	800c9a6 <lwpkt_write+0xb6>
 800c9a2:	2280      	movs	r2, #128	@ 0x80
 800c9a4:	e000      	b.n	800c9a8 <lwpkt_write+0xb8>
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	74fb      	strb	r3, [r7, #19]
        WRITE_WITH_CRC(&crc, pkt->tx_rb, &b, 1);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800c9b4:	f107 0113 	add.w	r1, r7, #19
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f000 f8c8 	bl	800cb50 <lwrb_write>
 800c9c0:	f107 0113 	add.w	r1, r7, #19
 800c9c4:	f107 0314 	add.w	r3, r7, #20
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7ff fd71 	bl	800c4b2 <prv_crc_in>
        len >>= 7U;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	09db      	lsrs	r3, r3, #7
 800c9d4:	607b      	str	r3, [r7, #4]
    } while (len > 0);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1da      	bne.n	800c992 <lwpkt_write+0xa2>

    /* Data bytes */
    if (org_len > 0) {
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00e      	beq.n	800ca00 <lwpkt_write+0x110>
        WRITE_WITH_CRC(&crc, pkt->tx_rb, data, org_len);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800c9e8:	69ba      	ldr	r2, [r7, #24]
 800c9ea:	68b9      	ldr	r1, [r7, #8]
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 f8af 	bl	800cb50 <lwrb_write>
 800c9f2:	f107 0314 	add.w	r3, r7, #20
 800c9f6:	69ba      	ldr	r2, [r7, #24]
 800c9f8:	68b9      	ldr	r1, [r7, #8]
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7ff fd59 	bl	800c4b2 <prv_crc_in>
    }

#if LWPKT_CFG_USE_CRC
    /* CRC byte */
    lwrb_write(pkt->tx_rb, &crc.crc, 1);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800ca06:	f107 0114 	add.w	r1, r7, #20
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f000 f89f 	bl	800cb50 <lwrb_write>
#endif /* LWPKT_CFG_USE_CRC */

    /* Stop byte */
    b = LWPKT_STOP_BYTE;
 800ca12:	2355      	movs	r3, #85	@ 0x55
 800ca14:	74fb      	strb	r3, [r7, #19]
    lwrb_write(pkt->tx_rb, &b, 1U);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800ca1c:	f107 0113 	add.w	r1, r7, #19
 800ca20:	2201      	movs	r2, #1
 800ca22:	4618      	mov	r0, r3
 800ca24:	f000 f894 	bl	800cb50 <lwrb_write>

fast_return:
    /* Final step to notify app */
    SEND_EVT(pkt, LWPKT_EVT_POST_WRITE); /* Release write event */
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d005      	beq.n	800ca3e <lwpkt_write+0x14e>
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800ca38:	2105      	movs	r1, #5
 800ca3a:	68f8      	ldr	r0, [r7, #12]
 800ca3c:	4798      	blx	r3
    if (res == lwpktOK) {
 800ca3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d10a      	bne.n	800ca5c <lwpkt_write+0x16c>
        SEND_EVT(pkt, LWPKT_EVT_WRITE); /* Send write event */
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d005      	beq.n	800ca5c <lwpkt_write+0x16c>
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800ca56:	2103      	movs	r1, #3
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	4798      	blx	r3
    }
    return res;
 800ca5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3728      	adds	r7, #40	@ 0x28
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <lwpkt_reset>:
 * \brief           Reset packet state
 * \param[in]       pkt: Packet instance
 * \return          \ref lwpktOK on success, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_reset(lwpkt_t* pkt) {
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
    if (!LWPKT_IS_VALID(pkt)) {
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d101      	bne.n	800ca7a <lwpkt_reset+0x12>
        return lwpktERR;
 800ca76:	2301      	movs	r3, #1
 800ca78:	e00c      	b.n	800ca94 <lwpkt_reset+0x2c>
    }
    LWPKT_RESET(pkt);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800ca80:	220c      	movs	r2, #12
 800ca82:	2100      	movs	r1, #0
 800ca84:	4618      	mov	r0, r3
 800ca86:	f002 fb79 	bl	800f17c <memset>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
    return lwpktOK;
 800ca92:	2300      	movs	r3, #0
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <lwpkt_set_evt_fn>:
 * \param[in]       pkt: Packet structure
 * \param[in]       evt_fn: Function pointer for events
 * \return          \ref lwpktOK on success, member of \ref lwpktr_t otherwise
 */
lwpktr_t
lwpkt_set_evt_fn(lwpkt_t* pkt, lwpkt_evt_fn evt_fn) {
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
    pkt->evt_fn = evt_fn;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	683a      	ldr	r2, [r7, #0]
 800caaa:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

    return lwpktOK;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(lwrb_t* buff, void* buffdata, lwrb_sz_t size) {
 800cabc:	b480      	push	{r7}
 800cabe:	b089      	sub	sp, #36	@ 0x24
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d005      	beq.n	800cada <lwrb_init+0x1e>
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d002      	beq.n	800cada <lwrb_init+0x1e>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d101      	bne.n	800cade <lwrb_init+0x22>
        return 0;
 800cada:	2300      	movs	r3, #0
 800cadc:	e019      	b.n	800cb12 <lwrb_init+0x56>
    }

    buff->evt_fn = NULL;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2200      	movs	r2, #0
 800cae2:	611a      	str	r2, [r3, #16]
    buff->size = size;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->w, 0);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	330c      	adds	r3, #12
 800caf4:	61fb      	str	r3, [r7, #28]
 800caf6:	2300      	movs	r3, #0
 800caf8:	617b      	str	r3, [r7, #20]
 800cafa:	697a      	ldr	r2, [r7, #20]
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->r, 0);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	3308      	adds	r3, #8
 800cb04:	61bb      	str	r3, [r7, #24]
 800cb06:	2300      	movs	r3, #0
 800cb08:	613b      	str	r3, [r7, #16]
 800cb0a:	693a      	ldr	r2, [r7, #16]
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	601a      	str	r2, [r3, #0]
    return 1;
 800cb10:	2301      	movs	r3, #1
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3724      	adds	r7, #36	@ 0x24
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr

0800cb1e <lwrb_set_evt_fn>:
 * \brief           Set event function callback for different buffer operations
 * \param[in]       buff: Ring buffer instance
 * \param[in]       evt_fn: Callback function
 */
void
lwrb_set_evt_fn(lwrb_t* buff, lwrb_evt_fn evt_fn) {
 800cb1e:	b480      	push	{r7}
 800cb20:	b083      	sub	sp, #12
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
 800cb26:	6039      	str	r1, [r7, #0]
    if (BUF_IS_VALID(buff)) {
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00a      	beq.n	800cb44 <lwrb_set_evt_fn+0x26>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d006      	beq.n	800cb44 <lwrb_set_evt_fn+0x26>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d002      	beq.n	800cb44 <lwrb_set_evt_fn+0x26>
        buff->evt_fn = evt_fn;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	683a      	ldr	r2, [r7, #0]
 800cb42:	611a      	str	r2, [r3, #16]
    }
}
 800cb44:	bf00      	nop
 800cb46:	370c      	adds	r7, #12
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array.
 */
lwrb_sz_t
lwrb_write(lwrb_t* buff, const void* data, lwrb_sz_t btw) {
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b088      	sub	sp, #32
 800cb54:	af02      	add	r7, sp, #8
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
    lwrb_sz_t written = 0;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	617b      	str	r3, [r7, #20]

    if (lwrb_write_ex(buff, data, btw, &written, 0)) {
 800cb60:	f107 0314 	add.w	r3, r7, #20
 800cb64:	2200      	movs	r2, #0
 800cb66:	9200      	str	r2, [sp, #0]
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	68b9      	ldr	r1, [r7, #8]
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f000 f80a 	bl	800cb86 <lwrb_write_ex>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d001      	beq.n	800cb7c <lwrb_write+0x2c>
        return written;
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	e000      	b.n	800cb7e <lwrb_write+0x2e>
    }
    return 0;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3718      	adds	r7, #24
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <lwrb_write_ex>:
 *                      \ref LWRB_FLAG_WRITE_ALL: Request to write all data (up to btw).
 *                          Will early return if no memory available
 * \return          `1` if write operation OK, `0` otherwise
 */
uint8_t
lwrb_write_ex(lwrb_t* buff, const void* data, lwrb_sz_t btw, lwrb_sz_t* bw, uint16_t flags) {
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b08c      	sub	sp, #48	@ 0x30
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	60f8      	str	r0, [r7, #12]
 800cb8e:	60b9      	str	r1, [r7, #8]
 800cb90:	607a      	str	r2, [r7, #4]
 800cb92:	603b      	str	r3, [r7, #0]
    lwrb_sz_t tocopy, free, buff_w_ptr;
    const uint8_t* d = data;
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00d      	beq.n	800cbba <lwrb_write_ex+0x34>
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d009      	beq.n	800cbba <lwrb_write_ex+0x34>
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d005      	beq.n	800cbba <lwrb_write_ex+0x34>
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d002      	beq.n	800cbba <lwrb_write_ex+0x34>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d101      	bne.n	800cbbe <lwrb_write_ex+0x38>
        return 0;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	e06f      	b.n	800cc9e <lwrb_write_ex+0x118>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f000 f91c 	bl	800cdfc <lwrb_get_free>
 800cbc4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* If no memory, or if user wants to write ALL data but no enough space, exit early */
    if (free == 0 || (free < btw && flags & LWRB_FLAG_WRITE_ALL)) {
 800cbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d008      	beq.n	800cbde <lwrb_write_ex+0x58>
 800cbcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d206      	bcs.n	800cbe2 <lwrb_write_ex+0x5c>
 800cbd4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cbd6:	f003 0301 	and.w	r3, r3, #1
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d001      	beq.n	800cbe2 <lwrb_write_ex+0x5c>
        return 0;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	e05d      	b.n	800cc9e <lwrb_write_ex+0x118>
    }
    btw = BUF_MIN(free, btw);
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	bf28      	it	cs
 800cbea:	4613      	movcs	r3, r2
 800cbec:	607b      	str	r3, [r7, #4]
    buff_w_ptr = LWRB_LOAD(buff->w, memory_order_acquire);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	330c      	adds	r3, #12
 800cbf2:	623b      	str	r3, [r7, #32]
 800cbf4:	6a3b      	ldr	r3, [r7, #32]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f3bf 8f5b 	dmb	ish
 800cbfc:	617b      	str	r3, [r7, #20]
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_w_ptr, btw);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	685a      	ldr	r2, [r3, #4]
 800cc06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc08:	1ad3      	subs	r3, r2, r3
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	bf28      	it	cs
 800cc10:	4613      	movcs	r3, r2
 800cc12:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(&buff->buff[buff_w_ptr], d, tocopy);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681a      	ldr	r2, [r3, #0]
 800cc18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc1a:	4413      	add	r3, r2
 800cc1c:	69fa      	ldr	r2, [r7, #28]
 800cc1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc20:	4618      	mov	r0, r3
 800cc22:	f002 fba2 	bl	800f36a <memcpy>
    buff_w_ptr += tocopy;
 800cc26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc28:	69fb      	ldr	r3, [r7, #28]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    btw -= tocopy;
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	1ad3      	subs	r3, r2, r3
 800cc34:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00a      	beq.n	800cc52 <lwrb_write_ex+0xcc>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6818      	ldr	r0, [r3, #0]
 800cc40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc42:	69fb      	ldr	r3, [r7, #28]
 800cc44:	4413      	add	r3, r2
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	4619      	mov	r1, r3
 800cc4a:	f002 fb8e 	bl	800f36a <memcpy>
        buff_w_ptr = btw;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= buff->size) {
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d301      	bcc.n	800cc60 <lwrb_write_ex+0xda>
        buff_w_ptr = 0;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    LWRB_STORE(buff->w, buff_w_ptr, memory_order_release);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	330c      	adds	r3, #12
 800cc64:	61bb      	str	r3, [r7, #24]
 800cc66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc68:	613b      	str	r3, [r7, #16]
 800cc6a:	693a      	ldr	r2, [r7, #16]
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	f3bf 8f5b 	dmb	ish
 800cc72:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	691b      	ldr	r3, [r3, #16]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d007      	beq.n	800cc8c <lwrb_write_ex+0x106>
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	691b      	ldr	r3, [r3, #16]
 800cc80:	69f9      	ldr	r1, [r7, #28]
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	440a      	add	r2, r1
 800cc86:	2101      	movs	r1, #1
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	4798      	blx	r3
    if (bw != NULL) {
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d004      	beq.n	800cc9c <lwrb_write_ex+0x116>
        *bw = tocopy + btw;
 800cc92:	69fa      	ldr	r2, [r7, #28]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	441a      	add	r2, r3
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	601a      	str	r2, [r3, #0]
    }
    return 1;
 800cc9c:	2301      	movs	r3, #1
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3730      	adds	r7, #48	@ 0x30
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <lwrb_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
lwrb_sz_t
lwrb_read(lwrb_t* buff, void* data, lwrb_sz_t btr) {
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b088      	sub	sp, #32
 800ccaa:	af02      	add	r7, sp, #8
 800ccac:	60f8      	str	r0, [r7, #12]
 800ccae:	60b9      	str	r1, [r7, #8]
 800ccb0:	607a      	str	r2, [r7, #4]
    lwrb_sz_t read = 0;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	617b      	str	r3, [r7, #20]

    if (lwrb_read_ex(buff, data, btr, &read, 0)) {
 800ccb6:	f107 0314 	add.w	r3, r7, #20
 800ccba:	2200      	movs	r2, #0
 800ccbc:	9200      	str	r2, [sp, #0]
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	68b9      	ldr	r1, [r7, #8]
 800ccc2:	68f8      	ldr	r0, [r7, #12]
 800ccc4:	f000 f80a 	bl	800ccdc <lwrb_read_ex>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d001      	beq.n	800ccd2 <lwrb_read+0x2c>
        return read;
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	e000      	b.n	800ccd4 <lwrb_read+0x2e>
    }
    return 0;
 800ccd2:	2300      	movs	r3, #0
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3718      	adds	r7, #24
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <lwrb_read_ex>:
 *                      \ref LWRB_FLAG_READ_ALL: Request to read all data (up to btr).
 *                          Will early return if no enough bytes in the buffer
 * \return          `1` if read operation OK, `0` otherwise
 */
uint8_t
lwrb_read_ex(lwrb_t* buff, void* data, lwrb_sz_t btr, lwrb_sz_t* br, uint16_t flags) {
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b08c      	sub	sp, #48	@ 0x30
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	607a      	str	r2, [r7, #4]
 800cce8:	603b      	str	r3, [r7, #0]
    lwrb_sz_t tocopy, full, buff_r_ptr;
    uint8_t* d = data;
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00d      	beq.n	800cd10 <lwrb_read_ex+0x34>
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d009      	beq.n	800cd10 <lwrb_read_ex+0x34>
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d005      	beq.n	800cd10 <lwrb_read_ex+0x34>
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d002      	beq.n	800cd10 <lwrb_read_ex+0x34>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d101      	bne.n	800cd14 <lwrb_read_ex+0x38>
        return 0;
 800cd10:	2300      	movs	r3, #0
 800cd12:	e06f      	b.n	800cdf4 <lwrb_read_ex+0x118>
    }

    /* Calculate maximum number of bytes available to read */
    full = lwrb_get_full(buff);
 800cd14:	68f8      	ldr	r0, [r7, #12]
 800cd16:	f000 f8b2 	bl	800ce7e <lwrb_get_full>
 800cd1a:	6278      	str	r0, [r7, #36]	@ 0x24
    if (full == 0 || (full < btr && (flags & LWRB_FLAG_READ_ALL))) {
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d008      	beq.n	800cd34 <lwrb_read_ex+0x58>
 800cd22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d206      	bcs.n	800cd38 <lwrb_read_ex+0x5c>
 800cd2a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cd2c:	f003 0301 	and.w	r3, r3, #1
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d001      	beq.n	800cd38 <lwrb_read_ex+0x5c>
        return 0;
 800cd34:	2300      	movs	r3, #0
 800cd36:	e05d      	b.n	800cdf4 <lwrb_read_ex+0x118>
    }
    btr = BUF_MIN(full, btr);
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	bf28      	it	cs
 800cd40:	4613      	movcs	r3, r2
 800cd42:	607b      	str	r3, [r7, #4]
    buff_r_ptr = LWRB_LOAD(buff->r, memory_order_acquire);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	3308      	adds	r3, #8
 800cd48:	623b      	str	r3, [r7, #32]
 800cd4a:	6a3b      	ldr	r3, [r7, #32]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f3bf 8f5b 	dmb	ish
 800cd52:	617b      	str	r3, [r7, #20]
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_r_ptr, btr);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	685a      	ldr	r2, [r3, #4]
 800cd5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd5e:	1ad3      	subs	r3, r2, r3
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	4293      	cmp	r3, r2
 800cd64:	bf28      	it	cs
 800cd66:	4613      	movcs	r3, r2
 800cd68:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(d, &buff->buff[buff_r_ptr], tocopy);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd70:	4413      	add	r3, r2
 800cd72:	69fa      	ldr	r2, [r7, #28]
 800cd74:	4619      	mov	r1, r3
 800cd76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cd78:	f002 faf7 	bl	800f36a <memcpy>
    buff_r_ptr += tocopy;
 800cd7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	4413      	add	r3, r2
 800cd82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    btr -= tocopy;
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d00a      	beq.n	800cda8 <lwrb_read_ex+0xcc>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 800cd92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	18d0      	adds	r0, r2, r3
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	4619      	mov	r1, r3
 800cda0:	f002 fae3 	bl	800f36a <memcpy>
        buff_r_ptr = btr;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= buff->size) {
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d301      	bcc.n	800cdb6 <lwrb_read_ex+0xda>
        buff_r_ptr = 0;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    LWRB_STORE(buff->r, buff_r_ptr, memory_order_release);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	3308      	adds	r3, #8
 800cdba:	61bb      	str	r3, [r7, #24]
 800cdbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdbe:	613b      	str	r3, [r7, #16]
 800cdc0:	693a      	ldr	r2, [r7, #16]
 800cdc2:	69bb      	ldr	r3, [r7, #24]
 800cdc4:	f3bf 8f5b 	dmb	ish
 800cdc8:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d007      	beq.n	800cde2 <lwrb_read_ex+0x106>
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	691b      	ldr	r3, [r3, #16]
 800cdd6:	69f9      	ldr	r1, [r7, #28]
 800cdd8:	687a      	ldr	r2, [r7, #4]
 800cdda:	440a      	add	r2, r1
 800cddc:	2100      	movs	r1, #0
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	4798      	blx	r3
    if (br != NULL) {
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d004      	beq.n	800cdf2 <lwrb_read_ex+0x116>
        *br = tocopy + btr;
 800cde8:	69fa      	ldr	r2, [r7, #28]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	441a      	add	r2, r3
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	601a      	str	r2, [r3, #0]
    }
    return 1;
 800cdf2:	2301      	movs	r3, #1
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3730      	adds	r7, #48	@ 0x30
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Ring buffer instance
 * \return          Number of free bytes in memory
 */
lwrb_sz_t
lwrb_get_free(const lwrb_t* buff) {
 800cdfc:	b480      	push	{r7}
 800cdfe:	b08b      	sub	sp, #44	@ 0x2c
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
    lwrb_sz_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d007      	beq.n	800ce1a <lwrb_get_free+0x1e>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d003      	beq.n	800ce1a <lwrb_get_free+0x1e>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d101      	bne.n	800ce1e <lwrb_get_free+0x22>
        return 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	e029      	b.n	800ce72 <lwrb_get_free+0x76>
     * - buff->w pointer will not change by another process/interrupt because we are in write mode just now
     * - buff->r pointer may change by another process. If it gets changed after buff->r has been loaded to local variable,
     *    buffer will see "free size" less than it actually is. This is not a problem, application can
     *    always try again to write more data to remaining free memory that was read just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	330c      	adds	r3, #12
 800ce22:	623b      	str	r3, [r7, #32]
 800ce24:	6a3b      	ldr	r3, [r7, #32]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	613b      	str	r3, [r7, #16]
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	3308      	adds	r3, #8
 800ce32:	61bb      	str	r3, [r7, #24]
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	60fb      	str	r3, [r7, #12]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	617b      	str	r3, [r7, #20]

    if (w == r) {
 800ce3e:	69fa      	ldr	r2, [r7, #28]
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d103      	bne.n	800ce4e <lwrb_get_free+0x52>
        size = buff->size;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce4c:	e00f      	b.n	800ce6e <lwrb_get_free+0x72>
    } else if (r > w) {
 800ce4e:	697a      	ldr	r2, [r7, #20]
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d904      	bls.n	800ce60 <lwrb_get_free+0x64>
        size = r - w;
 800ce56:	697a      	ldr	r2, [r7, #20]
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	1ad3      	subs	r3, r2, r3
 800ce5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce5e:	e006      	b.n	800ce6e <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	685a      	ldr	r2, [r3, #4]
 800ce64:	6979      	ldr	r1, [r7, #20]
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	1acb      	subs	r3, r1, r3
 800ce6a:	4413      	add	r3, r2
 800ce6c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce70:	3b01      	subs	r3, #1
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	372c      	adds	r7, #44	@ 0x2c
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr

0800ce7e <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Ring buffer instance
 * \return          Number of bytes ready to be read
 */
lwrb_sz_t
lwrb_get_full(const lwrb_t* buff) {
 800ce7e:	b480      	push	{r7}
 800ce80:	b08b      	sub	sp, #44	@ 0x2c
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
    lwrb_sz_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d007      	beq.n	800ce9c <lwrb_get_full+0x1e>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d003      	beq.n	800ce9c <lwrb_get_full+0x1e>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d101      	bne.n	800cea0 <lwrb_get_full+0x22>
        return 0;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	e027      	b.n	800cef0 <lwrb_get_full+0x72>
     * - buff->r pointer will not change by another process/interrupt because we are in read mode just now
     * - buff->w pointer may change by another process. If it gets changed after buff->w has been loaded to local variable,
     *    buffer will see "full size" less than it really is. This is not a problem, application can
     *    always try again to read more data from remaining full memory that was written just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	330c      	adds	r3, #12
 800cea4:	623b      	str	r3, [r7, #32]
 800cea6:	6a3b      	ldr	r3, [r7, #32]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	613b      	str	r3, [r7, #16]
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	3308      	adds	r3, #8
 800ceb4:	61bb      	str	r3, [r7, #24]
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	60fb      	str	r3, [r7, #12]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	617b      	str	r3, [r7, #20]

    if (w == r) {
 800cec0:	69fa      	ldr	r2, [r7, #28]
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d102      	bne.n	800cece <lwrb_get_full+0x50>
        size = 0;
 800cec8:	2300      	movs	r3, #0
 800ceca:	627b      	str	r3, [r7, #36]	@ 0x24
 800cecc:	e00f      	b.n	800ceee <lwrb_get_full+0x70>
    } else if (w > r) {
 800cece:	69fa      	ldr	r2, [r7, #28]
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d904      	bls.n	800cee0 <lwrb_get_full+0x62>
        size = w - r;
 800ced6:	69fa      	ldr	r2, [r7, #28]
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	1ad3      	subs	r3, r2, r3
 800cedc:	627b      	str	r3, [r7, #36]	@ 0x24
 800cede:	e006      	b.n	800ceee <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	685a      	ldr	r2, [r3, #4]
 800cee4:	69f9      	ldr	r1, [r7, #28]
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	1acb      	subs	r3, r1, r3
 800ceea:	4413      	add	r3, r2
 800ceec:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    return size;
 800ceee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	372c      	adds	r7, #44	@ 0x2c
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <lwrb_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Ring buffer instance
 * \return          Linear buffer start address
 */
void*
lwrb_get_linear_block_read_address(const lwrb_t* buff) {
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d007      	beq.n	800cf1a <lwrb_get_linear_block_read_address+0x1e>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d003      	beq.n	800cf1a <lwrb_get_linear_block_read_address+0x1e>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d101      	bne.n	800cf1e <lwrb_get_linear_block_read_address+0x22>
        return NULL;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	e004      	b.n	800cf28 <lwrb_get_linear_block_read_address+0x2c>
    }
    return &buff->buff[buff->r];
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	4413      	add	r3, r2
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	370c      	adds	r7, #12
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr

0800cf34 <lwrb_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Ring buffer instance
 * \return          Linear buffer size in units of bytes for read operation
 */
lwrb_sz_t
lwrb_get_linear_block_read_length(const lwrb_t* buff) {
 800cf34:	b480      	push	{r7}
 800cf36:	b08b      	sub	sp, #44	@ 0x2c
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
    lwrb_sz_t len, w, r;

    if (!BUF_IS_VALID(buff)) {
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d007      	beq.n	800cf52 <lwrb_get_linear_block_read_length+0x1e>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d003      	beq.n	800cf52 <lwrb_get_linear_block_read_length+0x1e>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d101      	bne.n	800cf56 <lwrb_get_linear_block_read_length+0x22>
        return 0;
 800cf52:	2300      	movs	r3, #0
 800cf54:	e025      	b.n	800cfa2 <lwrb_get_linear_block_read_length+0x6e>

    /*
     * Use temporary values in case they are changed during operations.
     * See lwrb_buff_free or lwrb_buff_full functions for more information why this is OK.
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	330c      	adds	r3, #12
 800cf5a:	623b      	str	r3, [r7, #32]
 800cf5c:	6a3b      	ldr	r3, [r7, #32]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	613b      	str	r3, [r7, #16]
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	3308      	adds	r3, #8
 800cf6a:	61bb      	str	r3, [r7, #24]
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	60fb      	str	r3, [r7, #12]
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	617b      	str	r3, [r7, #20]

    if (w > r) {
 800cf76:	69fa      	ldr	r2, [r7, #28]
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d904      	bls.n	800cf88 <lwrb_get_linear_block_read_length+0x54>
        len = w - r;
 800cf7e:	69fa      	ldr	r2, [r7, #28]
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	1ad3      	subs	r3, r2, r3
 800cf84:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf86:	e00b      	b.n	800cfa0 <lwrb_get_linear_block_read_length+0x6c>
    } else if (r > w) {
 800cf88:	697a      	ldr	r2, [r7, #20]
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d905      	bls.n	800cf9c <lwrb_get_linear_block_read_length+0x68>
        len = buff->size - r;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	685a      	ldr	r2, [r3, #4]
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	1ad3      	subs	r3, r2, r3
 800cf98:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf9a:	e001      	b.n	800cfa0 <lwrb_get_linear_block_read_length+0x6c>
    } else {
        len = 0;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    return len;
 800cfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	372c      	adds	r7, #44	@ 0x2c
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr

0800cfae <lwrb_skip>:
 * \param[in]       buff: Ring buffer instance
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
lwrb_sz_t
lwrb_skip(lwrb_t* buff, lwrb_sz_t len) {
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b088      	sub	sp, #32
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
 800cfb6:	6039      	str	r1, [r7, #0]
    lwrb_sz_t full, r;

    if (!BUF_IS_VALID(buff) || len == 0) {
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d00a      	beq.n	800cfd4 <lwrb_skip+0x26>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d006      	beq.n	800cfd4 <lwrb_skip+0x26>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	685b      	ldr	r3, [r3, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d002      	beq.n	800cfd4 <lwrb_skip+0x26>
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d101      	bne.n	800cfd8 <lwrb_skip+0x2a>
        return 0;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	e036      	b.n	800d046 <lwrb_skip+0x98>
    }

    full = lwrb_get_full(buff);
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f7ff ff50 	bl	800ce7e <lwrb_get_full>
 800cfde:	61b8      	str	r0, [r7, #24]
    len = BUF_MIN(len, full);
 800cfe0:	683a      	ldr	r2, [r7, #0]
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	bf28      	it	cs
 800cfe8:	4613      	movcs	r3, r2
 800cfea:	603b      	str	r3, [r7, #0]
    r = LWRB_LOAD(buff->r, memory_order_acquire);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	3308      	adds	r3, #8
 800cff0:	617b      	str	r3, [r7, #20]
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f3bf 8f5b 	dmb	ish
 800cffa:	60fb      	str	r3, [r7, #12]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	61fb      	str	r3, [r7, #28]
    r += len;
 800d000:	69fa      	ldr	r2, [r7, #28]
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	4413      	add	r3, r2
 800d006:	61fb      	str	r3, [r7, #28]
    if (r >= buff->size) {
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	69fa      	ldr	r2, [r7, #28]
 800d00e:	429a      	cmp	r2, r3
 800d010:	d304      	bcc.n	800d01c <lwrb_skip+0x6e>
        r -= buff->size;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	69fa      	ldr	r2, [r7, #28]
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	61fb      	str	r3, [r7, #28]
    }
    LWRB_STORE(buff->r, r, memory_order_release);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	3308      	adds	r3, #8
 800d020:	613b      	str	r3, [r7, #16]
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	60bb      	str	r3, [r7, #8]
 800d026:	68ba      	ldr	r2, [r7, #8]
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	f3bf 8f5b 	dmb	ish
 800d02e:	601a      	str	r2, [r3, #0]
    BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	691b      	ldr	r3, [r3, #16]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d005      	beq.n	800d044 <lwrb_skip+0x96>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	691b      	ldr	r3, [r3, #16]
 800d03c:	683a      	ldr	r2, [r7, #0]
 800d03e:	2100      	movs	r1, #0
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	4798      	blx	r3
    return len;
 800d044:	683b      	ldr	r3, [r7, #0]
}
 800d046:	4618      	mov	r0, r3
 800d048:	3720      	adds	r7, #32
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <motor_init>:

/**
 * @brief Update the timer_reload value to the current one
 * @retval None
 */
void motor_init(motor_t* motor){
 800d04e:	b480      	push	{r7}
 800d050:	b083      	sub	sp, #12
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
	motor->timer_reload = __HAL_TIM_GET_AUTORELOAD(motor->timer);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	691b      	ldr	r3, [r3, #16]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	619a      	str	r2, [r3, #24]
}
 800d062:	bf00      	nop
 800d064:	370c      	adds	r7, #12
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr

0800d06e <motor_stop>:

/**
 * @brief Stops the motor
 * @retval None
 */
void motor_stop(motor_t* motor){
 800d06e:	b580      	push	{r7, lr}
 800d070:	b082      	sub	sp, #8
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->dir_pin_1_port, motor->dir_pin_1, GPIO_PIN_RESET);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6818      	ldr	r0, [r3, #0]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	889b      	ldrh	r3, [r3, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	4619      	mov	r1, r3
 800d082:	f7f6 fa83 	bl	800358c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->dir_pin_2_port, motor->dir_pin_2, GPIO_PIN_RESET);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6898      	ldr	r0, [r3, #8]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	899b      	ldrh	r3, [r3, #12]
 800d08e:	2200      	movs	r2, #0
 800d090:	4619      	mov	r1, r3
 800d092:	f7f6 fa7b 	bl	800358c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->timer, motor->channel);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	691a      	ldr	r2, [r3, #16]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	8a9b      	ldrh	r3, [r3, #20]
 800d09e:	4619      	mov	r1, r3
 800d0a0:	4610      	mov	r0, r2
 800d0a2:	f7f7 f92b 	bl	80042fc <HAL_TIM_PWM_Stop>
}
 800d0a6:	bf00      	nop
 800d0a8:	3708      	adds	r7, #8
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}

0800d0ae <motor_run>:
/**
 * @brief Runs the motor at a power between -1.0 and 1.0
 * @param power: power to run the motor at
 * @retval None
 */
void motor_run(motor_t* motor, float power){
 800d0ae:	b580      	push	{r7, lr}
 800d0b0:	b084      	sub	sp, #16
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
 800d0b6:	ed87 0a00 	vstr	s0, [r7]
	if (power){
 800d0ba:	edd7 7a00 	vldr	s15, [r7]
 800d0be:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c6:	f000 8095 	beq.w	800d1f4 <motor_run+0x146>
		power = fminf(fmaxf(power, -1.0f), 1.0f);
 800d0ca:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800d0ce:	ed97 0a00 	vldr	s0, [r7]
 800d0d2:	f005 f9a1 	bl	8012418 <fmaxf>
 800d0d6:	eef0 7a40 	vmov.f32	s15, s0
 800d0da:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800d0de:	eeb0 0a67 	vmov.f32	s0, s15
 800d0e2:	f005 f9b6 	bl	8012452 <fminf>
 800d0e6:	ed87 0a00 	vstr	s0, [r7]
		bool direction = power > 0.0;
 800d0ea:	edd7 7a00 	vldr	s15, [r7]
 800d0ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0f6:	bfcc      	ite	gt
 800d0f8:	2301      	movgt	r3, #1
 800d0fa:	2300      	movle	r3, #0
 800d0fc:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(motor->dir_pin_1_port, motor->dir_pin_1, direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6818      	ldr	r0, [r3, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	889b      	ldrh	r3, [r3, #4]
 800d106:	7bfa      	ldrb	r2, [r7, #15]
 800d108:	4619      	mov	r1, r3
 800d10a:	f7f6 fa3f 	bl	800358c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->dir_pin_2_port, motor->dir_pin_2, !direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6898      	ldr	r0, [r3, #8]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	8999      	ldrh	r1, [r3, #12]
 800d116:	7bfb      	ldrb	r3, [r7, #15]
 800d118:	f083 0301 	eor.w	r3, r3, #1
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	461a      	mov	r2, r3
 800d120:	f7f6 fa34 	bl	800358c <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(motor->timer, motor->channel, fabsf(power) * (float)motor->timer_reload);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	8a9b      	ldrh	r3, [r3, #20]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d114      	bne.n	800d156 <motor_run+0xa8>
 800d12c:	edd7 7a00 	vldr	s15, [r7]
 800d130:	eeb0 7ae7 	vabs.f32	s14, s15
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	699b      	ldr	r3, [r3, #24]
 800d138:	ee07 3a90 	vmov	s15, r3
 800d13c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d140:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	691b      	ldr	r3, [r3, #16]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d14e:	ee17 2a90 	vmov	r2, s15
 800d152:	635a      	str	r2, [r3, #52]	@ 0x34
 800d154:	e045      	b.n	800d1e2 <motor_run+0x134>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	8a9b      	ldrh	r3, [r3, #20]
 800d15a:	2b04      	cmp	r3, #4
 800d15c:	d114      	bne.n	800d188 <motor_run+0xda>
 800d15e:	edd7 7a00 	vldr	s15, [r7]
 800d162:	eeb0 7ae7 	vabs.f32	s14, s15
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	699b      	ldr	r3, [r3, #24]
 800d16a:	ee07 3a90 	vmov	s15, r3
 800d16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d172:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d180:	ee17 3a90 	vmov	r3, s15
 800d184:	6393      	str	r3, [r2, #56]	@ 0x38
 800d186:	e02c      	b.n	800d1e2 <motor_run+0x134>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	8a9b      	ldrh	r3, [r3, #20]
 800d18c:	2b08      	cmp	r3, #8
 800d18e:	d114      	bne.n	800d1ba <motor_run+0x10c>
 800d190:	edd7 7a00 	vldr	s15, [r7]
 800d194:	eeb0 7ae7 	vabs.f32	s14, s15
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	699b      	ldr	r3, [r3, #24]
 800d19c:	ee07 3a90 	vmov	s15, r3
 800d1a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	691b      	ldr	r3, [r3, #16]
 800d1ac:	681a      	ldr	r2, [r3, #0]
 800d1ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1b2:	ee17 3a90 	vmov	r3, s15
 800d1b6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800d1b8:	e013      	b.n	800d1e2 <motor_run+0x134>
 800d1ba:	edd7 7a00 	vldr	s15, [r7]
 800d1be:	eeb0 7ae7 	vabs.f32	s14, s15
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	699b      	ldr	r3, [r3, #24]
 800d1c6:	ee07 3a90 	vmov	s15, r3
 800d1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	691b      	ldr	r3, [r3, #16]
 800d1d6:	681a      	ldr	r2, [r3, #0]
 800d1d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1dc:	ee17 3a90 	vmov	r3, s15
 800d1e0:	6413      	str	r3, [r2, #64]	@ 0x40
		HAL_TIM_PWM_Start(motor->timer, motor->channel);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	691a      	ldr	r2, [r3, #16]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	8a9b      	ldrh	r3, [r3, #20]
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	4610      	mov	r0, r2
 800d1ee:	f7f6 ffd5 	bl	800419c <HAL_TIM_PWM_Start>
	} else {
		motor_stop(motor);
	}
}
 800d1f2:	e002      	b.n	800d1fa <motor_run+0x14c>
		motor_stop(motor);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f7ff ff3a 	bl	800d06e <motor_stop>
}
 800d1fa:	bf00      	nop
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <encoder_init>:


void encoder_init(encoder_t* encoder, uint32_t time){
 800d202:	b580      	push	{r7, lr}
 800d204:	b082      	sub	sp, #8
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
 800d20a:	6039      	str	r1, [r7, #0]
	encoder->last_time = time;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	683a      	ldr	r2, [r7, #0]
 800d210:	609a      	str	r2, [r3, #8]
	encoder->half_auto_reload = (int32_t)__HAL_TIM_GET_AUTORELOAD(encoder->timer) / 2;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d21a:	0fda      	lsrs	r2, r3, #31
 800d21c:	4413      	add	r3, r2
 800d21e:	105b      	asrs	r3, r3, #1
 800d220:	461a      	mov	r2, r3
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	605a      	str	r2, [r3, #4]
	HAL_TIM_Encoder_Start(encoder->timer, TIM_CHANNEL_ALL);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	213c      	movs	r1, #60	@ 0x3c
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7f7 f96f 	bl	8004510 <HAL_TIM_Encoder_Start>
}
 800d232:	bf00      	nop
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <encoder_callback>:

void encoder_callback(encoder_t* encoder, uint32_t time){
 800d23a:	b480      	push	{r7}
 800d23c:	b085      	sub	sp, #20
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
 800d242:	6039      	str	r1, [r7, #0]
	uint32_t d_t = time - encoder->last_time;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	683a      	ldr	r2, [r7, #0]
 800d24a:	1ad3      	subs	r3, r2, r3
 800d24c:	60fb      	str	r3, [r7, #12]
	int32_t d_p = (int32_t)__HAL_TIM_GET_COUNTER(encoder->timer) - encoder->half_auto_reload;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d256:	461a      	mov	r2, r3
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	1ad3      	subs	r3, r2, r3
 800d25e:	60bb      	str	r3, [r7, #8]
	encoder->speed = (encoder_speed_t)d_p / (encoder_speed_t)d_t;
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	ee07 3a90 	vmov	s15, r3
 800d266:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	ee07 3a90 	vmov	s15, r3
 800d270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	edc3 7a03 	vstr	s15, [r3, #12]
	encoder->last_time = time;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	683a      	ldr	r2, [r7, #0]
 800d282:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(encoder->timer, (uint32_t)encoder->half_auto_reload);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	685a      	ldr	r2, [r3, #4]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	625a      	str	r2, [r3, #36]	@ 0x24

	//printf("d_p: %li, d_t: %lu\r\n", d_p, d_t);
}
 800d290:	bf00      	nop
 800d292:	3714      	adds	r7, #20
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <encoder_get_speed>:

encoder_speed_t encoder_get_speed(encoder_t* encoder){
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
	return encoder->speed;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	ee07 3a90 	vmov	s15, r3
}
 800d2ac:	eeb0 0a67 	vmov.f32	s0, s15
 800d2b0:	370c      	adds	r7, #12
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr

0800d2ba <mecanum_robot_init>:


void mecanum_robot_init(four_wheeled_robot_t *mecanum_robot, uint32_t time){
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b082      	sub	sp, #8
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
 800d2c2:	6039      	str	r1, [r7, #0]
	motor_init(mecanum_robot->fl_motor);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7ff fec0 	bl	800d04e <motor_init>
	motor_init(mecanum_robot->fr_motor);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7ff febb 	bl	800d04e <motor_init>
	motor_init(mecanum_robot->bl_motor);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7ff feb6 	bl	800d04e <motor_init>
	motor_init(mecanum_robot->br_motor);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7ff feb1 	bl	800d04e <motor_init>

	encoder_init(mecanum_robot->fl_encoder, time);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	691b      	ldr	r3, [r3, #16]
 800d2f0:	6839      	ldr	r1, [r7, #0]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7ff ff85 	bl	800d202 <encoder_init>
	encoder_init(mecanum_robot->fr_encoder, time);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	695b      	ldr	r3, [r3, #20]
 800d2fc:	6839      	ldr	r1, [r7, #0]
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7ff ff7f 	bl	800d202 <encoder_init>
	encoder_init(mecanum_robot->bl_encoder, time);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	699b      	ldr	r3, [r3, #24]
 800d308:	6839      	ldr	r1, [r7, #0]
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7ff ff79 	bl	800d202 <encoder_init>
	encoder_init(mecanum_robot->br_encoder, time);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	69db      	ldr	r3, [r3, #28]
 800d314:	6839      	ldr	r1, [r7, #0]
 800d316:	4618      	mov	r0, r3
 800d318:	f7ff ff73 	bl	800d202 <encoder_init>
}
 800d31c:	bf00      	nop
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <mecanum_robot_stop>:

void mecanum_robot_stop(four_wheeled_robot_t *mecanum_robot){
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
	motor_stop(mecanum_robot->fl_motor);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4618      	mov	r0, r3
 800d332:	f7ff fe9c 	bl	800d06e <motor_stop>
	motor_stop(mecanum_robot->fr_motor);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7ff fe97 	bl	800d06e <motor_stop>
	motor_stop(mecanum_robot->bl_motor);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	4618      	mov	r0, r3
 800d346:	f7ff fe92 	bl	800d06e <motor_stop>
	motor_stop(mecanum_robot->br_motor);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	4618      	mov	r0, r3
 800d350:	f7ff fe8d 	bl	800d06e <motor_stop>
}
 800d354:	bf00      	nop
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	0000      	movs	r0, r0
	...

0800d360 <mecanum_robot_move>:

/**
 * @brief Move the mecanum robot at given parameters
 */
void mecanum_robot_move(four_wheeled_robot_t *mecanum_robot, float power, float angle, float angular_speed){
 800d360:	b580      	push	{r7, lr}
 800d362:	b08e      	sub	sp, #56	@ 0x38
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	ed87 0a02 	vstr	s0, [r7, #8]
 800d36c:	edc7 0a01 	vstr	s1, [r7, #4]
 800d370:	ed87 1a00 	vstr	s2, [r7]
	if (power == 0.0 && angular_speed == 0.0){
 800d374:	edd7 7a02 	vldr	s15, [r7, #8]
 800d378:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d380:	d10a      	bne.n	800d398 <mecanum_robot_move+0x38>
 800d382:	edd7 7a00 	vldr	s15, [r7]
 800d386:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d38e:	d103      	bne.n	800d398 <mecanum_robot_move+0x38>
		mecanum_robot_stop(mecanum_robot);
 800d390:	68f8      	ldr	r0, [r7, #12]
 800d392:	f7ff ffc7 	bl	800d324 <mecanum_robot_stop>
		return;
 800d396:	e0e4      	b.n	800d562 <mecanum_robot_move+0x202>
	}

	power = fminf(fmaxf(power, 0.0f), 1.0f);
 800d398:	eddf 0a75 	vldr	s1, [pc, #468]	@ 800d570 <mecanum_robot_move+0x210>
 800d39c:	ed97 0a02 	vldr	s0, [r7, #8]
 800d3a0:	f005 f83a 	bl	8012418 <fmaxf>
 800d3a4:	eef0 7a40 	vmov.f32	s15, s0
 800d3a8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800d3ac:	eeb0 0a67 	vmov.f32	s0, s15
 800d3b0:	f005 f84f 	bl	8012452 <fminf>
 800d3b4:	ed87 0a02 	vstr	s0, [r7, #8]


	float angle_offset = angle - M_PI_4;
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f7f3 f8dd 	bl	8000578 <__aeabi_f2d>
 800d3be:	a36a      	add	r3, pc, #424	@ (adr r3, 800d568 <mecanum_robot_move+0x208>)
 800d3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c4:	f7f2 ff78 	bl	80002b8 <__aeabi_dsub>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	4610      	mov	r0, r2
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	f7f3 fc22 	bl	8000c18 <__aeabi_d2f>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	627b      	str	r3, [r7, #36]	@ 0x24
	float sine = sin(angle_offset);
 800d3d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d3da:	f7f3 f8cd 	bl	8000578 <__aeabi_f2d>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	ec43 2b10 	vmov	d0, r2, r3
 800d3e6:	f004 ffc3 	bl	8012370 <sin>
 800d3ea:	ec53 2b10 	vmov	r2, r3, d0
 800d3ee:	4610      	mov	r0, r2
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	f7f3 fc11 	bl	8000c18 <__aeabi_d2f>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	623b      	str	r3, [r7, #32]
	float cosine = cos(angle_offset);
 800d3fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d3fc:	f7f3 f8bc 	bl	8000578 <__aeabi_f2d>
 800d400:	4602      	mov	r2, r0
 800d402:	460b      	mov	r3, r1
 800d404:	ec43 2b10 	vmov	d0, r2, r3
 800d408:	f004 ff5e 	bl	80122c8 <cos>
 800d40c:	ec53 2b10 	vmov	r2, r3, d0
 800d410:	4610      	mov	r0, r2
 800d412:	4619      	mov	r1, r3
 800d414:	f7f3 fc00 	bl	8000c18 <__aeabi_d2f>
 800d418:	4603      	mov	r3, r0
 800d41a:	61fb      	str	r3, [r7, #28]
	float maximum = fmaxf(fabsf(sine), fabsf(cosine));
 800d41c:	edd7 7a08 	vldr	s15, [r7, #32]
 800d420:	eeb0 7ae7 	vabs.f32	s14, s15
 800d424:	edd7 7a07 	vldr	s15, [r7, #28]
 800d428:	eef0 7ae7 	vabs.f32	s15, s15
 800d42c:	eef0 0a67 	vmov.f32	s1, s15
 800d430:	eeb0 0a47 	vmov.f32	s0, s14
 800d434:	f004 fff0 	bl	8012418 <fmaxf>
 800d438:	ed87 0a06 	vstr	s0, [r7, #24]

	float fl = power * cosine/maximum + angular_speed;
 800d43c:	ed97 7a02 	vldr	s14, [r7, #8]
 800d440:	edd7 7a07 	vldr	s15, [r7, #28]
 800d444:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d448:	ed97 7a06 	vldr	s14, [r7, #24]
 800d44c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d450:	ed97 7a00 	vldr	s14, [r7]
 800d454:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d458:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float fr = power * sine/maximum - angular_speed;
 800d45c:	ed97 7a02 	vldr	s14, [r7, #8]
 800d460:	edd7 7a08 	vldr	s15, [r7, #32]
 800d464:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d468:	edd7 7a06 	vldr	s15, [r7, #24]
 800d46c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d470:	edd7 7a00 	vldr	s15, [r7]
 800d474:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d478:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float bl = power * sine/maximum + angular_speed;
 800d47c:	ed97 7a02 	vldr	s14, [r7, #8]
 800d480:	edd7 7a08 	vldr	s15, [r7, #32]
 800d484:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d488:	ed97 7a06 	vldr	s14, [r7, #24]
 800d48c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d490:	ed97 7a00 	vldr	s14, [r7]
 800d494:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d498:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float br = power * cosine/maximum - angular_speed;
 800d49c:	ed97 7a02 	vldr	s14, [r7, #8]
 800d4a0:	edd7 7a07 	vldr	s15, [r7, #28]
 800d4a4:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d4a8:	edd7 7a06 	vldr	s15, [r7, #24]
 800d4ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4b0:	edd7 7a00 	vldr	s15, [r7]
 800d4b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4b8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	if ((power + fabsf(angular_speed)) > 1) {
 800d4bc:	edd7 7a00 	vldr	s15, [r7]
 800d4c0:	eeb0 7ae7 	vabs.f32	s14, s15
 800d4c4:	edd7 7a02 	vldr	s15, [r7, #8]
 800d4c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d4d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d8:	dd27      	ble.n	800d52a <mecanum_robot_move+0x1ca>
		float k = power + angular_speed;
 800d4da:	ed97 7a02 	vldr	s14, [r7, #8]
 800d4de:	edd7 7a00 	vldr	s15, [r7]
 800d4e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4e6:	edc7 7a05 	vstr	s15, [r7, #20]
		fl /= k;
 800d4ea:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800d4ee:	ed97 7a05 	vldr	s14, [r7, #20]
 800d4f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4f6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		fr /= k;
 800d4fa:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 800d4fe:	ed97 7a05 	vldr	s14, [r7, #20]
 800d502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d506:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		bl /= k;
 800d50a:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800d50e:	ed97 7a05 	vldr	s14, [r7, #20]
 800d512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d516:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		br /= k;
 800d51a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800d51e:	ed97 7a05 	vldr	s14, [r7, #20]
 800d522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d526:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	}

	motor_run(mecanum_robot->fl_motor, fl);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 800d532:	4618      	mov	r0, r3
 800d534:	f7ff fdbb 	bl	800d0ae <motor_run>
	motor_run(mecanum_robot->fr_motor, fr);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 800d540:	4618      	mov	r0, r3
 800d542:	f7ff fdb4 	bl	800d0ae <motor_run>
	motor_run(mecanum_robot->bl_motor, bl);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	689b      	ldr	r3, [r3, #8]
 800d54a:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 800d54e:	4618      	mov	r0, r3
 800d550:	f7ff fdad 	bl	800d0ae <motor_run>
	motor_run(mecanum_robot->br_motor, br);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7ff fda6 	bl	800d0ae <motor_run>
}
 800d562:	3738      	adds	r7, #56	@ 0x38
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	54442d18 	.word	0x54442d18
 800d56c:	3fe921fb 	.word	0x3fe921fb
 800d570:	00000000 	.word	0x00000000

0800d574 <mecanum_robot_encoders_callback>:

void mecanum_robot_encoders_callback(four_wheeled_robot_t *mecanum_robot, uint32_t time){
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
	encoder_callback(mecanum_robot->fl_encoder, time);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	691b      	ldr	r3, [r3, #16]
 800d582:	6839      	ldr	r1, [r7, #0]
 800d584:	4618      	mov	r0, r3
 800d586:	f7ff fe58 	bl	800d23a <encoder_callback>
	encoder_callback(mecanum_robot->fr_encoder, time);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	695b      	ldr	r3, [r3, #20]
 800d58e:	6839      	ldr	r1, [r7, #0]
 800d590:	4618      	mov	r0, r3
 800d592:	f7ff fe52 	bl	800d23a <encoder_callback>
	encoder_callback(mecanum_robot->bl_encoder, time);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	699b      	ldr	r3, [r3, #24]
 800d59a:	6839      	ldr	r1, [r7, #0]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7ff fe4c 	bl	800d23a <encoder_callback>
	encoder_callback(mecanum_robot->br_encoder, time);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	69db      	ldr	r3, [r3, #28]
 800d5a6:	6839      	ldr	r1, [r7, #0]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7ff fe46 	bl	800d23a <encoder_callback>
}
 800d5ae:	bf00      	nop
 800d5b0:	3708      	adds	r7, #8
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}

0800d5b6 <mecanum_robot_get_encoder_speeds>:

void mecanum_robot_get_encoder_speeds(four_wheeled_robot_t *mecanum_robot, four_wheeled_robot_encoders_speeds_t* encoders_speeds){
 800d5b6:	b580      	push	{r7, lr}
 800d5b8:	b082      	sub	sp, #8
 800d5ba:	af00      	add	r7, sp, #0
 800d5bc:	6078      	str	r0, [r7, #4]
 800d5be:	6039      	str	r1, [r7, #0]
	encoders_speeds->fl_speed = encoder_get_speed(mecanum_robot->fl_encoder);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	691b      	ldr	r3, [r3, #16]
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7ff fe69 	bl	800d29c <encoder_get_speed>
 800d5ca:	eef0 7a40 	vmov.f32	s15, s0
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	edc3 7a00 	vstr	s15, [r3]
	encoders_speeds->fr_speed = encoder_get_speed(mecanum_robot->fr_encoder);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	695b      	ldr	r3, [r3, #20]
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7ff fe5f 	bl	800d29c <encoder_get_speed>
 800d5de:	eef0 7a40 	vmov.f32	s15, s0
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	edc3 7a01 	vstr	s15, [r3, #4]
	encoders_speeds->bl_speed = encoder_get_speed(mecanum_robot->bl_encoder);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	699b      	ldr	r3, [r3, #24]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7ff fe55 	bl	800d29c <encoder_get_speed>
 800d5f2:	eef0 7a40 	vmov.f32	s15, s0
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	edc3 7a02 	vstr	s15, [r3, #8]
	encoders_speeds->br_speed = encoder_get_speed(mecanum_robot->br_encoder);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	69db      	ldr	r3, [r3, #28]
 800d600:	4618      	mov	r0, r3
 800d602:	f7ff fe4b 	bl	800d29c <encoder_get_speed>
 800d606:	eef0 7a40 	vmov.f32	s15, s0
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800d610:	bf00      	nop
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <malloc>:
 800d618:	4b02      	ldr	r3, [pc, #8]	@ (800d624 <malloc+0xc>)
 800d61a:	4601      	mov	r1, r0
 800d61c:	6818      	ldr	r0, [r3, #0]
 800d61e:	f000 b82d 	b.w	800d67c <_malloc_r>
 800d622:	bf00      	nop
 800d624:	20000264 	.word	0x20000264

0800d628 <free>:
 800d628:	4b02      	ldr	r3, [pc, #8]	@ (800d634 <free+0xc>)
 800d62a:	4601      	mov	r1, r0
 800d62c:	6818      	ldr	r0, [r3, #0]
 800d62e:	f002 bcff 	b.w	8010030 <_free_r>
 800d632:	bf00      	nop
 800d634:	20000264 	.word	0x20000264

0800d638 <sbrk_aligned>:
 800d638:	b570      	push	{r4, r5, r6, lr}
 800d63a:	4e0f      	ldr	r6, [pc, #60]	@ (800d678 <sbrk_aligned+0x40>)
 800d63c:	460c      	mov	r4, r1
 800d63e:	6831      	ldr	r1, [r6, #0]
 800d640:	4605      	mov	r5, r0
 800d642:	b911      	cbnz	r1, 800d64a <sbrk_aligned+0x12>
 800d644:	f001 fe42 	bl	800f2cc <_sbrk_r>
 800d648:	6030      	str	r0, [r6, #0]
 800d64a:	4621      	mov	r1, r4
 800d64c:	4628      	mov	r0, r5
 800d64e:	f001 fe3d 	bl	800f2cc <_sbrk_r>
 800d652:	1c43      	adds	r3, r0, #1
 800d654:	d103      	bne.n	800d65e <sbrk_aligned+0x26>
 800d656:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d65a:	4620      	mov	r0, r4
 800d65c:	bd70      	pop	{r4, r5, r6, pc}
 800d65e:	1cc4      	adds	r4, r0, #3
 800d660:	f024 0403 	bic.w	r4, r4, #3
 800d664:	42a0      	cmp	r0, r4
 800d666:	d0f8      	beq.n	800d65a <sbrk_aligned+0x22>
 800d668:	1a21      	subs	r1, r4, r0
 800d66a:	4628      	mov	r0, r5
 800d66c:	f001 fe2e 	bl	800f2cc <_sbrk_r>
 800d670:	3001      	adds	r0, #1
 800d672:	d1f2      	bne.n	800d65a <sbrk_aligned+0x22>
 800d674:	e7ef      	b.n	800d656 <sbrk_aligned+0x1e>
 800d676:	bf00      	nop
 800d678:	20005614 	.word	0x20005614

0800d67c <_malloc_r>:
 800d67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d680:	1ccd      	adds	r5, r1, #3
 800d682:	f025 0503 	bic.w	r5, r5, #3
 800d686:	3508      	adds	r5, #8
 800d688:	2d0c      	cmp	r5, #12
 800d68a:	bf38      	it	cc
 800d68c:	250c      	movcc	r5, #12
 800d68e:	2d00      	cmp	r5, #0
 800d690:	4606      	mov	r6, r0
 800d692:	db01      	blt.n	800d698 <_malloc_r+0x1c>
 800d694:	42a9      	cmp	r1, r5
 800d696:	d904      	bls.n	800d6a2 <_malloc_r+0x26>
 800d698:	230c      	movs	r3, #12
 800d69a:	6033      	str	r3, [r6, #0]
 800d69c:	2000      	movs	r0, #0
 800d69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d778 <_malloc_r+0xfc>
 800d6a6:	f000 f869 	bl	800d77c <__malloc_lock>
 800d6aa:	f8d8 3000 	ldr.w	r3, [r8]
 800d6ae:	461c      	mov	r4, r3
 800d6b0:	bb44      	cbnz	r4, 800d704 <_malloc_r+0x88>
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	4630      	mov	r0, r6
 800d6b6:	f7ff ffbf 	bl	800d638 <sbrk_aligned>
 800d6ba:	1c43      	adds	r3, r0, #1
 800d6bc:	4604      	mov	r4, r0
 800d6be:	d158      	bne.n	800d772 <_malloc_r+0xf6>
 800d6c0:	f8d8 4000 	ldr.w	r4, [r8]
 800d6c4:	4627      	mov	r7, r4
 800d6c6:	2f00      	cmp	r7, #0
 800d6c8:	d143      	bne.n	800d752 <_malloc_r+0xd6>
 800d6ca:	2c00      	cmp	r4, #0
 800d6cc:	d04b      	beq.n	800d766 <_malloc_r+0xea>
 800d6ce:	6823      	ldr	r3, [r4, #0]
 800d6d0:	4639      	mov	r1, r7
 800d6d2:	4630      	mov	r0, r6
 800d6d4:	eb04 0903 	add.w	r9, r4, r3
 800d6d8:	f001 fdf8 	bl	800f2cc <_sbrk_r>
 800d6dc:	4581      	cmp	r9, r0
 800d6de:	d142      	bne.n	800d766 <_malloc_r+0xea>
 800d6e0:	6821      	ldr	r1, [r4, #0]
 800d6e2:	1a6d      	subs	r5, r5, r1
 800d6e4:	4629      	mov	r1, r5
 800d6e6:	4630      	mov	r0, r6
 800d6e8:	f7ff ffa6 	bl	800d638 <sbrk_aligned>
 800d6ec:	3001      	adds	r0, #1
 800d6ee:	d03a      	beq.n	800d766 <_malloc_r+0xea>
 800d6f0:	6823      	ldr	r3, [r4, #0]
 800d6f2:	442b      	add	r3, r5
 800d6f4:	6023      	str	r3, [r4, #0]
 800d6f6:	f8d8 3000 	ldr.w	r3, [r8]
 800d6fa:	685a      	ldr	r2, [r3, #4]
 800d6fc:	bb62      	cbnz	r2, 800d758 <_malloc_r+0xdc>
 800d6fe:	f8c8 7000 	str.w	r7, [r8]
 800d702:	e00f      	b.n	800d724 <_malloc_r+0xa8>
 800d704:	6822      	ldr	r2, [r4, #0]
 800d706:	1b52      	subs	r2, r2, r5
 800d708:	d420      	bmi.n	800d74c <_malloc_r+0xd0>
 800d70a:	2a0b      	cmp	r2, #11
 800d70c:	d917      	bls.n	800d73e <_malloc_r+0xc2>
 800d70e:	1961      	adds	r1, r4, r5
 800d710:	42a3      	cmp	r3, r4
 800d712:	6025      	str	r5, [r4, #0]
 800d714:	bf18      	it	ne
 800d716:	6059      	strne	r1, [r3, #4]
 800d718:	6863      	ldr	r3, [r4, #4]
 800d71a:	bf08      	it	eq
 800d71c:	f8c8 1000 	streq.w	r1, [r8]
 800d720:	5162      	str	r2, [r4, r5]
 800d722:	604b      	str	r3, [r1, #4]
 800d724:	4630      	mov	r0, r6
 800d726:	f000 f82f 	bl	800d788 <__malloc_unlock>
 800d72a:	f104 000b 	add.w	r0, r4, #11
 800d72e:	1d23      	adds	r3, r4, #4
 800d730:	f020 0007 	bic.w	r0, r0, #7
 800d734:	1ac2      	subs	r2, r0, r3
 800d736:	bf1c      	itt	ne
 800d738:	1a1b      	subne	r3, r3, r0
 800d73a:	50a3      	strne	r3, [r4, r2]
 800d73c:	e7af      	b.n	800d69e <_malloc_r+0x22>
 800d73e:	6862      	ldr	r2, [r4, #4]
 800d740:	42a3      	cmp	r3, r4
 800d742:	bf0c      	ite	eq
 800d744:	f8c8 2000 	streq.w	r2, [r8]
 800d748:	605a      	strne	r2, [r3, #4]
 800d74a:	e7eb      	b.n	800d724 <_malloc_r+0xa8>
 800d74c:	4623      	mov	r3, r4
 800d74e:	6864      	ldr	r4, [r4, #4]
 800d750:	e7ae      	b.n	800d6b0 <_malloc_r+0x34>
 800d752:	463c      	mov	r4, r7
 800d754:	687f      	ldr	r7, [r7, #4]
 800d756:	e7b6      	b.n	800d6c6 <_malloc_r+0x4a>
 800d758:	461a      	mov	r2, r3
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	42a3      	cmp	r3, r4
 800d75e:	d1fb      	bne.n	800d758 <_malloc_r+0xdc>
 800d760:	2300      	movs	r3, #0
 800d762:	6053      	str	r3, [r2, #4]
 800d764:	e7de      	b.n	800d724 <_malloc_r+0xa8>
 800d766:	230c      	movs	r3, #12
 800d768:	6033      	str	r3, [r6, #0]
 800d76a:	4630      	mov	r0, r6
 800d76c:	f000 f80c 	bl	800d788 <__malloc_unlock>
 800d770:	e794      	b.n	800d69c <_malloc_r+0x20>
 800d772:	6005      	str	r5, [r0, #0]
 800d774:	e7d6      	b.n	800d724 <_malloc_r+0xa8>
 800d776:	bf00      	nop
 800d778:	20005618 	.word	0x20005618

0800d77c <__malloc_lock>:
 800d77c:	4801      	ldr	r0, [pc, #4]	@ (800d784 <__malloc_lock+0x8>)
 800d77e:	f001 bdf2 	b.w	800f366 <__retarget_lock_acquire_recursive>
 800d782:	bf00      	nop
 800d784:	2000575c 	.word	0x2000575c

0800d788 <__malloc_unlock>:
 800d788:	4801      	ldr	r0, [pc, #4]	@ (800d790 <__malloc_unlock+0x8>)
 800d78a:	f001 bded 	b.w	800f368 <__retarget_lock_release_recursive>
 800d78e:	bf00      	nop
 800d790:	2000575c 	.word	0x2000575c

0800d794 <realloc>:
 800d794:	4b02      	ldr	r3, [pc, #8]	@ (800d7a0 <realloc+0xc>)
 800d796:	460a      	mov	r2, r1
 800d798:	4601      	mov	r1, r0
 800d79a:	6818      	ldr	r0, [r3, #0]
 800d79c:	f000 b802 	b.w	800d7a4 <_realloc_r>
 800d7a0:	20000264 	.word	0x20000264

0800d7a4 <_realloc_r>:
 800d7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a8:	4680      	mov	r8, r0
 800d7aa:	4615      	mov	r5, r2
 800d7ac:	460c      	mov	r4, r1
 800d7ae:	b921      	cbnz	r1, 800d7ba <_realloc_r+0x16>
 800d7b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	f7ff bf61 	b.w	800d67c <_malloc_r>
 800d7ba:	b92a      	cbnz	r2, 800d7c8 <_realloc_r+0x24>
 800d7bc:	f002 fc38 	bl	8010030 <_free_r>
 800d7c0:	2400      	movs	r4, #0
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7c8:	f003 fc7a 	bl	80110c0 <_malloc_usable_size_r>
 800d7cc:	4285      	cmp	r5, r0
 800d7ce:	4606      	mov	r6, r0
 800d7d0:	d802      	bhi.n	800d7d8 <_realloc_r+0x34>
 800d7d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d7d6:	d8f4      	bhi.n	800d7c2 <_realloc_r+0x1e>
 800d7d8:	4629      	mov	r1, r5
 800d7da:	4640      	mov	r0, r8
 800d7dc:	f7ff ff4e 	bl	800d67c <_malloc_r>
 800d7e0:	4607      	mov	r7, r0
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	d0ec      	beq.n	800d7c0 <_realloc_r+0x1c>
 800d7e6:	42b5      	cmp	r5, r6
 800d7e8:	462a      	mov	r2, r5
 800d7ea:	4621      	mov	r1, r4
 800d7ec:	bf28      	it	cs
 800d7ee:	4632      	movcs	r2, r6
 800d7f0:	f001 fdbb 	bl	800f36a <memcpy>
 800d7f4:	4621      	mov	r1, r4
 800d7f6:	4640      	mov	r0, r8
 800d7f8:	f002 fc1a 	bl	8010030 <_free_r>
 800d7fc:	463c      	mov	r4, r7
 800d7fe:	e7e0      	b.n	800d7c2 <_realloc_r+0x1e>

0800d800 <sulp>:
 800d800:	b570      	push	{r4, r5, r6, lr}
 800d802:	4604      	mov	r4, r0
 800d804:	460d      	mov	r5, r1
 800d806:	ec45 4b10 	vmov	d0, r4, r5
 800d80a:	4616      	mov	r6, r2
 800d80c:	f003 fb1a 	bl	8010e44 <__ulp>
 800d810:	ec51 0b10 	vmov	r0, r1, d0
 800d814:	b17e      	cbz	r6, 800d836 <sulp+0x36>
 800d816:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d81a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d81e:	2b00      	cmp	r3, #0
 800d820:	dd09      	ble.n	800d836 <sulp+0x36>
 800d822:	051b      	lsls	r3, r3, #20
 800d824:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d828:	2400      	movs	r4, #0
 800d82a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d82e:	4622      	mov	r2, r4
 800d830:	462b      	mov	r3, r5
 800d832:	f7f2 fef9 	bl	8000628 <__aeabi_dmul>
 800d836:	ec41 0b10 	vmov	d0, r0, r1
 800d83a:	bd70      	pop	{r4, r5, r6, pc}
 800d83c:	0000      	movs	r0, r0
	...

0800d840 <_strtod_l>:
 800d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d844:	b09f      	sub	sp, #124	@ 0x7c
 800d846:	460c      	mov	r4, r1
 800d848:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d84a:	2200      	movs	r2, #0
 800d84c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d84e:	9005      	str	r0, [sp, #20]
 800d850:	f04f 0a00 	mov.w	sl, #0
 800d854:	f04f 0b00 	mov.w	fp, #0
 800d858:	460a      	mov	r2, r1
 800d85a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d85c:	7811      	ldrb	r1, [r2, #0]
 800d85e:	292b      	cmp	r1, #43	@ 0x2b
 800d860:	d04a      	beq.n	800d8f8 <_strtod_l+0xb8>
 800d862:	d838      	bhi.n	800d8d6 <_strtod_l+0x96>
 800d864:	290d      	cmp	r1, #13
 800d866:	d832      	bhi.n	800d8ce <_strtod_l+0x8e>
 800d868:	2908      	cmp	r1, #8
 800d86a:	d832      	bhi.n	800d8d2 <_strtod_l+0x92>
 800d86c:	2900      	cmp	r1, #0
 800d86e:	d03b      	beq.n	800d8e8 <_strtod_l+0xa8>
 800d870:	2200      	movs	r2, #0
 800d872:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d874:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d876:	782a      	ldrb	r2, [r5, #0]
 800d878:	2a30      	cmp	r2, #48	@ 0x30
 800d87a:	f040 80b3 	bne.w	800d9e4 <_strtod_l+0x1a4>
 800d87e:	786a      	ldrb	r2, [r5, #1]
 800d880:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d884:	2a58      	cmp	r2, #88	@ 0x58
 800d886:	d16e      	bne.n	800d966 <_strtod_l+0x126>
 800d888:	9302      	str	r3, [sp, #8]
 800d88a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d88c:	9301      	str	r3, [sp, #4]
 800d88e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	4a8e      	ldr	r2, [pc, #568]	@ (800dacc <_strtod_l+0x28c>)
 800d894:	9805      	ldr	r0, [sp, #20]
 800d896:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d898:	a919      	add	r1, sp, #100	@ 0x64
 800d89a:	f002 fc7b 	bl	8010194 <__gethex>
 800d89e:	f010 060f 	ands.w	r6, r0, #15
 800d8a2:	4604      	mov	r4, r0
 800d8a4:	d005      	beq.n	800d8b2 <_strtod_l+0x72>
 800d8a6:	2e06      	cmp	r6, #6
 800d8a8:	d128      	bne.n	800d8fc <_strtod_l+0xbc>
 800d8aa:	3501      	adds	r5, #1
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800d8b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	f040 858e 	bne.w	800e3d6 <_strtod_l+0xb96>
 800d8ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8bc:	b1cb      	cbz	r3, 800d8f2 <_strtod_l+0xb2>
 800d8be:	4652      	mov	r2, sl
 800d8c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d8c4:	ec43 2b10 	vmov	d0, r2, r3
 800d8c8:	b01f      	add	sp, #124	@ 0x7c
 800d8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ce:	2920      	cmp	r1, #32
 800d8d0:	d1ce      	bne.n	800d870 <_strtod_l+0x30>
 800d8d2:	3201      	adds	r2, #1
 800d8d4:	e7c1      	b.n	800d85a <_strtod_l+0x1a>
 800d8d6:	292d      	cmp	r1, #45	@ 0x2d
 800d8d8:	d1ca      	bne.n	800d870 <_strtod_l+0x30>
 800d8da:	2101      	movs	r1, #1
 800d8dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d8de:	1c51      	adds	r1, r2, #1
 800d8e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d8e2:	7852      	ldrb	r2, [r2, #1]
 800d8e4:	2a00      	cmp	r2, #0
 800d8e6:	d1c5      	bne.n	800d874 <_strtod_l+0x34>
 800d8e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d8ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f040 8570 	bne.w	800e3d2 <_strtod_l+0xb92>
 800d8f2:	4652      	mov	r2, sl
 800d8f4:	465b      	mov	r3, fp
 800d8f6:	e7e5      	b.n	800d8c4 <_strtod_l+0x84>
 800d8f8:	2100      	movs	r1, #0
 800d8fa:	e7ef      	b.n	800d8dc <_strtod_l+0x9c>
 800d8fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d8fe:	b13a      	cbz	r2, 800d910 <_strtod_l+0xd0>
 800d900:	2135      	movs	r1, #53	@ 0x35
 800d902:	a81c      	add	r0, sp, #112	@ 0x70
 800d904:	f003 fb98 	bl	8011038 <__copybits>
 800d908:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d90a:	9805      	ldr	r0, [sp, #20]
 800d90c:	f002 ff66 	bl	80107dc <_Bfree>
 800d910:	3e01      	subs	r6, #1
 800d912:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d914:	2e04      	cmp	r6, #4
 800d916:	d806      	bhi.n	800d926 <_strtod_l+0xe6>
 800d918:	e8df f006 	tbb	[pc, r6]
 800d91c:	201d0314 	.word	0x201d0314
 800d920:	14          	.byte	0x14
 800d921:	00          	.byte	0x00
 800d922:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d926:	05e1      	lsls	r1, r4, #23
 800d928:	bf48      	it	mi
 800d92a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d92e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d932:	0d1b      	lsrs	r3, r3, #20
 800d934:	051b      	lsls	r3, r3, #20
 800d936:	2b00      	cmp	r3, #0
 800d938:	d1bb      	bne.n	800d8b2 <_strtod_l+0x72>
 800d93a:	f001 fce9 	bl	800f310 <__errno>
 800d93e:	2322      	movs	r3, #34	@ 0x22
 800d940:	6003      	str	r3, [r0, #0]
 800d942:	e7b6      	b.n	800d8b2 <_strtod_l+0x72>
 800d944:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d948:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d94c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d950:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d954:	e7e7      	b.n	800d926 <_strtod_l+0xe6>
 800d956:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800dad4 <_strtod_l+0x294>
 800d95a:	e7e4      	b.n	800d926 <_strtod_l+0xe6>
 800d95c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d960:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d964:	e7df      	b.n	800d926 <_strtod_l+0xe6>
 800d966:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d968:	1c5a      	adds	r2, r3, #1
 800d96a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d96c:	785b      	ldrb	r3, [r3, #1]
 800d96e:	2b30      	cmp	r3, #48	@ 0x30
 800d970:	d0f9      	beq.n	800d966 <_strtod_l+0x126>
 800d972:	2b00      	cmp	r3, #0
 800d974:	d09d      	beq.n	800d8b2 <_strtod_l+0x72>
 800d976:	2301      	movs	r3, #1
 800d978:	9309      	str	r3, [sp, #36]	@ 0x24
 800d97a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d97c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d97e:	2300      	movs	r3, #0
 800d980:	9308      	str	r3, [sp, #32]
 800d982:	930a      	str	r3, [sp, #40]	@ 0x28
 800d984:	461f      	mov	r7, r3
 800d986:	220a      	movs	r2, #10
 800d988:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d98a:	7805      	ldrb	r5, [r0, #0]
 800d98c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d990:	b2d9      	uxtb	r1, r3
 800d992:	2909      	cmp	r1, #9
 800d994:	d928      	bls.n	800d9e8 <_strtod_l+0x1a8>
 800d996:	494e      	ldr	r1, [pc, #312]	@ (800dad0 <_strtod_l+0x290>)
 800d998:	2201      	movs	r2, #1
 800d99a:	f001 fbf7 	bl	800f18c <strncmp>
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	d032      	beq.n	800da08 <_strtod_l+0x1c8>
 800d9a2:	2000      	movs	r0, #0
 800d9a4:	462a      	mov	r2, r5
 800d9a6:	4681      	mov	r9, r0
 800d9a8:	463d      	mov	r5, r7
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	2a65      	cmp	r2, #101	@ 0x65
 800d9ae:	d001      	beq.n	800d9b4 <_strtod_l+0x174>
 800d9b0:	2a45      	cmp	r2, #69	@ 0x45
 800d9b2:	d114      	bne.n	800d9de <_strtod_l+0x19e>
 800d9b4:	b91d      	cbnz	r5, 800d9be <_strtod_l+0x17e>
 800d9b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d9b8:	4302      	orrs	r2, r0
 800d9ba:	d095      	beq.n	800d8e8 <_strtod_l+0xa8>
 800d9bc:	2500      	movs	r5, #0
 800d9be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d9c0:	1c62      	adds	r2, r4, #1
 800d9c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d9c4:	7862      	ldrb	r2, [r4, #1]
 800d9c6:	2a2b      	cmp	r2, #43	@ 0x2b
 800d9c8:	d077      	beq.n	800daba <_strtod_l+0x27a>
 800d9ca:	2a2d      	cmp	r2, #45	@ 0x2d
 800d9cc:	d07b      	beq.n	800dac6 <_strtod_l+0x286>
 800d9ce:	f04f 0c00 	mov.w	ip, #0
 800d9d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d9d6:	2909      	cmp	r1, #9
 800d9d8:	f240 8082 	bls.w	800dae0 <_strtod_l+0x2a0>
 800d9dc:	9419      	str	r4, [sp, #100]	@ 0x64
 800d9de:	f04f 0800 	mov.w	r8, #0
 800d9e2:	e0a2      	b.n	800db2a <_strtod_l+0x2ea>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	e7c7      	b.n	800d978 <_strtod_l+0x138>
 800d9e8:	2f08      	cmp	r7, #8
 800d9ea:	bfd5      	itete	le
 800d9ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d9ee:	9908      	ldrgt	r1, [sp, #32]
 800d9f0:	fb02 3301 	mlale	r3, r2, r1, r3
 800d9f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d9f8:	f100 0001 	add.w	r0, r0, #1
 800d9fc:	bfd4      	ite	le
 800d9fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800da00:	9308      	strgt	r3, [sp, #32]
 800da02:	3701      	adds	r7, #1
 800da04:	9019      	str	r0, [sp, #100]	@ 0x64
 800da06:	e7bf      	b.n	800d988 <_strtod_l+0x148>
 800da08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da0a:	1c5a      	adds	r2, r3, #1
 800da0c:	9219      	str	r2, [sp, #100]	@ 0x64
 800da0e:	785a      	ldrb	r2, [r3, #1]
 800da10:	b37f      	cbz	r7, 800da72 <_strtod_l+0x232>
 800da12:	4681      	mov	r9, r0
 800da14:	463d      	mov	r5, r7
 800da16:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800da1a:	2b09      	cmp	r3, #9
 800da1c:	d912      	bls.n	800da44 <_strtod_l+0x204>
 800da1e:	2301      	movs	r3, #1
 800da20:	e7c4      	b.n	800d9ac <_strtod_l+0x16c>
 800da22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da24:	1c5a      	adds	r2, r3, #1
 800da26:	9219      	str	r2, [sp, #100]	@ 0x64
 800da28:	785a      	ldrb	r2, [r3, #1]
 800da2a:	3001      	adds	r0, #1
 800da2c:	2a30      	cmp	r2, #48	@ 0x30
 800da2e:	d0f8      	beq.n	800da22 <_strtod_l+0x1e2>
 800da30:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800da34:	2b08      	cmp	r3, #8
 800da36:	f200 84d3 	bhi.w	800e3e0 <_strtod_l+0xba0>
 800da3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da3c:	930c      	str	r3, [sp, #48]	@ 0x30
 800da3e:	4681      	mov	r9, r0
 800da40:	2000      	movs	r0, #0
 800da42:	4605      	mov	r5, r0
 800da44:	3a30      	subs	r2, #48	@ 0x30
 800da46:	f100 0301 	add.w	r3, r0, #1
 800da4a:	d02a      	beq.n	800daa2 <_strtod_l+0x262>
 800da4c:	4499      	add	r9, r3
 800da4e:	eb00 0c05 	add.w	ip, r0, r5
 800da52:	462b      	mov	r3, r5
 800da54:	210a      	movs	r1, #10
 800da56:	4563      	cmp	r3, ip
 800da58:	d10d      	bne.n	800da76 <_strtod_l+0x236>
 800da5a:	1c69      	adds	r1, r5, #1
 800da5c:	4401      	add	r1, r0
 800da5e:	4428      	add	r0, r5
 800da60:	2808      	cmp	r0, #8
 800da62:	dc16      	bgt.n	800da92 <_strtod_l+0x252>
 800da64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800da66:	230a      	movs	r3, #10
 800da68:	fb03 2300 	mla	r3, r3, r0, r2
 800da6c:	930a      	str	r3, [sp, #40]	@ 0x28
 800da6e:	2300      	movs	r3, #0
 800da70:	e018      	b.n	800daa4 <_strtod_l+0x264>
 800da72:	4638      	mov	r0, r7
 800da74:	e7da      	b.n	800da2c <_strtod_l+0x1ec>
 800da76:	2b08      	cmp	r3, #8
 800da78:	f103 0301 	add.w	r3, r3, #1
 800da7c:	dc03      	bgt.n	800da86 <_strtod_l+0x246>
 800da7e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800da80:	434e      	muls	r6, r1
 800da82:	960a      	str	r6, [sp, #40]	@ 0x28
 800da84:	e7e7      	b.n	800da56 <_strtod_l+0x216>
 800da86:	2b10      	cmp	r3, #16
 800da88:	bfde      	ittt	le
 800da8a:	9e08      	ldrle	r6, [sp, #32]
 800da8c:	434e      	mulle	r6, r1
 800da8e:	9608      	strle	r6, [sp, #32]
 800da90:	e7e1      	b.n	800da56 <_strtod_l+0x216>
 800da92:	280f      	cmp	r0, #15
 800da94:	dceb      	bgt.n	800da6e <_strtod_l+0x22e>
 800da96:	9808      	ldr	r0, [sp, #32]
 800da98:	230a      	movs	r3, #10
 800da9a:	fb03 2300 	mla	r3, r3, r0, r2
 800da9e:	9308      	str	r3, [sp, #32]
 800daa0:	e7e5      	b.n	800da6e <_strtod_l+0x22e>
 800daa2:	4629      	mov	r1, r5
 800daa4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800daa6:	1c50      	adds	r0, r2, #1
 800daa8:	9019      	str	r0, [sp, #100]	@ 0x64
 800daaa:	7852      	ldrb	r2, [r2, #1]
 800daac:	4618      	mov	r0, r3
 800daae:	460d      	mov	r5, r1
 800dab0:	e7b1      	b.n	800da16 <_strtod_l+0x1d6>
 800dab2:	f04f 0900 	mov.w	r9, #0
 800dab6:	2301      	movs	r3, #1
 800dab8:	e77d      	b.n	800d9b6 <_strtod_l+0x176>
 800daba:	f04f 0c00 	mov.w	ip, #0
 800dabe:	1ca2      	adds	r2, r4, #2
 800dac0:	9219      	str	r2, [sp, #100]	@ 0x64
 800dac2:	78a2      	ldrb	r2, [r4, #2]
 800dac4:	e785      	b.n	800d9d2 <_strtod_l+0x192>
 800dac6:	f04f 0c01 	mov.w	ip, #1
 800daca:	e7f8      	b.n	800dabe <_strtod_l+0x27e>
 800dacc:	0801378c 	.word	0x0801378c
 800dad0:	08013774 	.word	0x08013774
 800dad4:	7ff00000 	.word	0x7ff00000
 800dad8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dada:	1c51      	adds	r1, r2, #1
 800dadc:	9119      	str	r1, [sp, #100]	@ 0x64
 800dade:	7852      	ldrb	r2, [r2, #1]
 800dae0:	2a30      	cmp	r2, #48	@ 0x30
 800dae2:	d0f9      	beq.n	800dad8 <_strtod_l+0x298>
 800dae4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dae8:	2908      	cmp	r1, #8
 800daea:	f63f af78 	bhi.w	800d9de <_strtod_l+0x19e>
 800daee:	3a30      	subs	r2, #48	@ 0x30
 800daf0:	920e      	str	r2, [sp, #56]	@ 0x38
 800daf2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800daf4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800daf6:	f04f 080a 	mov.w	r8, #10
 800dafa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dafc:	1c56      	adds	r6, r2, #1
 800dafe:	9619      	str	r6, [sp, #100]	@ 0x64
 800db00:	7852      	ldrb	r2, [r2, #1]
 800db02:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800db06:	f1be 0f09 	cmp.w	lr, #9
 800db0a:	d939      	bls.n	800db80 <_strtod_l+0x340>
 800db0c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800db0e:	1a76      	subs	r6, r6, r1
 800db10:	2e08      	cmp	r6, #8
 800db12:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800db16:	dc03      	bgt.n	800db20 <_strtod_l+0x2e0>
 800db18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800db1a:	4588      	cmp	r8, r1
 800db1c:	bfa8      	it	ge
 800db1e:	4688      	movge	r8, r1
 800db20:	f1bc 0f00 	cmp.w	ip, #0
 800db24:	d001      	beq.n	800db2a <_strtod_l+0x2ea>
 800db26:	f1c8 0800 	rsb	r8, r8, #0
 800db2a:	2d00      	cmp	r5, #0
 800db2c:	d14e      	bne.n	800dbcc <_strtod_l+0x38c>
 800db2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db30:	4308      	orrs	r0, r1
 800db32:	f47f aebe 	bne.w	800d8b2 <_strtod_l+0x72>
 800db36:	2b00      	cmp	r3, #0
 800db38:	f47f aed6 	bne.w	800d8e8 <_strtod_l+0xa8>
 800db3c:	2a69      	cmp	r2, #105	@ 0x69
 800db3e:	d028      	beq.n	800db92 <_strtod_l+0x352>
 800db40:	dc25      	bgt.n	800db8e <_strtod_l+0x34e>
 800db42:	2a49      	cmp	r2, #73	@ 0x49
 800db44:	d025      	beq.n	800db92 <_strtod_l+0x352>
 800db46:	2a4e      	cmp	r2, #78	@ 0x4e
 800db48:	f47f aece 	bne.w	800d8e8 <_strtod_l+0xa8>
 800db4c:	499b      	ldr	r1, [pc, #620]	@ (800ddbc <_strtod_l+0x57c>)
 800db4e:	a819      	add	r0, sp, #100	@ 0x64
 800db50:	f002 fd42 	bl	80105d8 <__match>
 800db54:	2800      	cmp	r0, #0
 800db56:	f43f aec7 	beq.w	800d8e8 <_strtod_l+0xa8>
 800db5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	2b28      	cmp	r3, #40	@ 0x28
 800db60:	d12e      	bne.n	800dbc0 <_strtod_l+0x380>
 800db62:	4997      	ldr	r1, [pc, #604]	@ (800ddc0 <_strtod_l+0x580>)
 800db64:	aa1c      	add	r2, sp, #112	@ 0x70
 800db66:	a819      	add	r0, sp, #100	@ 0x64
 800db68:	f002 fd4a 	bl	8010600 <__hexnan>
 800db6c:	2805      	cmp	r0, #5
 800db6e:	d127      	bne.n	800dbc0 <_strtod_l+0x380>
 800db70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800db72:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800db76:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800db7a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800db7e:	e698      	b.n	800d8b2 <_strtod_l+0x72>
 800db80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800db82:	fb08 2101 	mla	r1, r8, r1, r2
 800db86:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800db8a:	920e      	str	r2, [sp, #56]	@ 0x38
 800db8c:	e7b5      	b.n	800dafa <_strtod_l+0x2ba>
 800db8e:	2a6e      	cmp	r2, #110	@ 0x6e
 800db90:	e7da      	b.n	800db48 <_strtod_l+0x308>
 800db92:	498c      	ldr	r1, [pc, #560]	@ (800ddc4 <_strtod_l+0x584>)
 800db94:	a819      	add	r0, sp, #100	@ 0x64
 800db96:	f002 fd1f 	bl	80105d8 <__match>
 800db9a:	2800      	cmp	r0, #0
 800db9c:	f43f aea4 	beq.w	800d8e8 <_strtod_l+0xa8>
 800dba0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dba2:	4989      	ldr	r1, [pc, #548]	@ (800ddc8 <_strtod_l+0x588>)
 800dba4:	3b01      	subs	r3, #1
 800dba6:	a819      	add	r0, sp, #100	@ 0x64
 800dba8:	9319      	str	r3, [sp, #100]	@ 0x64
 800dbaa:	f002 fd15 	bl	80105d8 <__match>
 800dbae:	b910      	cbnz	r0, 800dbb6 <_strtod_l+0x376>
 800dbb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	9319      	str	r3, [sp, #100]	@ 0x64
 800dbb6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ddd8 <_strtod_l+0x598>
 800dbba:	f04f 0a00 	mov.w	sl, #0
 800dbbe:	e678      	b.n	800d8b2 <_strtod_l+0x72>
 800dbc0:	4882      	ldr	r0, [pc, #520]	@ (800ddcc <_strtod_l+0x58c>)
 800dbc2:	f001 fbe1 	bl	800f388 <nan>
 800dbc6:	ec5b ab10 	vmov	sl, fp, d0
 800dbca:	e672      	b.n	800d8b2 <_strtod_l+0x72>
 800dbcc:	eba8 0309 	sub.w	r3, r8, r9
 800dbd0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dbd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbd4:	2f00      	cmp	r7, #0
 800dbd6:	bf08      	it	eq
 800dbd8:	462f      	moveq	r7, r5
 800dbda:	2d10      	cmp	r5, #16
 800dbdc:	462c      	mov	r4, r5
 800dbde:	bfa8      	it	ge
 800dbe0:	2410      	movge	r4, #16
 800dbe2:	f7f2 fca7 	bl	8000534 <__aeabi_ui2d>
 800dbe6:	2d09      	cmp	r5, #9
 800dbe8:	4682      	mov	sl, r0
 800dbea:	468b      	mov	fp, r1
 800dbec:	dc13      	bgt.n	800dc16 <_strtod_l+0x3d6>
 800dbee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	f43f ae5e 	beq.w	800d8b2 <_strtod_l+0x72>
 800dbf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbf8:	dd78      	ble.n	800dcec <_strtod_l+0x4ac>
 800dbfa:	2b16      	cmp	r3, #22
 800dbfc:	dc5f      	bgt.n	800dcbe <_strtod_l+0x47e>
 800dbfe:	4974      	ldr	r1, [pc, #464]	@ (800ddd0 <_strtod_l+0x590>)
 800dc00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc08:	4652      	mov	r2, sl
 800dc0a:	465b      	mov	r3, fp
 800dc0c:	f7f2 fd0c 	bl	8000628 <__aeabi_dmul>
 800dc10:	4682      	mov	sl, r0
 800dc12:	468b      	mov	fp, r1
 800dc14:	e64d      	b.n	800d8b2 <_strtod_l+0x72>
 800dc16:	4b6e      	ldr	r3, [pc, #440]	@ (800ddd0 <_strtod_l+0x590>)
 800dc18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800dc20:	f7f2 fd02 	bl	8000628 <__aeabi_dmul>
 800dc24:	4682      	mov	sl, r0
 800dc26:	9808      	ldr	r0, [sp, #32]
 800dc28:	468b      	mov	fp, r1
 800dc2a:	f7f2 fc83 	bl	8000534 <__aeabi_ui2d>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	460b      	mov	r3, r1
 800dc32:	4650      	mov	r0, sl
 800dc34:	4659      	mov	r1, fp
 800dc36:	f7f2 fb41 	bl	80002bc <__adddf3>
 800dc3a:	2d0f      	cmp	r5, #15
 800dc3c:	4682      	mov	sl, r0
 800dc3e:	468b      	mov	fp, r1
 800dc40:	ddd5      	ble.n	800dbee <_strtod_l+0x3ae>
 800dc42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc44:	1b2c      	subs	r4, r5, r4
 800dc46:	441c      	add	r4, r3
 800dc48:	2c00      	cmp	r4, #0
 800dc4a:	f340 8096 	ble.w	800dd7a <_strtod_l+0x53a>
 800dc4e:	f014 030f 	ands.w	r3, r4, #15
 800dc52:	d00a      	beq.n	800dc6a <_strtod_l+0x42a>
 800dc54:	495e      	ldr	r1, [pc, #376]	@ (800ddd0 <_strtod_l+0x590>)
 800dc56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc5a:	4652      	mov	r2, sl
 800dc5c:	465b      	mov	r3, fp
 800dc5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc62:	f7f2 fce1 	bl	8000628 <__aeabi_dmul>
 800dc66:	4682      	mov	sl, r0
 800dc68:	468b      	mov	fp, r1
 800dc6a:	f034 040f 	bics.w	r4, r4, #15
 800dc6e:	d073      	beq.n	800dd58 <_strtod_l+0x518>
 800dc70:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800dc74:	dd48      	ble.n	800dd08 <_strtod_l+0x4c8>
 800dc76:	2400      	movs	r4, #0
 800dc78:	46a0      	mov	r8, r4
 800dc7a:	940a      	str	r4, [sp, #40]	@ 0x28
 800dc7c:	46a1      	mov	r9, r4
 800dc7e:	9a05      	ldr	r2, [sp, #20]
 800dc80:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ddd8 <_strtod_l+0x598>
 800dc84:	2322      	movs	r3, #34	@ 0x22
 800dc86:	6013      	str	r3, [r2, #0]
 800dc88:	f04f 0a00 	mov.w	sl, #0
 800dc8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	f43f ae0f 	beq.w	800d8b2 <_strtod_l+0x72>
 800dc94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc96:	9805      	ldr	r0, [sp, #20]
 800dc98:	f002 fda0 	bl	80107dc <_Bfree>
 800dc9c:	9805      	ldr	r0, [sp, #20]
 800dc9e:	4649      	mov	r1, r9
 800dca0:	f002 fd9c 	bl	80107dc <_Bfree>
 800dca4:	9805      	ldr	r0, [sp, #20]
 800dca6:	4641      	mov	r1, r8
 800dca8:	f002 fd98 	bl	80107dc <_Bfree>
 800dcac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dcae:	9805      	ldr	r0, [sp, #20]
 800dcb0:	f002 fd94 	bl	80107dc <_Bfree>
 800dcb4:	9805      	ldr	r0, [sp, #20]
 800dcb6:	4621      	mov	r1, r4
 800dcb8:	f002 fd90 	bl	80107dc <_Bfree>
 800dcbc:	e5f9      	b.n	800d8b2 <_strtod_l+0x72>
 800dcbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcc0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	dbbc      	blt.n	800dc42 <_strtod_l+0x402>
 800dcc8:	4c41      	ldr	r4, [pc, #260]	@ (800ddd0 <_strtod_l+0x590>)
 800dcca:	f1c5 050f 	rsb	r5, r5, #15
 800dcce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dcd2:	4652      	mov	r2, sl
 800dcd4:	465b      	mov	r3, fp
 800dcd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcda:	f7f2 fca5 	bl	8000628 <__aeabi_dmul>
 800dcde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dce0:	1b5d      	subs	r5, r3, r5
 800dce2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dce6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dcea:	e78f      	b.n	800dc0c <_strtod_l+0x3cc>
 800dcec:	3316      	adds	r3, #22
 800dcee:	dba8      	blt.n	800dc42 <_strtod_l+0x402>
 800dcf0:	4b37      	ldr	r3, [pc, #220]	@ (800ddd0 <_strtod_l+0x590>)
 800dcf2:	eba9 0808 	sub.w	r8, r9, r8
 800dcf6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800dcfa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800dcfe:	4650      	mov	r0, sl
 800dd00:	4659      	mov	r1, fp
 800dd02:	f7f2 fdbb 	bl	800087c <__aeabi_ddiv>
 800dd06:	e783      	b.n	800dc10 <_strtod_l+0x3d0>
 800dd08:	4b32      	ldr	r3, [pc, #200]	@ (800ddd4 <_strtod_l+0x594>)
 800dd0a:	9308      	str	r3, [sp, #32]
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	1124      	asrs	r4, r4, #4
 800dd10:	4650      	mov	r0, sl
 800dd12:	4659      	mov	r1, fp
 800dd14:	461e      	mov	r6, r3
 800dd16:	2c01      	cmp	r4, #1
 800dd18:	dc21      	bgt.n	800dd5e <_strtod_l+0x51e>
 800dd1a:	b10b      	cbz	r3, 800dd20 <_strtod_l+0x4e0>
 800dd1c:	4682      	mov	sl, r0
 800dd1e:	468b      	mov	fp, r1
 800dd20:	492c      	ldr	r1, [pc, #176]	@ (800ddd4 <_strtod_l+0x594>)
 800dd22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dd26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dd2a:	4652      	mov	r2, sl
 800dd2c:	465b      	mov	r3, fp
 800dd2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd32:	f7f2 fc79 	bl	8000628 <__aeabi_dmul>
 800dd36:	4b28      	ldr	r3, [pc, #160]	@ (800ddd8 <_strtod_l+0x598>)
 800dd38:	460a      	mov	r2, r1
 800dd3a:	400b      	ands	r3, r1
 800dd3c:	4927      	ldr	r1, [pc, #156]	@ (800dddc <_strtod_l+0x59c>)
 800dd3e:	428b      	cmp	r3, r1
 800dd40:	4682      	mov	sl, r0
 800dd42:	d898      	bhi.n	800dc76 <_strtod_l+0x436>
 800dd44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dd48:	428b      	cmp	r3, r1
 800dd4a:	bf86      	itte	hi
 800dd4c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800dde0 <_strtod_l+0x5a0>
 800dd50:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800dd54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dd58:	2300      	movs	r3, #0
 800dd5a:	9308      	str	r3, [sp, #32]
 800dd5c:	e07a      	b.n	800de54 <_strtod_l+0x614>
 800dd5e:	07e2      	lsls	r2, r4, #31
 800dd60:	d505      	bpl.n	800dd6e <_strtod_l+0x52e>
 800dd62:	9b08      	ldr	r3, [sp, #32]
 800dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd68:	f7f2 fc5e 	bl	8000628 <__aeabi_dmul>
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	9a08      	ldr	r2, [sp, #32]
 800dd70:	3208      	adds	r2, #8
 800dd72:	3601      	adds	r6, #1
 800dd74:	1064      	asrs	r4, r4, #1
 800dd76:	9208      	str	r2, [sp, #32]
 800dd78:	e7cd      	b.n	800dd16 <_strtod_l+0x4d6>
 800dd7a:	d0ed      	beq.n	800dd58 <_strtod_l+0x518>
 800dd7c:	4264      	negs	r4, r4
 800dd7e:	f014 020f 	ands.w	r2, r4, #15
 800dd82:	d00a      	beq.n	800dd9a <_strtod_l+0x55a>
 800dd84:	4b12      	ldr	r3, [pc, #72]	@ (800ddd0 <_strtod_l+0x590>)
 800dd86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd8a:	4650      	mov	r0, sl
 800dd8c:	4659      	mov	r1, fp
 800dd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd92:	f7f2 fd73 	bl	800087c <__aeabi_ddiv>
 800dd96:	4682      	mov	sl, r0
 800dd98:	468b      	mov	fp, r1
 800dd9a:	1124      	asrs	r4, r4, #4
 800dd9c:	d0dc      	beq.n	800dd58 <_strtod_l+0x518>
 800dd9e:	2c1f      	cmp	r4, #31
 800dda0:	dd20      	ble.n	800dde4 <_strtod_l+0x5a4>
 800dda2:	2400      	movs	r4, #0
 800dda4:	46a0      	mov	r8, r4
 800dda6:	940a      	str	r4, [sp, #40]	@ 0x28
 800dda8:	46a1      	mov	r9, r4
 800ddaa:	9a05      	ldr	r2, [sp, #20]
 800ddac:	2322      	movs	r3, #34	@ 0x22
 800ddae:	f04f 0a00 	mov.w	sl, #0
 800ddb2:	f04f 0b00 	mov.w	fp, #0
 800ddb6:	6013      	str	r3, [r2, #0]
 800ddb8:	e768      	b.n	800dc8c <_strtod_l+0x44c>
 800ddba:	bf00      	nop
 800ddbc:	080138d6 	.word	0x080138d6
 800ddc0:	08013778 	.word	0x08013778
 800ddc4:	080138ce 	.word	0x080138ce
 800ddc8:	08013906 	.word	0x08013906
 800ddcc:	08013baf 	.word	0x08013baf
 800ddd0:	08013a80 	.word	0x08013a80
 800ddd4:	08013a58 	.word	0x08013a58
 800ddd8:	7ff00000 	.word	0x7ff00000
 800dddc:	7ca00000 	.word	0x7ca00000
 800dde0:	7fefffff 	.word	0x7fefffff
 800dde4:	f014 0310 	ands.w	r3, r4, #16
 800dde8:	bf18      	it	ne
 800ddea:	236a      	movne	r3, #106	@ 0x6a
 800ddec:	4ea9      	ldr	r6, [pc, #676]	@ (800e094 <_strtod_l+0x854>)
 800ddee:	9308      	str	r3, [sp, #32]
 800ddf0:	4650      	mov	r0, sl
 800ddf2:	4659      	mov	r1, fp
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	07e2      	lsls	r2, r4, #31
 800ddf8:	d504      	bpl.n	800de04 <_strtod_l+0x5c4>
 800ddfa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ddfe:	f7f2 fc13 	bl	8000628 <__aeabi_dmul>
 800de02:	2301      	movs	r3, #1
 800de04:	1064      	asrs	r4, r4, #1
 800de06:	f106 0608 	add.w	r6, r6, #8
 800de0a:	d1f4      	bne.n	800ddf6 <_strtod_l+0x5b6>
 800de0c:	b10b      	cbz	r3, 800de12 <_strtod_l+0x5d2>
 800de0e:	4682      	mov	sl, r0
 800de10:	468b      	mov	fp, r1
 800de12:	9b08      	ldr	r3, [sp, #32]
 800de14:	b1b3      	cbz	r3, 800de44 <_strtod_l+0x604>
 800de16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800de1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800de1e:	2b00      	cmp	r3, #0
 800de20:	4659      	mov	r1, fp
 800de22:	dd0f      	ble.n	800de44 <_strtod_l+0x604>
 800de24:	2b1f      	cmp	r3, #31
 800de26:	dd55      	ble.n	800ded4 <_strtod_l+0x694>
 800de28:	2b34      	cmp	r3, #52	@ 0x34
 800de2a:	bfde      	ittt	le
 800de2c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800de30:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800de34:	4093      	lslle	r3, r2
 800de36:	f04f 0a00 	mov.w	sl, #0
 800de3a:	bfcc      	ite	gt
 800de3c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800de40:	ea03 0b01 	andle.w	fp, r3, r1
 800de44:	2200      	movs	r2, #0
 800de46:	2300      	movs	r3, #0
 800de48:	4650      	mov	r0, sl
 800de4a:	4659      	mov	r1, fp
 800de4c:	f7f2 fe54 	bl	8000af8 <__aeabi_dcmpeq>
 800de50:	2800      	cmp	r0, #0
 800de52:	d1a6      	bne.n	800dda2 <_strtod_l+0x562>
 800de54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de56:	9300      	str	r3, [sp, #0]
 800de58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800de5a:	9805      	ldr	r0, [sp, #20]
 800de5c:	462b      	mov	r3, r5
 800de5e:	463a      	mov	r2, r7
 800de60:	f002 fd24 	bl	80108ac <__s2b>
 800de64:	900a      	str	r0, [sp, #40]	@ 0x28
 800de66:	2800      	cmp	r0, #0
 800de68:	f43f af05 	beq.w	800dc76 <_strtod_l+0x436>
 800de6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de6e:	2a00      	cmp	r2, #0
 800de70:	eba9 0308 	sub.w	r3, r9, r8
 800de74:	bfa8      	it	ge
 800de76:	2300      	movge	r3, #0
 800de78:	9312      	str	r3, [sp, #72]	@ 0x48
 800de7a:	2400      	movs	r4, #0
 800de7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800de80:	9316      	str	r3, [sp, #88]	@ 0x58
 800de82:	46a0      	mov	r8, r4
 800de84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de86:	9805      	ldr	r0, [sp, #20]
 800de88:	6859      	ldr	r1, [r3, #4]
 800de8a:	f002 fc67 	bl	801075c <_Balloc>
 800de8e:	4681      	mov	r9, r0
 800de90:	2800      	cmp	r0, #0
 800de92:	f43f aef4 	beq.w	800dc7e <_strtod_l+0x43e>
 800de96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de98:	691a      	ldr	r2, [r3, #16]
 800de9a:	3202      	adds	r2, #2
 800de9c:	f103 010c 	add.w	r1, r3, #12
 800dea0:	0092      	lsls	r2, r2, #2
 800dea2:	300c      	adds	r0, #12
 800dea4:	f001 fa61 	bl	800f36a <memcpy>
 800dea8:	ec4b ab10 	vmov	d0, sl, fp
 800deac:	9805      	ldr	r0, [sp, #20]
 800deae:	aa1c      	add	r2, sp, #112	@ 0x70
 800deb0:	a91b      	add	r1, sp, #108	@ 0x6c
 800deb2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800deb6:	f003 f835 	bl	8010f24 <__d2b>
 800deba:	901a      	str	r0, [sp, #104]	@ 0x68
 800debc:	2800      	cmp	r0, #0
 800debe:	f43f aede 	beq.w	800dc7e <_strtod_l+0x43e>
 800dec2:	9805      	ldr	r0, [sp, #20]
 800dec4:	2101      	movs	r1, #1
 800dec6:	f002 fd87 	bl	80109d8 <__i2b>
 800deca:	4680      	mov	r8, r0
 800decc:	b948      	cbnz	r0, 800dee2 <_strtod_l+0x6a2>
 800dece:	f04f 0800 	mov.w	r8, #0
 800ded2:	e6d4      	b.n	800dc7e <_strtod_l+0x43e>
 800ded4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ded8:	fa02 f303 	lsl.w	r3, r2, r3
 800dedc:	ea03 0a0a 	and.w	sl, r3, sl
 800dee0:	e7b0      	b.n	800de44 <_strtod_l+0x604>
 800dee2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dee4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dee6:	2d00      	cmp	r5, #0
 800dee8:	bfab      	itete	ge
 800deea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800deec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800deee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800def0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800def2:	bfac      	ite	ge
 800def4:	18ef      	addge	r7, r5, r3
 800def6:	1b5e      	sublt	r6, r3, r5
 800def8:	9b08      	ldr	r3, [sp, #32]
 800defa:	1aed      	subs	r5, r5, r3
 800defc:	4415      	add	r5, r2
 800defe:	4b66      	ldr	r3, [pc, #408]	@ (800e098 <_strtod_l+0x858>)
 800df00:	3d01      	subs	r5, #1
 800df02:	429d      	cmp	r5, r3
 800df04:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800df08:	da50      	bge.n	800dfac <_strtod_l+0x76c>
 800df0a:	1b5b      	subs	r3, r3, r5
 800df0c:	2b1f      	cmp	r3, #31
 800df0e:	eba2 0203 	sub.w	r2, r2, r3
 800df12:	f04f 0101 	mov.w	r1, #1
 800df16:	dc3d      	bgt.n	800df94 <_strtod_l+0x754>
 800df18:	fa01 f303 	lsl.w	r3, r1, r3
 800df1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df1e:	2300      	movs	r3, #0
 800df20:	9310      	str	r3, [sp, #64]	@ 0x40
 800df22:	18bd      	adds	r5, r7, r2
 800df24:	9b08      	ldr	r3, [sp, #32]
 800df26:	42af      	cmp	r7, r5
 800df28:	4416      	add	r6, r2
 800df2a:	441e      	add	r6, r3
 800df2c:	463b      	mov	r3, r7
 800df2e:	bfa8      	it	ge
 800df30:	462b      	movge	r3, r5
 800df32:	42b3      	cmp	r3, r6
 800df34:	bfa8      	it	ge
 800df36:	4633      	movge	r3, r6
 800df38:	2b00      	cmp	r3, #0
 800df3a:	bfc2      	ittt	gt
 800df3c:	1aed      	subgt	r5, r5, r3
 800df3e:	1af6      	subgt	r6, r6, r3
 800df40:	1aff      	subgt	r7, r7, r3
 800df42:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df44:	2b00      	cmp	r3, #0
 800df46:	dd16      	ble.n	800df76 <_strtod_l+0x736>
 800df48:	4641      	mov	r1, r8
 800df4a:	9805      	ldr	r0, [sp, #20]
 800df4c:	461a      	mov	r2, r3
 800df4e:	f002 fe03 	bl	8010b58 <__pow5mult>
 800df52:	4680      	mov	r8, r0
 800df54:	2800      	cmp	r0, #0
 800df56:	d0ba      	beq.n	800dece <_strtod_l+0x68e>
 800df58:	4601      	mov	r1, r0
 800df5a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800df5c:	9805      	ldr	r0, [sp, #20]
 800df5e:	f002 fd51 	bl	8010a04 <__multiply>
 800df62:	900e      	str	r0, [sp, #56]	@ 0x38
 800df64:	2800      	cmp	r0, #0
 800df66:	f43f ae8a 	beq.w	800dc7e <_strtod_l+0x43e>
 800df6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df6c:	9805      	ldr	r0, [sp, #20]
 800df6e:	f002 fc35 	bl	80107dc <_Bfree>
 800df72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df74:	931a      	str	r3, [sp, #104]	@ 0x68
 800df76:	2d00      	cmp	r5, #0
 800df78:	dc1d      	bgt.n	800dfb6 <_strtod_l+0x776>
 800df7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	dd23      	ble.n	800dfc8 <_strtod_l+0x788>
 800df80:	4649      	mov	r1, r9
 800df82:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800df84:	9805      	ldr	r0, [sp, #20]
 800df86:	f002 fde7 	bl	8010b58 <__pow5mult>
 800df8a:	4681      	mov	r9, r0
 800df8c:	b9e0      	cbnz	r0, 800dfc8 <_strtod_l+0x788>
 800df8e:	f04f 0900 	mov.w	r9, #0
 800df92:	e674      	b.n	800dc7e <_strtod_l+0x43e>
 800df94:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800df98:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800df9c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dfa0:	35e2      	adds	r5, #226	@ 0xe2
 800dfa2:	fa01 f305 	lsl.w	r3, r1, r5
 800dfa6:	9310      	str	r3, [sp, #64]	@ 0x40
 800dfa8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dfaa:	e7ba      	b.n	800df22 <_strtod_l+0x6e2>
 800dfac:	2300      	movs	r3, #0
 800dfae:	9310      	str	r3, [sp, #64]	@ 0x40
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dfb4:	e7b5      	b.n	800df22 <_strtod_l+0x6e2>
 800dfb6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dfb8:	9805      	ldr	r0, [sp, #20]
 800dfba:	462a      	mov	r2, r5
 800dfbc:	f002 fe26 	bl	8010c0c <__lshift>
 800dfc0:	901a      	str	r0, [sp, #104]	@ 0x68
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	d1d9      	bne.n	800df7a <_strtod_l+0x73a>
 800dfc6:	e65a      	b.n	800dc7e <_strtod_l+0x43e>
 800dfc8:	2e00      	cmp	r6, #0
 800dfca:	dd07      	ble.n	800dfdc <_strtod_l+0x79c>
 800dfcc:	4649      	mov	r1, r9
 800dfce:	9805      	ldr	r0, [sp, #20]
 800dfd0:	4632      	mov	r2, r6
 800dfd2:	f002 fe1b 	bl	8010c0c <__lshift>
 800dfd6:	4681      	mov	r9, r0
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d0d8      	beq.n	800df8e <_strtod_l+0x74e>
 800dfdc:	2f00      	cmp	r7, #0
 800dfde:	dd08      	ble.n	800dff2 <_strtod_l+0x7b2>
 800dfe0:	4641      	mov	r1, r8
 800dfe2:	9805      	ldr	r0, [sp, #20]
 800dfe4:	463a      	mov	r2, r7
 800dfe6:	f002 fe11 	bl	8010c0c <__lshift>
 800dfea:	4680      	mov	r8, r0
 800dfec:	2800      	cmp	r0, #0
 800dfee:	f43f ae46 	beq.w	800dc7e <_strtod_l+0x43e>
 800dff2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dff4:	9805      	ldr	r0, [sp, #20]
 800dff6:	464a      	mov	r2, r9
 800dff8:	f002 fe90 	bl	8010d1c <__mdiff>
 800dffc:	4604      	mov	r4, r0
 800dffe:	2800      	cmp	r0, #0
 800e000:	f43f ae3d 	beq.w	800dc7e <_strtod_l+0x43e>
 800e004:	68c3      	ldr	r3, [r0, #12]
 800e006:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e008:	2300      	movs	r3, #0
 800e00a:	60c3      	str	r3, [r0, #12]
 800e00c:	4641      	mov	r1, r8
 800e00e:	f002 fe69 	bl	8010ce4 <__mcmp>
 800e012:	2800      	cmp	r0, #0
 800e014:	da46      	bge.n	800e0a4 <_strtod_l+0x864>
 800e016:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e018:	ea53 030a 	orrs.w	r3, r3, sl
 800e01c:	d16c      	bne.n	800e0f8 <_strtod_l+0x8b8>
 800e01e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e022:	2b00      	cmp	r3, #0
 800e024:	d168      	bne.n	800e0f8 <_strtod_l+0x8b8>
 800e026:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e02a:	0d1b      	lsrs	r3, r3, #20
 800e02c:	051b      	lsls	r3, r3, #20
 800e02e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e032:	d961      	bls.n	800e0f8 <_strtod_l+0x8b8>
 800e034:	6963      	ldr	r3, [r4, #20]
 800e036:	b913      	cbnz	r3, 800e03e <_strtod_l+0x7fe>
 800e038:	6923      	ldr	r3, [r4, #16]
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	dd5c      	ble.n	800e0f8 <_strtod_l+0x8b8>
 800e03e:	4621      	mov	r1, r4
 800e040:	2201      	movs	r2, #1
 800e042:	9805      	ldr	r0, [sp, #20]
 800e044:	f002 fde2 	bl	8010c0c <__lshift>
 800e048:	4641      	mov	r1, r8
 800e04a:	4604      	mov	r4, r0
 800e04c:	f002 fe4a 	bl	8010ce4 <__mcmp>
 800e050:	2800      	cmp	r0, #0
 800e052:	dd51      	ble.n	800e0f8 <_strtod_l+0x8b8>
 800e054:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e058:	9a08      	ldr	r2, [sp, #32]
 800e05a:	0d1b      	lsrs	r3, r3, #20
 800e05c:	051b      	lsls	r3, r3, #20
 800e05e:	2a00      	cmp	r2, #0
 800e060:	d06b      	beq.n	800e13a <_strtod_l+0x8fa>
 800e062:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e066:	d868      	bhi.n	800e13a <_strtod_l+0x8fa>
 800e068:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e06c:	f67f ae9d 	bls.w	800ddaa <_strtod_l+0x56a>
 800e070:	4b0a      	ldr	r3, [pc, #40]	@ (800e09c <_strtod_l+0x85c>)
 800e072:	4650      	mov	r0, sl
 800e074:	4659      	mov	r1, fp
 800e076:	2200      	movs	r2, #0
 800e078:	f7f2 fad6 	bl	8000628 <__aeabi_dmul>
 800e07c:	4b08      	ldr	r3, [pc, #32]	@ (800e0a0 <_strtod_l+0x860>)
 800e07e:	400b      	ands	r3, r1
 800e080:	4682      	mov	sl, r0
 800e082:	468b      	mov	fp, r1
 800e084:	2b00      	cmp	r3, #0
 800e086:	f47f ae05 	bne.w	800dc94 <_strtod_l+0x454>
 800e08a:	9a05      	ldr	r2, [sp, #20]
 800e08c:	2322      	movs	r3, #34	@ 0x22
 800e08e:	6013      	str	r3, [r2, #0]
 800e090:	e600      	b.n	800dc94 <_strtod_l+0x454>
 800e092:	bf00      	nop
 800e094:	080137a0 	.word	0x080137a0
 800e098:	fffffc02 	.word	0xfffffc02
 800e09c:	39500000 	.word	0x39500000
 800e0a0:	7ff00000 	.word	0x7ff00000
 800e0a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e0a8:	d165      	bne.n	800e176 <_strtod_l+0x936>
 800e0aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e0ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e0b0:	b35a      	cbz	r2, 800e10a <_strtod_l+0x8ca>
 800e0b2:	4a9f      	ldr	r2, [pc, #636]	@ (800e330 <_strtod_l+0xaf0>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d12b      	bne.n	800e110 <_strtod_l+0x8d0>
 800e0b8:	9b08      	ldr	r3, [sp, #32]
 800e0ba:	4651      	mov	r1, sl
 800e0bc:	b303      	cbz	r3, 800e100 <_strtod_l+0x8c0>
 800e0be:	4b9d      	ldr	r3, [pc, #628]	@ (800e334 <_strtod_l+0xaf4>)
 800e0c0:	465a      	mov	r2, fp
 800e0c2:	4013      	ands	r3, r2
 800e0c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e0c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e0cc:	d81b      	bhi.n	800e106 <_strtod_l+0x8c6>
 800e0ce:	0d1b      	lsrs	r3, r3, #20
 800e0d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800e0d8:	4299      	cmp	r1, r3
 800e0da:	d119      	bne.n	800e110 <_strtod_l+0x8d0>
 800e0dc:	4b96      	ldr	r3, [pc, #600]	@ (800e338 <_strtod_l+0xaf8>)
 800e0de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d102      	bne.n	800e0ea <_strtod_l+0x8aa>
 800e0e4:	3101      	adds	r1, #1
 800e0e6:	f43f adca 	beq.w	800dc7e <_strtod_l+0x43e>
 800e0ea:	4b92      	ldr	r3, [pc, #584]	@ (800e334 <_strtod_l+0xaf4>)
 800e0ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0ee:	401a      	ands	r2, r3
 800e0f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e0f4:	f04f 0a00 	mov.w	sl, #0
 800e0f8:	9b08      	ldr	r3, [sp, #32]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d1b8      	bne.n	800e070 <_strtod_l+0x830>
 800e0fe:	e5c9      	b.n	800dc94 <_strtod_l+0x454>
 800e100:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e104:	e7e8      	b.n	800e0d8 <_strtod_l+0x898>
 800e106:	4613      	mov	r3, r2
 800e108:	e7e6      	b.n	800e0d8 <_strtod_l+0x898>
 800e10a:	ea53 030a 	orrs.w	r3, r3, sl
 800e10e:	d0a1      	beq.n	800e054 <_strtod_l+0x814>
 800e110:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e112:	b1db      	cbz	r3, 800e14c <_strtod_l+0x90c>
 800e114:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e116:	4213      	tst	r3, r2
 800e118:	d0ee      	beq.n	800e0f8 <_strtod_l+0x8b8>
 800e11a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e11c:	9a08      	ldr	r2, [sp, #32]
 800e11e:	4650      	mov	r0, sl
 800e120:	4659      	mov	r1, fp
 800e122:	b1bb      	cbz	r3, 800e154 <_strtod_l+0x914>
 800e124:	f7ff fb6c 	bl	800d800 <sulp>
 800e128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e12c:	ec53 2b10 	vmov	r2, r3, d0
 800e130:	f7f2 f8c4 	bl	80002bc <__adddf3>
 800e134:	4682      	mov	sl, r0
 800e136:	468b      	mov	fp, r1
 800e138:	e7de      	b.n	800e0f8 <_strtod_l+0x8b8>
 800e13a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e13e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e142:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e146:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e14a:	e7d5      	b.n	800e0f8 <_strtod_l+0x8b8>
 800e14c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e14e:	ea13 0f0a 	tst.w	r3, sl
 800e152:	e7e1      	b.n	800e118 <_strtod_l+0x8d8>
 800e154:	f7ff fb54 	bl	800d800 <sulp>
 800e158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e15c:	ec53 2b10 	vmov	r2, r3, d0
 800e160:	f7f2 f8aa 	bl	80002b8 <__aeabi_dsub>
 800e164:	2200      	movs	r2, #0
 800e166:	2300      	movs	r3, #0
 800e168:	4682      	mov	sl, r0
 800e16a:	468b      	mov	fp, r1
 800e16c:	f7f2 fcc4 	bl	8000af8 <__aeabi_dcmpeq>
 800e170:	2800      	cmp	r0, #0
 800e172:	d0c1      	beq.n	800e0f8 <_strtod_l+0x8b8>
 800e174:	e619      	b.n	800ddaa <_strtod_l+0x56a>
 800e176:	4641      	mov	r1, r8
 800e178:	4620      	mov	r0, r4
 800e17a:	f002 ff2b 	bl	8010fd4 <__ratio>
 800e17e:	ec57 6b10 	vmov	r6, r7, d0
 800e182:	2200      	movs	r2, #0
 800e184:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e188:	4630      	mov	r0, r6
 800e18a:	4639      	mov	r1, r7
 800e18c:	f7f2 fcc8 	bl	8000b20 <__aeabi_dcmple>
 800e190:	2800      	cmp	r0, #0
 800e192:	d06f      	beq.n	800e274 <_strtod_l+0xa34>
 800e194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e196:	2b00      	cmp	r3, #0
 800e198:	d17a      	bne.n	800e290 <_strtod_l+0xa50>
 800e19a:	f1ba 0f00 	cmp.w	sl, #0
 800e19e:	d158      	bne.n	800e252 <_strtod_l+0xa12>
 800e1a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d15a      	bne.n	800e260 <_strtod_l+0xa20>
 800e1aa:	4b64      	ldr	r3, [pc, #400]	@ (800e33c <_strtod_l+0xafc>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	4630      	mov	r0, r6
 800e1b0:	4639      	mov	r1, r7
 800e1b2:	f7f2 fcab 	bl	8000b0c <__aeabi_dcmplt>
 800e1b6:	2800      	cmp	r0, #0
 800e1b8:	d159      	bne.n	800e26e <_strtod_l+0xa2e>
 800e1ba:	4630      	mov	r0, r6
 800e1bc:	4639      	mov	r1, r7
 800e1be:	4b60      	ldr	r3, [pc, #384]	@ (800e340 <_strtod_l+0xb00>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f7f2 fa31 	bl	8000628 <__aeabi_dmul>
 800e1c6:	4606      	mov	r6, r0
 800e1c8:	460f      	mov	r7, r1
 800e1ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e1ce:	9606      	str	r6, [sp, #24]
 800e1d0:	9307      	str	r3, [sp, #28]
 800e1d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1d6:	4d57      	ldr	r5, [pc, #348]	@ (800e334 <_strtod_l+0xaf4>)
 800e1d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e1dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1de:	401d      	ands	r5, r3
 800e1e0:	4b58      	ldr	r3, [pc, #352]	@ (800e344 <_strtod_l+0xb04>)
 800e1e2:	429d      	cmp	r5, r3
 800e1e4:	f040 80b2 	bne.w	800e34c <_strtod_l+0xb0c>
 800e1e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e1ee:	ec4b ab10 	vmov	d0, sl, fp
 800e1f2:	f002 fe27 	bl	8010e44 <__ulp>
 800e1f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1fa:	ec51 0b10 	vmov	r0, r1, d0
 800e1fe:	f7f2 fa13 	bl	8000628 <__aeabi_dmul>
 800e202:	4652      	mov	r2, sl
 800e204:	465b      	mov	r3, fp
 800e206:	f7f2 f859 	bl	80002bc <__adddf3>
 800e20a:	460b      	mov	r3, r1
 800e20c:	4949      	ldr	r1, [pc, #292]	@ (800e334 <_strtod_l+0xaf4>)
 800e20e:	4a4e      	ldr	r2, [pc, #312]	@ (800e348 <_strtod_l+0xb08>)
 800e210:	4019      	ands	r1, r3
 800e212:	4291      	cmp	r1, r2
 800e214:	4682      	mov	sl, r0
 800e216:	d942      	bls.n	800e29e <_strtod_l+0xa5e>
 800e218:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e21a:	4b47      	ldr	r3, [pc, #284]	@ (800e338 <_strtod_l+0xaf8>)
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d103      	bne.n	800e228 <_strtod_l+0x9e8>
 800e220:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e222:	3301      	adds	r3, #1
 800e224:	f43f ad2b 	beq.w	800dc7e <_strtod_l+0x43e>
 800e228:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e338 <_strtod_l+0xaf8>
 800e22c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e230:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e232:	9805      	ldr	r0, [sp, #20]
 800e234:	f002 fad2 	bl	80107dc <_Bfree>
 800e238:	9805      	ldr	r0, [sp, #20]
 800e23a:	4649      	mov	r1, r9
 800e23c:	f002 face 	bl	80107dc <_Bfree>
 800e240:	9805      	ldr	r0, [sp, #20]
 800e242:	4641      	mov	r1, r8
 800e244:	f002 faca 	bl	80107dc <_Bfree>
 800e248:	9805      	ldr	r0, [sp, #20]
 800e24a:	4621      	mov	r1, r4
 800e24c:	f002 fac6 	bl	80107dc <_Bfree>
 800e250:	e618      	b.n	800de84 <_strtod_l+0x644>
 800e252:	f1ba 0f01 	cmp.w	sl, #1
 800e256:	d103      	bne.n	800e260 <_strtod_l+0xa20>
 800e258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	f43f ada5 	beq.w	800ddaa <_strtod_l+0x56a>
 800e260:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e310 <_strtod_l+0xad0>
 800e264:	4f35      	ldr	r7, [pc, #212]	@ (800e33c <_strtod_l+0xafc>)
 800e266:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e26a:	2600      	movs	r6, #0
 800e26c:	e7b1      	b.n	800e1d2 <_strtod_l+0x992>
 800e26e:	4f34      	ldr	r7, [pc, #208]	@ (800e340 <_strtod_l+0xb00>)
 800e270:	2600      	movs	r6, #0
 800e272:	e7aa      	b.n	800e1ca <_strtod_l+0x98a>
 800e274:	4b32      	ldr	r3, [pc, #200]	@ (800e340 <_strtod_l+0xb00>)
 800e276:	4630      	mov	r0, r6
 800e278:	4639      	mov	r1, r7
 800e27a:	2200      	movs	r2, #0
 800e27c:	f7f2 f9d4 	bl	8000628 <__aeabi_dmul>
 800e280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e282:	4606      	mov	r6, r0
 800e284:	460f      	mov	r7, r1
 800e286:	2b00      	cmp	r3, #0
 800e288:	d09f      	beq.n	800e1ca <_strtod_l+0x98a>
 800e28a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e28e:	e7a0      	b.n	800e1d2 <_strtod_l+0x992>
 800e290:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e318 <_strtod_l+0xad8>
 800e294:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e298:	ec57 6b17 	vmov	r6, r7, d7
 800e29c:	e799      	b.n	800e1d2 <_strtod_l+0x992>
 800e29e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e2a2:	9b08      	ldr	r3, [sp, #32]
 800e2a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d1c1      	bne.n	800e230 <_strtod_l+0x9f0>
 800e2ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e2b0:	0d1b      	lsrs	r3, r3, #20
 800e2b2:	051b      	lsls	r3, r3, #20
 800e2b4:	429d      	cmp	r5, r3
 800e2b6:	d1bb      	bne.n	800e230 <_strtod_l+0x9f0>
 800e2b8:	4630      	mov	r0, r6
 800e2ba:	4639      	mov	r1, r7
 800e2bc:	f7f2 fd14 	bl	8000ce8 <__aeabi_d2lz>
 800e2c0:	f7f2 f984 	bl	80005cc <__aeabi_l2d>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	4639      	mov	r1, r7
 800e2cc:	f7f1 fff4 	bl	80002b8 <__aeabi_dsub>
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e2d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e2dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2de:	ea46 060a 	orr.w	r6, r6, sl
 800e2e2:	431e      	orrs	r6, r3
 800e2e4:	d06f      	beq.n	800e3c6 <_strtod_l+0xb86>
 800e2e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e320 <_strtod_l+0xae0>)
 800e2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ec:	f7f2 fc0e 	bl	8000b0c <__aeabi_dcmplt>
 800e2f0:	2800      	cmp	r0, #0
 800e2f2:	f47f accf 	bne.w	800dc94 <_strtod_l+0x454>
 800e2f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800e328 <_strtod_l+0xae8>)
 800e2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e300:	f7f2 fc22 	bl	8000b48 <__aeabi_dcmpgt>
 800e304:	2800      	cmp	r0, #0
 800e306:	d093      	beq.n	800e230 <_strtod_l+0x9f0>
 800e308:	e4c4      	b.n	800dc94 <_strtod_l+0x454>
 800e30a:	bf00      	nop
 800e30c:	f3af 8000 	nop.w
 800e310:	00000000 	.word	0x00000000
 800e314:	bff00000 	.word	0xbff00000
 800e318:	00000000 	.word	0x00000000
 800e31c:	3ff00000 	.word	0x3ff00000
 800e320:	94a03595 	.word	0x94a03595
 800e324:	3fdfffff 	.word	0x3fdfffff
 800e328:	35afe535 	.word	0x35afe535
 800e32c:	3fe00000 	.word	0x3fe00000
 800e330:	000fffff 	.word	0x000fffff
 800e334:	7ff00000 	.word	0x7ff00000
 800e338:	7fefffff 	.word	0x7fefffff
 800e33c:	3ff00000 	.word	0x3ff00000
 800e340:	3fe00000 	.word	0x3fe00000
 800e344:	7fe00000 	.word	0x7fe00000
 800e348:	7c9fffff 	.word	0x7c9fffff
 800e34c:	9b08      	ldr	r3, [sp, #32]
 800e34e:	b323      	cbz	r3, 800e39a <_strtod_l+0xb5a>
 800e350:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e354:	d821      	bhi.n	800e39a <_strtod_l+0xb5a>
 800e356:	a328      	add	r3, pc, #160	@ (adr r3, 800e3f8 <_strtod_l+0xbb8>)
 800e358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35c:	4630      	mov	r0, r6
 800e35e:	4639      	mov	r1, r7
 800e360:	f7f2 fbde 	bl	8000b20 <__aeabi_dcmple>
 800e364:	b1a0      	cbz	r0, 800e390 <_strtod_l+0xb50>
 800e366:	4639      	mov	r1, r7
 800e368:	4630      	mov	r0, r6
 800e36a:	f7f2 fc35 	bl	8000bd8 <__aeabi_d2uiz>
 800e36e:	2801      	cmp	r0, #1
 800e370:	bf38      	it	cc
 800e372:	2001      	movcc	r0, #1
 800e374:	f7f2 f8de 	bl	8000534 <__aeabi_ui2d>
 800e378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e37a:	4606      	mov	r6, r0
 800e37c:	460f      	mov	r7, r1
 800e37e:	b9fb      	cbnz	r3, 800e3c0 <_strtod_l+0xb80>
 800e380:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e384:	9014      	str	r0, [sp, #80]	@ 0x50
 800e386:	9315      	str	r3, [sp, #84]	@ 0x54
 800e388:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e38c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e390:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e392:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e396:	1b5b      	subs	r3, r3, r5
 800e398:	9311      	str	r3, [sp, #68]	@ 0x44
 800e39a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e39e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e3a2:	f002 fd4f 	bl	8010e44 <__ulp>
 800e3a6:	4650      	mov	r0, sl
 800e3a8:	ec53 2b10 	vmov	r2, r3, d0
 800e3ac:	4659      	mov	r1, fp
 800e3ae:	f7f2 f93b 	bl	8000628 <__aeabi_dmul>
 800e3b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e3b6:	f7f1 ff81 	bl	80002bc <__adddf3>
 800e3ba:	4682      	mov	sl, r0
 800e3bc:	468b      	mov	fp, r1
 800e3be:	e770      	b.n	800e2a2 <_strtod_l+0xa62>
 800e3c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e3c4:	e7e0      	b.n	800e388 <_strtod_l+0xb48>
 800e3c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e400 <_strtod_l+0xbc0>)
 800e3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3cc:	f7f2 fb9e 	bl	8000b0c <__aeabi_dcmplt>
 800e3d0:	e798      	b.n	800e304 <_strtod_l+0xac4>
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e3d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3da:	6013      	str	r3, [r2, #0]
 800e3dc:	f7ff ba6d 	b.w	800d8ba <_strtod_l+0x7a>
 800e3e0:	2a65      	cmp	r2, #101	@ 0x65
 800e3e2:	f43f ab66 	beq.w	800dab2 <_strtod_l+0x272>
 800e3e6:	2a45      	cmp	r2, #69	@ 0x45
 800e3e8:	f43f ab63 	beq.w	800dab2 <_strtod_l+0x272>
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	f7ff bb9e 	b.w	800db2e <_strtod_l+0x2ee>
 800e3f2:	bf00      	nop
 800e3f4:	f3af 8000 	nop.w
 800e3f8:	ffc00000 	.word	0xffc00000
 800e3fc:	41dfffff 	.word	0x41dfffff
 800e400:	94a03595 	.word	0x94a03595
 800e404:	3fcfffff 	.word	0x3fcfffff

0800e408 <strtod>:
 800e408:	460a      	mov	r2, r1
 800e40a:	4601      	mov	r1, r0
 800e40c:	4802      	ldr	r0, [pc, #8]	@ (800e418 <strtod+0x10>)
 800e40e:	4b03      	ldr	r3, [pc, #12]	@ (800e41c <strtod+0x14>)
 800e410:	6800      	ldr	r0, [r0, #0]
 800e412:	f7ff ba15 	b.w	800d840 <_strtod_l>
 800e416:	bf00      	nop
 800e418:	20000264 	.word	0x20000264
 800e41c:	200000f8 	.word	0x200000f8

0800e420 <__cvt>:
 800e420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e424:	ec57 6b10 	vmov	r6, r7, d0
 800e428:	2f00      	cmp	r7, #0
 800e42a:	460c      	mov	r4, r1
 800e42c:	4619      	mov	r1, r3
 800e42e:	463b      	mov	r3, r7
 800e430:	bfbb      	ittet	lt
 800e432:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e436:	461f      	movlt	r7, r3
 800e438:	2300      	movge	r3, #0
 800e43a:	232d      	movlt	r3, #45	@ 0x2d
 800e43c:	700b      	strb	r3, [r1, #0]
 800e43e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e440:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e444:	4691      	mov	r9, r2
 800e446:	f023 0820 	bic.w	r8, r3, #32
 800e44a:	bfbc      	itt	lt
 800e44c:	4632      	movlt	r2, r6
 800e44e:	4616      	movlt	r6, r2
 800e450:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e454:	d005      	beq.n	800e462 <__cvt+0x42>
 800e456:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e45a:	d100      	bne.n	800e45e <__cvt+0x3e>
 800e45c:	3401      	adds	r4, #1
 800e45e:	2102      	movs	r1, #2
 800e460:	e000      	b.n	800e464 <__cvt+0x44>
 800e462:	2103      	movs	r1, #3
 800e464:	ab03      	add	r3, sp, #12
 800e466:	9301      	str	r3, [sp, #4]
 800e468:	ab02      	add	r3, sp, #8
 800e46a:	9300      	str	r3, [sp, #0]
 800e46c:	ec47 6b10 	vmov	d0, r6, r7
 800e470:	4653      	mov	r3, sl
 800e472:	4622      	mov	r2, r4
 800e474:	f001 f818 	bl	800f4a8 <_dtoa_r>
 800e478:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e47c:	4605      	mov	r5, r0
 800e47e:	d119      	bne.n	800e4b4 <__cvt+0x94>
 800e480:	f019 0f01 	tst.w	r9, #1
 800e484:	d00e      	beq.n	800e4a4 <__cvt+0x84>
 800e486:	eb00 0904 	add.w	r9, r0, r4
 800e48a:	2200      	movs	r2, #0
 800e48c:	2300      	movs	r3, #0
 800e48e:	4630      	mov	r0, r6
 800e490:	4639      	mov	r1, r7
 800e492:	f7f2 fb31 	bl	8000af8 <__aeabi_dcmpeq>
 800e496:	b108      	cbz	r0, 800e49c <__cvt+0x7c>
 800e498:	f8cd 900c 	str.w	r9, [sp, #12]
 800e49c:	2230      	movs	r2, #48	@ 0x30
 800e49e:	9b03      	ldr	r3, [sp, #12]
 800e4a0:	454b      	cmp	r3, r9
 800e4a2:	d31e      	bcc.n	800e4e2 <__cvt+0xc2>
 800e4a4:	9b03      	ldr	r3, [sp, #12]
 800e4a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4a8:	1b5b      	subs	r3, r3, r5
 800e4aa:	4628      	mov	r0, r5
 800e4ac:	6013      	str	r3, [r2, #0]
 800e4ae:	b004      	add	sp, #16
 800e4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e4b8:	eb00 0904 	add.w	r9, r0, r4
 800e4bc:	d1e5      	bne.n	800e48a <__cvt+0x6a>
 800e4be:	7803      	ldrb	r3, [r0, #0]
 800e4c0:	2b30      	cmp	r3, #48	@ 0x30
 800e4c2:	d10a      	bne.n	800e4da <__cvt+0xba>
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	4639      	mov	r1, r7
 800e4cc:	f7f2 fb14 	bl	8000af8 <__aeabi_dcmpeq>
 800e4d0:	b918      	cbnz	r0, 800e4da <__cvt+0xba>
 800e4d2:	f1c4 0401 	rsb	r4, r4, #1
 800e4d6:	f8ca 4000 	str.w	r4, [sl]
 800e4da:	f8da 3000 	ldr.w	r3, [sl]
 800e4de:	4499      	add	r9, r3
 800e4e0:	e7d3      	b.n	800e48a <__cvt+0x6a>
 800e4e2:	1c59      	adds	r1, r3, #1
 800e4e4:	9103      	str	r1, [sp, #12]
 800e4e6:	701a      	strb	r2, [r3, #0]
 800e4e8:	e7d9      	b.n	800e49e <__cvt+0x7e>

0800e4ea <__exponent>:
 800e4ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4ec:	2900      	cmp	r1, #0
 800e4ee:	bfba      	itte	lt
 800e4f0:	4249      	neglt	r1, r1
 800e4f2:	232d      	movlt	r3, #45	@ 0x2d
 800e4f4:	232b      	movge	r3, #43	@ 0x2b
 800e4f6:	2909      	cmp	r1, #9
 800e4f8:	7002      	strb	r2, [r0, #0]
 800e4fa:	7043      	strb	r3, [r0, #1]
 800e4fc:	dd29      	ble.n	800e552 <__exponent+0x68>
 800e4fe:	f10d 0307 	add.w	r3, sp, #7
 800e502:	461d      	mov	r5, r3
 800e504:	270a      	movs	r7, #10
 800e506:	461a      	mov	r2, r3
 800e508:	fbb1 f6f7 	udiv	r6, r1, r7
 800e50c:	fb07 1416 	mls	r4, r7, r6, r1
 800e510:	3430      	adds	r4, #48	@ 0x30
 800e512:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e516:	460c      	mov	r4, r1
 800e518:	2c63      	cmp	r4, #99	@ 0x63
 800e51a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e51e:	4631      	mov	r1, r6
 800e520:	dcf1      	bgt.n	800e506 <__exponent+0x1c>
 800e522:	3130      	adds	r1, #48	@ 0x30
 800e524:	1e94      	subs	r4, r2, #2
 800e526:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e52a:	1c41      	adds	r1, r0, #1
 800e52c:	4623      	mov	r3, r4
 800e52e:	42ab      	cmp	r3, r5
 800e530:	d30a      	bcc.n	800e548 <__exponent+0x5e>
 800e532:	f10d 0309 	add.w	r3, sp, #9
 800e536:	1a9b      	subs	r3, r3, r2
 800e538:	42ac      	cmp	r4, r5
 800e53a:	bf88      	it	hi
 800e53c:	2300      	movhi	r3, #0
 800e53e:	3302      	adds	r3, #2
 800e540:	4403      	add	r3, r0
 800e542:	1a18      	subs	r0, r3, r0
 800e544:	b003      	add	sp, #12
 800e546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e548:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e54c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e550:	e7ed      	b.n	800e52e <__exponent+0x44>
 800e552:	2330      	movs	r3, #48	@ 0x30
 800e554:	3130      	adds	r1, #48	@ 0x30
 800e556:	7083      	strb	r3, [r0, #2]
 800e558:	70c1      	strb	r1, [r0, #3]
 800e55a:	1d03      	adds	r3, r0, #4
 800e55c:	e7f1      	b.n	800e542 <__exponent+0x58>
	...

0800e560 <_printf_float>:
 800e560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e564:	b08d      	sub	sp, #52	@ 0x34
 800e566:	460c      	mov	r4, r1
 800e568:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e56c:	4616      	mov	r6, r2
 800e56e:	461f      	mov	r7, r3
 800e570:	4605      	mov	r5, r0
 800e572:	f000 fe1d 	bl	800f1b0 <_localeconv_r>
 800e576:	6803      	ldr	r3, [r0, #0]
 800e578:	9304      	str	r3, [sp, #16]
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7f1 fe90 	bl	80002a0 <strlen>
 800e580:	2300      	movs	r3, #0
 800e582:	930a      	str	r3, [sp, #40]	@ 0x28
 800e584:	f8d8 3000 	ldr.w	r3, [r8]
 800e588:	9005      	str	r0, [sp, #20]
 800e58a:	3307      	adds	r3, #7
 800e58c:	f023 0307 	bic.w	r3, r3, #7
 800e590:	f103 0208 	add.w	r2, r3, #8
 800e594:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e598:	f8d4 b000 	ldr.w	fp, [r4]
 800e59c:	f8c8 2000 	str.w	r2, [r8]
 800e5a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e5a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e5a8:	9307      	str	r3, [sp, #28]
 800e5aa:	f8cd 8018 	str.w	r8, [sp, #24]
 800e5ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e5b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5b6:	4b9c      	ldr	r3, [pc, #624]	@ (800e828 <_printf_float+0x2c8>)
 800e5b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e5bc:	f7f2 face 	bl	8000b5c <__aeabi_dcmpun>
 800e5c0:	bb70      	cbnz	r0, 800e620 <_printf_float+0xc0>
 800e5c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5c6:	4b98      	ldr	r3, [pc, #608]	@ (800e828 <_printf_float+0x2c8>)
 800e5c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e5cc:	f7f2 faa8 	bl	8000b20 <__aeabi_dcmple>
 800e5d0:	bb30      	cbnz	r0, 800e620 <_printf_float+0xc0>
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	4640      	mov	r0, r8
 800e5d8:	4649      	mov	r1, r9
 800e5da:	f7f2 fa97 	bl	8000b0c <__aeabi_dcmplt>
 800e5de:	b110      	cbz	r0, 800e5e6 <_printf_float+0x86>
 800e5e0:	232d      	movs	r3, #45	@ 0x2d
 800e5e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5e6:	4a91      	ldr	r2, [pc, #580]	@ (800e82c <_printf_float+0x2cc>)
 800e5e8:	4b91      	ldr	r3, [pc, #580]	@ (800e830 <_printf_float+0x2d0>)
 800e5ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e5ee:	bf94      	ite	ls
 800e5f0:	4690      	movls	r8, r2
 800e5f2:	4698      	movhi	r8, r3
 800e5f4:	2303      	movs	r3, #3
 800e5f6:	6123      	str	r3, [r4, #16]
 800e5f8:	f02b 0304 	bic.w	r3, fp, #4
 800e5fc:	6023      	str	r3, [r4, #0]
 800e5fe:	f04f 0900 	mov.w	r9, #0
 800e602:	9700      	str	r7, [sp, #0]
 800e604:	4633      	mov	r3, r6
 800e606:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e608:	4621      	mov	r1, r4
 800e60a:	4628      	mov	r0, r5
 800e60c:	f000 f9d2 	bl	800e9b4 <_printf_common>
 800e610:	3001      	adds	r0, #1
 800e612:	f040 808d 	bne.w	800e730 <_printf_float+0x1d0>
 800e616:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e61a:	b00d      	add	sp, #52	@ 0x34
 800e61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e620:	4642      	mov	r2, r8
 800e622:	464b      	mov	r3, r9
 800e624:	4640      	mov	r0, r8
 800e626:	4649      	mov	r1, r9
 800e628:	f7f2 fa98 	bl	8000b5c <__aeabi_dcmpun>
 800e62c:	b140      	cbz	r0, 800e640 <_printf_float+0xe0>
 800e62e:	464b      	mov	r3, r9
 800e630:	2b00      	cmp	r3, #0
 800e632:	bfbc      	itt	lt
 800e634:	232d      	movlt	r3, #45	@ 0x2d
 800e636:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e63a:	4a7e      	ldr	r2, [pc, #504]	@ (800e834 <_printf_float+0x2d4>)
 800e63c:	4b7e      	ldr	r3, [pc, #504]	@ (800e838 <_printf_float+0x2d8>)
 800e63e:	e7d4      	b.n	800e5ea <_printf_float+0x8a>
 800e640:	6863      	ldr	r3, [r4, #4]
 800e642:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e646:	9206      	str	r2, [sp, #24]
 800e648:	1c5a      	adds	r2, r3, #1
 800e64a:	d13b      	bne.n	800e6c4 <_printf_float+0x164>
 800e64c:	2306      	movs	r3, #6
 800e64e:	6063      	str	r3, [r4, #4]
 800e650:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e654:	2300      	movs	r3, #0
 800e656:	6022      	str	r2, [r4, #0]
 800e658:	9303      	str	r3, [sp, #12]
 800e65a:	ab0a      	add	r3, sp, #40	@ 0x28
 800e65c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e660:	ab09      	add	r3, sp, #36	@ 0x24
 800e662:	9300      	str	r3, [sp, #0]
 800e664:	6861      	ldr	r1, [r4, #4]
 800e666:	ec49 8b10 	vmov	d0, r8, r9
 800e66a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e66e:	4628      	mov	r0, r5
 800e670:	f7ff fed6 	bl	800e420 <__cvt>
 800e674:	9b06      	ldr	r3, [sp, #24]
 800e676:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e678:	2b47      	cmp	r3, #71	@ 0x47
 800e67a:	4680      	mov	r8, r0
 800e67c:	d129      	bne.n	800e6d2 <_printf_float+0x172>
 800e67e:	1cc8      	adds	r0, r1, #3
 800e680:	db02      	blt.n	800e688 <_printf_float+0x128>
 800e682:	6863      	ldr	r3, [r4, #4]
 800e684:	4299      	cmp	r1, r3
 800e686:	dd41      	ble.n	800e70c <_printf_float+0x1ac>
 800e688:	f1aa 0a02 	sub.w	sl, sl, #2
 800e68c:	fa5f fa8a 	uxtb.w	sl, sl
 800e690:	3901      	subs	r1, #1
 800e692:	4652      	mov	r2, sl
 800e694:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e698:	9109      	str	r1, [sp, #36]	@ 0x24
 800e69a:	f7ff ff26 	bl	800e4ea <__exponent>
 800e69e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e6a0:	1813      	adds	r3, r2, r0
 800e6a2:	2a01      	cmp	r2, #1
 800e6a4:	4681      	mov	r9, r0
 800e6a6:	6123      	str	r3, [r4, #16]
 800e6a8:	dc02      	bgt.n	800e6b0 <_printf_float+0x150>
 800e6aa:	6822      	ldr	r2, [r4, #0]
 800e6ac:	07d2      	lsls	r2, r2, #31
 800e6ae:	d501      	bpl.n	800e6b4 <_printf_float+0x154>
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	6123      	str	r3, [r4, #16]
 800e6b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d0a2      	beq.n	800e602 <_printf_float+0xa2>
 800e6bc:	232d      	movs	r3, #45	@ 0x2d
 800e6be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6c2:	e79e      	b.n	800e602 <_printf_float+0xa2>
 800e6c4:	9a06      	ldr	r2, [sp, #24]
 800e6c6:	2a47      	cmp	r2, #71	@ 0x47
 800e6c8:	d1c2      	bne.n	800e650 <_printf_float+0xf0>
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d1c0      	bne.n	800e650 <_printf_float+0xf0>
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	e7bd      	b.n	800e64e <_printf_float+0xee>
 800e6d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e6d6:	d9db      	bls.n	800e690 <_printf_float+0x130>
 800e6d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e6dc:	d118      	bne.n	800e710 <_printf_float+0x1b0>
 800e6de:	2900      	cmp	r1, #0
 800e6e0:	6863      	ldr	r3, [r4, #4]
 800e6e2:	dd0b      	ble.n	800e6fc <_printf_float+0x19c>
 800e6e4:	6121      	str	r1, [r4, #16]
 800e6e6:	b913      	cbnz	r3, 800e6ee <_printf_float+0x18e>
 800e6e8:	6822      	ldr	r2, [r4, #0]
 800e6ea:	07d0      	lsls	r0, r2, #31
 800e6ec:	d502      	bpl.n	800e6f4 <_printf_float+0x194>
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	440b      	add	r3, r1
 800e6f2:	6123      	str	r3, [r4, #16]
 800e6f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e6f6:	f04f 0900 	mov.w	r9, #0
 800e6fa:	e7db      	b.n	800e6b4 <_printf_float+0x154>
 800e6fc:	b913      	cbnz	r3, 800e704 <_printf_float+0x1a4>
 800e6fe:	6822      	ldr	r2, [r4, #0]
 800e700:	07d2      	lsls	r2, r2, #31
 800e702:	d501      	bpl.n	800e708 <_printf_float+0x1a8>
 800e704:	3302      	adds	r3, #2
 800e706:	e7f4      	b.n	800e6f2 <_printf_float+0x192>
 800e708:	2301      	movs	r3, #1
 800e70a:	e7f2      	b.n	800e6f2 <_printf_float+0x192>
 800e70c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e712:	4299      	cmp	r1, r3
 800e714:	db05      	blt.n	800e722 <_printf_float+0x1c2>
 800e716:	6823      	ldr	r3, [r4, #0]
 800e718:	6121      	str	r1, [r4, #16]
 800e71a:	07d8      	lsls	r0, r3, #31
 800e71c:	d5ea      	bpl.n	800e6f4 <_printf_float+0x194>
 800e71e:	1c4b      	adds	r3, r1, #1
 800e720:	e7e7      	b.n	800e6f2 <_printf_float+0x192>
 800e722:	2900      	cmp	r1, #0
 800e724:	bfd4      	ite	le
 800e726:	f1c1 0202 	rsble	r2, r1, #2
 800e72a:	2201      	movgt	r2, #1
 800e72c:	4413      	add	r3, r2
 800e72e:	e7e0      	b.n	800e6f2 <_printf_float+0x192>
 800e730:	6823      	ldr	r3, [r4, #0]
 800e732:	055a      	lsls	r2, r3, #21
 800e734:	d407      	bmi.n	800e746 <_printf_float+0x1e6>
 800e736:	6923      	ldr	r3, [r4, #16]
 800e738:	4642      	mov	r2, r8
 800e73a:	4631      	mov	r1, r6
 800e73c:	4628      	mov	r0, r5
 800e73e:	47b8      	blx	r7
 800e740:	3001      	adds	r0, #1
 800e742:	d12b      	bne.n	800e79c <_printf_float+0x23c>
 800e744:	e767      	b.n	800e616 <_printf_float+0xb6>
 800e746:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e74a:	f240 80dd 	bls.w	800e908 <_printf_float+0x3a8>
 800e74e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e752:	2200      	movs	r2, #0
 800e754:	2300      	movs	r3, #0
 800e756:	f7f2 f9cf 	bl	8000af8 <__aeabi_dcmpeq>
 800e75a:	2800      	cmp	r0, #0
 800e75c:	d033      	beq.n	800e7c6 <_printf_float+0x266>
 800e75e:	4a37      	ldr	r2, [pc, #220]	@ (800e83c <_printf_float+0x2dc>)
 800e760:	2301      	movs	r3, #1
 800e762:	4631      	mov	r1, r6
 800e764:	4628      	mov	r0, r5
 800e766:	47b8      	blx	r7
 800e768:	3001      	adds	r0, #1
 800e76a:	f43f af54 	beq.w	800e616 <_printf_float+0xb6>
 800e76e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e772:	4543      	cmp	r3, r8
 800e774:	db02      	blt.n	800e77c <_printf_float+0x21c>
 800e776:	6823      	ldr	r3, [r4, #0]
 800e778:	07d8      	lsls	r0, r3, #31
 800e77a:	d50f      	bpl.n	800e79c <_printf_float+0x23c>
 800e77c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e780:	4631      	mov	r1, r6
 800e782:	4628      	mov	r0, r5
 800e784:	47b8      	blx	r7
 800e786:	3001      	adds	r0, #1
 800e788:	f43f af45 	beq.w	800e616 <_printf_float+0xb6>
 800e78c:	f04f 0900 	mov.w	r9, #0
 800e790:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800e794:	f104 0a1a 	add.w	sl, r4, #26
 800e798:	45c8      	cmp	r8, r9
 800e79a:	dc09      	bgt.n	800e7b0 <_printf_float+0x250>
 800e79c:	6823      	ldr	r3, [r4, #0]
 800e79e:	079b      	lsls	r3, r3, #30
 800e7a0:	f100 8103 	bmi.w	800e9aa <_printf_float+0x44a>
 800e7a4:	68e0      	ldr	r0, [r4, #12]
 800e7a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7a8:	4298      	cmp	r0, r3
 800e7aa:	bfb8      	it	lt
 800e7ac:	4618      	movlt	r0, r3
 800e7ae:	e734      	b.n	800e61a <_printf_float+0xba>
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	4652      	mov	r2, sl
 800e7b4:	4631      	mov	r1, r6
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	47b8      	blx	r7
 800e7ba:	3001      	adds	r0, #1
 800e7bc:	f43f af2b 	beq.w	800e616 <_printf_float+0xb6>
 800e7c0:	f109 0901 	add.w	r9, r9, #1
 800e7c4:	e7e8      	b.n	800e798 <_printf_float+0x238>
 800e7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	dc39      	bgt.n	800e840 <_printf_float+0x2e0>
 800e7cc:	4a1b      	ldr	r2, [pc, #108]	@ (800e83c <_printf_float+0x2dc>)
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	4631      	mov	r1, r6
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	47b8      	blx	r7
 800e7d6:	3001      	adds	r0, #1
 800e7d8:	f43f af1d 	beq.w	800e616 <_printf_float+0xb6>
 800e7dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e7e0:	ea59 0303 	orrs.w	r3, r9, r3
 800e7e4:	d102      	bne.n	800e7ec <_printf_float+0x28c>
 800e7e6:	6823      	ldr	r3, [r4, #0]
 800e7e8:	07d9      	lsls	r1, r3, #31
 800e7ea:	d5d7      	bpl.n	800e79c <_printf_float+0x23c>
 800e7ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7f0:	4631      	mov	r1, r6
 800e7f2:	4628      	mov	r0, r5
 800e7f4:	47b8      	blx	r7
 800e7f6:	3001      	adds	r0, #1
 800e7f8:	f43f af0d 	beq.w	800e616 <_printf_float+0xb6>
 800e7fc:	f04f 0a00 	mov.w	sl, #0
 800e800:	f104 0b1a 	add.w	fp, r4, #26
 800e804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e806:	425b      	negs	r3, r3
 800e808:	4553      	cmp	r3, sl
 800e80a:	dc01      	bgt.n	800e810 <_printf_float+0x2b0>
 800e80c:	464b      	mov	r3, r9
 800e80e:	e793      	b.n	800e738 <_printf_float+0x1d8>
 800e810:	2301      	movs	r3, #1
 800e812:	465a      	mov	r2, fp
 800e814:	4631      	mov	r1, r6
 800e816:	4628      	mov	r0, r5
 800e818:	47b8      	blx	r7
 800e81a:	3001      	adds	r0, #1
 800e81c:	f43f aefb 	beq.w	800e616 <_printf_float+0xb6>
 800e820:	f10a 0a01 	add.w	sl, sl, #1
 800e824:	e7ee      	b.n	800e804 <_printf_float+0x2a4>
 800e826:	bf00      	nop
 800e828:	7fefffff 	.word	0x7fefffff
 800e82c:	080138c9 	.word	0x080138c9
 800e830:	080138cd 	.word	0x080138cd
 800e834:	080138d1 	.word	0x080138d1
 800e838:	080138d5 	.word	0x080138d5
 800e83c:	08013b6f 	.word	0x08013b6f
 800e840:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e842:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e846:	4553      	cmp	r3, sl
 800e848:	bfa8      	it	ge
 800e84a:	4653      	movge	r3, sl
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	4699      	mov	r9, r3
 800e850:	dc36      	bgt.n	800e8c0 <_printf_float+0x360>
 800e852:	f04f 0b00 	mov.w	fp, #0
 800e856:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e85a:	f104 021a 	add.w	r2, r4, #26
 800e85e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e860:	9306      	str	r3, [sp, #24]
 800e862:	eba3 0309 	sub.w	r3, r3, r9
 800e866:	455b      	cmp	r3, fp
 800e868:	dc31      	bgt.n	800e8ce <_printf_float+0x36e>
 800e86a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e86c:	459a      	cmp	sl, r3
 800e86e:	dc3a      	bgt.n	800e8e6 <_printf_float+0x386>
 800e870:	6823      	ldr	r3, [r4, #0]
 800e872:	07da      	lsls	r2, r3, #31
 800e874:	d437      	bmi.n	800e8e6 <_printf_float+0x386>
 800e876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e878:	ebaa 0903 	sub.w	r9, sl, r3
 800e87c:	9b06      	ldr	r3, [sp, #24]
 800e87e:	ebaa 0303 	sub.w	r3, sl, r3
 800e882:	4599      	cmp	r9, r3
 800e884:	bfa8      	it	ge
 800e886:	4699      	movge	r9, r3
 800e888:	f1b9 0f00 	cmp.w	r9, #0
 800e88c:	dc33      	bgt.n	800e8f6 <_printf_float+0x396>
 800e88e:	f04f 0800 	mov.w	r8, #0
 800e892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e896:	f104 0b1a 	add.w	fp, r4, #26
 800e89a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e89c:	ebaa 0303 	sub.w	r3, sl, r3
 800e8a0:	eba3 0309 	sub.w	r3, r3, r9
 800e8a4:	4543      	cmp	r3, r8
 800e8a6:	f77f af79 	ble.w	800e79c <_printf_float+0x23c>
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	465a      	mov	r2, fp
 800e8ae:	4631      	mov	r1, r6
 800e8b0:	4628      	mov	r0, r5
 800e8b2:	47b8      	blx	r7
 800e8b4:	3001      	adds	r0, #1
 800e8b6:	f43f aeae 	beq.w	800e616 <_printf_float+0xb6>
 800e8ba:	f108 0801 	add.w	r8, r8, #1
 800e8be:	e7ec      	b.n	800e89a <_printf_float+0x33a>
 800e8c0:	4642      	mov	r2, r8
 800e8c2:	4631      	mov	r1, r6
 800e8c4:	4628      	mov	r0, r5
 800e8c6:	47b8      	blx	r7
 800e8c8:	3001      	adds	r0, #1
 800e8ca:	d1c2      	bne.n	800e852 <_printf_float+0x2f2>
 800e8cc:	e6a3      	b.n	800e616 <_printf_float+0xb6>
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	4631      	mov	r1, r6
 800e8d2:	4628      	mov	r0, r5
 800e8d4:	9206      	str	r2, [sp, #24]
 800e8d6:	47b8      	blx	r7
 800e8d8:	3001      	adds	r0, #1
 800e8da:	f43f ae9c 	beq.w	800e616 <_printf_float+0xb6>
 800e8de:	9a06      	ldr	r2, [sp, #24]
 800e8e0:	f10b 0b01 	add.w	fp, fp, #1
 800e8e4:	e7bb      	b.n	800e85e <_printf_float+0x2fe>
 800e8e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8ea:	4631      	mov	r1, r6
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	47b8      	blx	r7
 800e8f0:	3001      	adds	r0, #1
 800e8f2:	d1c0      	bne.n	800e876 <_printf_float+0x316>
 800e8f4:	e68f      	b.n	800e616 <_printf_float+0xb6>
 800e8f6:	9a06      	ldr	r2, [sp, #24]
 800e8f8:	464b      	mov	r3, r9
 800e8fa:	4442      	add	r2, r8
 800e8fc:	4631      	mov	r1, r6
 800e8fe:	4628      	mov	r0, r5
 800e900:	47b8      	blx	r7
 800e902:	3001      	adds	r0, #1
 800e904:	d1c3      	bne.n	800e88e <_printf_float+0x32e>
 800e906:	e686      	b.n	800e616 <_printf_float+0xb6>
 800e908:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e90c:	f1ba 0f01 	cmp.w	sl, #1
 800e910:	dc01      	bgt.n	800e916 <_printf_float+0x3b6>
 800e912:	07db      	lsls	r3, r3, #31
 800e914:	d536      	bpl.n	800e984 <_printf_float+0x424>
 800e916:	2301      	movs	r3, #1
 800e918:	4642      	mov	r2, r8
 800e91a:	4631      	mov	r1, r6
 800e91c:	4628      	mov	r0, r5
 800e91e:	47b8      	blx	r7
 800e920:	3001      	adds	r0, #1
 800e922:	f43f ae78 	beq.w	800e616 <_printf_float+0xb6>
 800e926:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e92a:	4631      	mov	r1, r6
 800e92c:	4628      	mov	r0, r5
 800e92e:	47b8      	blx	r7
 800e930:	3001      	adds	r0, #1
 800e932:	f43f ae70 	beq.w	800e616 <_printf_float+0xb6>
 800e936:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e93a:	2200      	movs	r2, #0
 800e93c:	2300      	movs	r3, #0
 800e93e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e942:	f7f2 f8d9 	bl	8000af8 <__aeabi_dcmpeq>
 800e946:	b9c0      	cbnz	r0, 800e97a <_printf_float+0x41a>
 800e948:	4653      	mov	r3, sl
 800e94a:	f108 0201 	add.w	r2, r8, #1
 800e94e:	4631      	mov	r1, r6
 800e950:	4628      	mov	r0, r5
 800e952:	47b8      	blx	r7
 800e954:	3001      	adds	r0, #1
 800e956:	d10c      	bne.n	800e972 <_printf_float+0x412>
 800e958:	e65d      	b.n	800e616 <_printf_float+0xb6>
 800e95a:	2301      	movs	r3, #1
 800e95c:	465a      	mov	r2, fp
 800e95e:	4631      	mov	r1, r6
 800e960:	4628      	mov	r0, r5
 800e962:	47b8      	blx	r7
 800e964:	3001      	adds	r0, #1
 800e966:	f43f ae56 	beq.w	800e616 <_printf_float+0xb6>
 800e96a:	f108 0801 	add.w	r8, r8, #1
 800e96e:	45d0      	cmp	r8, sl
 800e970:	dbf3      	blt.n	800e95a <_printf_float+0x3fa>
 800e972:	464b      	mov	r3, r9
 800e974:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e978:	e6df      	b.n	800e73a <_printf_float+0x1da>
 800e97a:	f04f 0800 	mov.w	r8, #0
 800e97e:	f104 0b1a 	add.w	fp, r4, #26
 800e982:	e7f4      	b.n	800e96e <_printf_float+0x40e>
 800e984:	2301      	movs	r3, #1
 800e986:	4642      	mov	r2, r8
 800e988:	e7e1      	b.n	800e94e <_printf_float+0x3ee>
 800e98a:	2301      	movs	r3, #1
 800e98c:	464a      	mov	r2, r9
 800e98e:	4631      	mov	r1, r6
 800e990:	4628      	mov	r0, r5
 800e992:	47b8      	blx	r7
 800e994:	3001      	adds	r0, #1
 800e996:	f43f ae3e 	beq.w	800e616 <_printf_float+0xb6>
 800e99a:	f108 0801 	add.w	r8, r8, #1
 800e99e:	68e3      	ldr	r3, [r4, #12]
 800e9a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e9a2:	1a5b      	subs	r3, r3, r1
 800e9a4:	4543      	cmp	r3, r8
 800e9a6:	dcf0      	bgt.n	800e98a <_printf_float+0x42a>
 800e9a8:	e6fc      	b.n	800e7a4 <_printf_float+0x244>
 800e9aa:	f04f 0800 	mov.w	r8, #0
 800e9ae:	f104 0919 	add.w	r9, r4, #25
 800e9b2:	e7f4      	b.n	800e99e <_printf_float+0x43e>

0800e9b4 <_printf_common>:
 800e9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9b8:	4616      	mov	r6, r2
 800e9ba:	4698      	mov	r8, r3
 800e9bc:	688a      	ldr	r2, [r1, #8]
 800e9be:	690b      	ldr	r3, [r1, #16]
 800e9c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	bfb8      	it	lt
 800e9c8:	4613      	movlt	r3, r2
 800e9ca:	6033      	str	r3, [r6, #0]
 800e9cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e9d0:	4607      	mov	r7, r0
 800e9d2:	460c      	mov	r4, r1
 800e9d4:	b10a      	cbz	r2, 800e9da <_printf_common+0x26>
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	6033      	str	r3, [r6, #0]
 800e9da:	6823      	ldr	r3, [r4, #0]
 800e9dc:	0699      	lsls	r1, r3, #26
 800e9de:	bf42      	ittt	mi
 800e9e0:	6833      	ldrmi	r3, [r6, #0]
 800e9e2:	3302      	addmi	r3, #2
 800e9e4:	6033      	strmi	r3, [r6, #0]
 800e9e6:	6825      	ldr	r5, [r4, #0]
 800e9e8:	f015 0506 	ands.w	r5, r5, #6
 800e9ec:	d106      	bne.n	800e9fc <_printf_common+0x48>
 800e9ee:	f104 0a19 	add.w	sl, r4, #25
 800e9f2:	68e3      	ldr	r3, [r4, #12]
 800e9f4:	6832      	ldr	r2, [r6, #0]
 800e9f6:	1a9b      	subs	r3, r3, r2
 800e9f8:	42ab      	cmp	r3, r5
 800e9fa:	dc26      	bgt.n	800ea4a <_printf_common+0x96>
 800e9fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ea00:	6822      	ldr	r2, [r4, #0]
 800ea02:	3b00      	subs	r3, #0
 800ea04:	bf18      	it	ne
 800ea06:	2301      	movne	r3, #1
 800ea08:	0692      	lsls	r2, r2, #26
 800ea0a:	d42b      	bmi.n	800ea64 <_printf_common+0xb0>
 800ea0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ea10:	4641      	mov	r1, r8
 800ea12:	4638      	mov	r0, r7
 800ea14:	47c8      	blx	r9
 800ea16:	3001      	adds	r0, #1
 800ea18:	d01e      	beq.n	800ea58 <_printf_common+0xa4>
 800ea1a:	6823      	ldr	r3, [r4, #0]
 800ea1c:	6922      	ldr	r2, [r4, #16]
 800ea1e:	f003 0306 	and.w	r3, r3, #6
 800ea22:	2b04      	cmp	r3, #4
 800ea24:	bf02      	ittt	eq
 800ea26:	68e5      	ldreq	r5, [r4, #12]
 800ea28:	6833      	ldreq	r3, [r6, #0]
 800ea2a:	1aed      	subeq	r5, r5, r3
 800ea2c:	68a3      	ldr	r3, [r4, #8]
 800ea2e:	bf0c      	ite	eq
 800ea30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea34:	2500      	movne	r5, #0
 800ea36:	4293      	cmp	r3, r2
 800ea38:	bfc4      	itt	gt
 800ea3a:	1a9b      	subgt	r3, r3, r2
 800ea3c:	18ed      	addgt	r5, r5, r3
 800ea3e:	2600      	movs	r6, #0
 800ea40:	341a      	adds	r4, #26
 800ea42:	42b5      	cmp	r5, r6
 800ea44:	d11a      	bne.n	800ea7c <_printf_common+0xc8>
 800ea46:	2000      	movs	r0, #0
 800ea48:	e008      	b.n	800ea5c <_printf_common+0xa8>
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	4652      	mov	r2, sl
 800ea4e:	4641      	mov	r1, r8
 800ea50:	4638      	mov	r0, r7
 800ea52:	47c8      	blx	r9
 800ea54:	3001      	adds	r0, #1
 800ea56:	d103      	bne.n	800ea60 <_printf_common+0xac>
 800ea58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea60:	3501      	adds	r5, #1
 800ea62:	e7c6      	b.n	800e9f2 <_printf_common+0x3e>
 800ea64:	18e1      	adds	r1, r4, r3
 800ea66:	1c5a      	adds	r2, r3, #1
 800ea68:	2030      	movs	r0, #48	@ 0x30
 800ea6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ea6e:	4422      	add	r2, r4
 800ea70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ea74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ea78:	3302      	adds	r3, #2
 800ea7a:	e7c7      	b.n	800ea0c <_printf_common+0x58>
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	4622      	mov	r2, r4
 800ea80:	4641      	mov	r1, r8
 800ea82:	4638      	mov	r0, r7
 800ea84:	47c8      	blx	r9
 800ea86:	3001      	adds	r0, #1
 800ea88:	d0e6      	beq.n	800ea58 <_printf_common+0xa4>
 800ea8a:	3601      	adds	r6, #1
 800ea8c:	e7d9      	b.n	800ea42 <_printf_common+0x8e>
	...

0800ea90 <_printf_i>:
 800ea90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea94:	7e0f      	ldrb	r7, [r1, #24]
 800ea96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ea98:	2f78      	cmp	r7, #120	@ 0x78
 800ea9a:	4691      	mov	r9, r2
 800ea9c:	4680      	mov	r8, r0
 800ea9e:	460c      	mov	r4, r1
 800eaa0:	469a      	mov	sl, r3
 800eaa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eaa6:	d807      	bhi.n	800eab8 <_printf_i+0x28>
 800eaa8:	2f62      	cmp	r7, #98	@ 0x62
 800eaaa:	d80a      	bhi.n	800eac2 <_printf_i+0x32>
 800eaac:	2f00      	cmp	r7, #0
 800eaae:	f000 80d2 	beq.w	800ec56 <_printf_i+0x1c6>
 800eab2:	2f58      	cmp	r7, #88	@ 0x58
 800eab4:	f000 80b9 	beq.w	800ec2a <_printf_i+0x19a>
 800eab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eabc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eac0:	e03a      	b.n	800eb38 <_printf_i+0xa8>
 800eac2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eac6:	2b15      	cmp	r3, #21
 800eac8:	d8f6      	bhi.n	800eab8 <_printf_i+0x28>
 800eaca:	a101      	add	r1, pc, #4	@ (adr r1, 800ead0 <_printf_i+0x40>)
 800eacc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ead0:	0800eb29 	.word	0x0800eb29
 800ead4:	0800eb3d 	.word	0x0800eb3d
 800ead8:	0800eab9 	.word	0x0800eab9
 800eadc:	0800eab9 	.word	0x0800eab9
 800eae0:	0800eab9 	.word	0x0800eab9
 800eae4:	0800eab9 	.word	0x0800eab9
 800eae8:	0800eb3d 	.word	0x0800eb3d
 800eaec:	0800eab9 	.word	0x0800eab9
 800eaf0:	0800eab9 	.word	0x0800eab9
 800eaf4:	0800eab9 	.word	0x0800eab9
 800eaf8:	0800eab9 	.word	0x0800eab9
 800eafc:	0800ec3d 	.word	0x0800ec3d
 800eb00:	0800eb67 	.word	0x0800eb67
 800eb04:	0800ebf7 	.word	0x0800ebf7
 800eb08:	0800eab9 	.word	0x0800eab9
 800eb0c:	0800eab9 	.word	0x0800eab9
 800eb10:	0800ec5f 	.word	0x0800ec5f
 800eb14:	0800eab9 	.word	0x0800eab9
 800eb18:	0800eb67 	.word	0x0800eb67
 800eb1c:	0800eab9 	.word	0x0800eab9
 800eb20:	0800eab9 	.word	0x0800eab9
 800eb24:	0800ebff 	.word	0x0800ebff
 800eb28:	6833      	ldr	r3, [r6, #0]
 800eb2a:	1d1a      	adds	r2, r3, #4
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	6032      	str	r2, [r6, #0]
 800eb30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eb38:	2301      	movs	r3, #1
 800eb3a:	e09d      	b.n	800ec78 <_printf_i+0x1e8>
 800eb3c:	6833      	ldr	r3, [r6, #0]
 800eb3e:	6820      	ldr	r0, [r4, #0]
 800eb40:	1d19      	adds	r1, r3, #4
 800eb42:	6031      	str	r1, [r6, #0]
 800eb44:	0606      	lsls	r6, r0, #24
 800eb46:	d501      	bpl.n	800eb4c <_printf_i+0xbc>
 800eb48:	681d      	ldr	r5, [r3, #0]
 800eb4a:	e003      	b.n	800eb54 <_printf_i+0xc4>
 800eb4c:	0645      	lsls	r5, r0, #25
 800eb4e:	d5fb      	bpl.n	800eb48 <_printf_i+0xb8>
 800eb50:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eb54:	2d00      	cmp	r5, #0
 800eb56:	da03      	bge.n	800eb60 <_printf_i+0xd0>
 800eb58:	232d      	movs	r3, #45	@ 0x2d
 800eb5a:	426d      	negs	r5, r5
 800eb5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb60:	4859      	ldr	r0, [pc, #356]	@ (800ecc8 <_printf_i+0x238>)
 800eb62:	230a      	movs	r3, #10
 800eb64:	e011      	b.n	800eb8a <_printf_i+0xfa>
 800eb66:	6821      	ldr	r1, [r4, #0]
 800eb68:	6833      	ldr	r3, [r6, #0]
 800eb6a:	0608      	lsls	r0, r1, #24
 800eb6c:	f853 5b04 	ldr.w	r5, [r3], #4
 800eb70:	d402      	bmi.n	800eb78 <_printf_i+0xe8>
 800eb72:	0649      	lsls	r1, r1, #25
 800eb74:	bf48      	it	mi
 800eb76:	b2ad      	uxthmi	r5, r5
 800eb78:	2f6f      	cmp	r7, #111	@ 0x6f
 800eb7a:	4853      	ldr	r0, [pc, #332]	@ (800ecc8 <_printf_i+0x238>)
 800eb7c:	6033      	str	r3, [r6, #0]
 800eb7e:	bf14      	ite	ne
 800eb80:	230a      	movne	r3, #10
 800eb82:	2308      	moveq	r3, #8
 800eb84:	2100      	movs	r1, #0
 800eb86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eb8a:	6866      	ldr	r6, [r4, #4]
 800eb8c:	60a6      	str	r6, [r4, #8]
 800eb8e:	2e00      	cmp	r6, #0
 800eb90:	bfa2      	ittt	ge
 800eb92:	6821      	ldrge	r1, [r4, #0]
 800eb94:	f021 0104 	bicge.w	r1, r1, #4
 800eb98:	6021      	strge	r1, [r4, #0]
 800eb9a:	b90d      	cbnz	r5, 800eba0 <_printf_i+0x110>
 800eb9c:	2e00      	cmp	r6, #0
 800eb9e:	d04b      	beq.n	800ec38 <_printf_i+0x1a8>
 800eba0:	4616      	mov	r6, r2
 800eba2:	fbb5 f1f3 	udiv	r1, r5, r3
 800eba6:	fb03 5711 	mls	r7, r3, r1, r5
 800ebaa:	5dc7      	ldrb	r7, [r0, r7]
 800ebac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ebb0:	462f      	mov	r7, r5
 800ebb2:	42bb      	cmp	r3, r7
 800ebb4:	460d      	mov	r5, r1
 800ebb6:	d9f4      	bls.n	800eba2 <_printf_i+0x112>
 800ebb8:	2b08      	cmp	r3, #8
 800ebba:	d10b      	bne.n	800ebd4 <_printf_i+0x144>
 800ebbc:	6823      	ldr	r3, [r4, #0]
 800ebbe:	07df      	lsls	r7, r3, #31
 800ebc0:	d508      	bpl.n	800ebd4 <_printf_i+0x144>
 800ebc2:	6923      	ldr	r3, [r4, #16]
 800ebc4:	6861      	ldr	r1, [r4, #4]
 800ebc6:	4299      	cmp	r1, r3
 800ebc8:	bfde      	ittt	le
 800ebca:	2330      	movle	r3, #48	@ 0x30
 800ebcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ebd0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ebd4:	1b92      	subs	r2, r2, r6
 800ebd6:	6122      	str	r2, [r4, #16]
 800ebd8:	f8cd a000 	str.w	sl, [sp]
 800ebdc:	464b      	mov	r3, r9
 800ebde:	aa03      	add	r2, sp, #12
 800ebe0:	4621      	mov	r1, r4
 800ebe2:	4640      	mov	r0, r8
 800ebe4:	f7ff fee6 	bl	800e9b4 <_printf_common>
 800ebe8:	3001      	adds	r0, #1
 800ebea:	d14a      	bne.n	800ec82 <_printf_i+0x1f2>
 800ebec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ebf0:	b004      	add	sp, #16
 800ebf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebf6:	6823      	ldr	r3, [r4, #0]
 800ebf8:	f043 0320 	orr.w	r3, r3, #32
 800ebfc:	6023      	str	r3, [r4, #0]
 800ebfe:	4833      	ldr	r0, [pc, #204]	@ (800eccc <_printf_i+0x23c>)
 800ec00:	2778      	movs	r7, #120	@ 0x78
 800ec02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ec06:	6823      	ldr	r3, [r4, #0]
 800ec08:	6831      	ldr	r1, [r6, #0]
 800ec0a:	061f      	lsls	r7, r3, #24
 800ec0c:	f851 5b04 	ldr.w	r5, [r1], #4
 800ec10:	d402      	bmi.n	800ec18 <_printf_i+0x188>
 800ec12:	065f      	lsls	r7, r3, #25
 800ec14:	bf48      	it	mi
 800ec16:	b2ad      	uxthmi	r5, r5
 800ec18:	6031      	str	r1, [r6, #0]
 800ec1a:	07d9      	lsls	r1, r3, #31
 800ec1c:	bf44      	itt	mi
 800ec1e:	f043 0320 	orrmi.w	r3, r3, #32
 800ec22:	6023      	strmi	r3, [r4, #0]
 800ec24:	b11d      	cbz	r5, 800ec2e <_printf_i+0x19e>
 800ec26:	2310      	movs	r3, #16
 800ec28:	e7ac      	b.n	800eb84 <_printf_i+0xf4>
 800ec2a:	4827      	ldr	r0, [pc, #156]	@ (800ecc8 <_printf_i+0x238>)
 800ec2c:	e7e9      	b.n	800ec02 <_printf_i+0x172>
 800ec2e:	6823      	ldr	r3, [r4, #0]
 800ec30:	f023 0320 	bic.w	r3, r3, #32
 800ec34:	6023      	str	r3, [r4, #0]
 800ec36:	e7f6      	b.n	800ec26 <_printf_i+0x196>
 800ec38:	4616      	mov	r6, r2
 800ec3a:	e7bd      	b.n	800ebb8 <_printf_i+0x128>
 800ec3c:	6833      	ldr	r3, [r6, #0]
 800ec3e:	6825      	ldr	r5, [r4, #0]
 800ec40:	6961      	ldr	r1, [r4, #20]
 800ec42:	1d18      	adds	r0, r3, #4
 800ec44:	6030      	str	r0, [r6, #0]
 800ec46:	062e      	lsls	r6, r5, #24
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	d501      	bpl.n	800ec50 <_printf_i+0x1c0>
 800ec4c:	6019      	str	r1, [r3, #0]
 800ec4e:	e002      	b.n	800ec56 <_printf_i+0x1c6>
 800ec50:	0668      	lsls	r0, r5, #25
 800ec52:	d5fb      	bpl.n	800ec4c <_printf_i+0x1bc>
 800ec54:	8019      	strh	r1, [r3, #0]
 800ec56:	2300      	movs	r3, #0
 800ec58:	6123      	str	r3, [r4, #16]
 800ec5a:	4616      	mov	r6, r2
 800ec5c:	e7bc      	b.n	800ebd8 <_printf_i+0x148>
 800ec5e:	6833      	ldr	r3, [r6, #0]
 800ec60:	1d1a      	adds	r2, r3, #4
 800ec62:	6032      	str	r2, [r6, #0]
 800ec64:	681e      	ldr	r6, [r3, #0]
 800ec66:	6862      	ldr	r2, [r4, #4]
 800ec68:	2100      	movs	r1, #0
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	f7f1 fac8 	bl	8000200 <memchr>
 800ec70:	b108      	cbz	r0, 800ec76 <_printf_i+0x1e6>
 800ec72:	1b80      	subs	r0, r0, r6
 800ec74:	6060      	str	r0, [r4, #4]
 800ec76:	6863      	ldr	r3, [r4, #4]
 800ec78:	6123      	str	r3, [r4, #16]
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec80:	e7aa      	b.n	800ebd8 <_printf_i+0x148>
 800ec82:	6923      	ldr	r3, [r4, #16]
 800ec84:	4632      	mov	r2, r6
 800ec86:	4649      	mov	r1, r9
 800ec88:	4640      	mov	r0, r8
 800ec8a:	47d0      	blx	sl
 800ec8c:	3001      	adds	r0, #1
 800ec8e:	d0ad      	beq.n	800ebec <_printf_i+0x15c>
 800ec90:	6823      	ldr	r3, [r4, #0]
 800ec92:	079b      	lsls	r3, r3, #30
 800ec94:	d413      	bmi.n	800ecbe <_printf_i+0x22e>
 800ec96:	68e0      	ldr	r0, [r4, #12]
 800ec98:	9b03      	ldr	r3, [sp, #12]
 800ec9a:	4298      	cmp	r0, r3
 800ec9c:	bfb8      	it	lt
 800ec9e:	4618      	movlt	r0, r3
 800eca0:	e7a6      	b.n	800ebf0 <_printf_i+0x160>
 800eca2:	2301      	movs	r3, #1
 800eca4:	4632      	mov	r2, r6
 800eca6:	4649      	mov	r1, r9
 800eca8:	4640      	mov	r0, r8
 800ecaa:	47d0      	blx	sl
 800ecac:	3001      	adds	r0, #1
 800ecae:	d09d      	beq.n	800ebec <_printf_i+0x15c>
 800ecb0:	3501      	adds	r5, #1
 800ecb2:	68e3      	ldr	r3, [r4, #12]
 800ecb4:	9903      	ldr	r1, [sp, #12]
 800ecb6:	1a5b      	subs	r3, r3, r1
 800ecb8:	42ab      	cmp	r3, r5
 800ecba:	dcf2      	bgt.n	800eca2 <_printf_i+0x212>
 800ecbc:	e7eb      	b.n	800ec96 <_printf_i+0x206>
 800ecbe:	2500      	movs	r5, #0
 800ecc0:	f104 0619 	add.w	r6, r4, #25
 800ecc4:	e7f5      	b.n	800ecb2 <_printf_i+0x222>
 800ecc6:	bf00      	nop
 800ecc8:	080138d9 	.word	0x080138d9
 800eccc:	080138ea 	.word	0x080138ea

0800ecd0 <std>:
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	b510      	push	{r4, lr}
 800ecd4:	4604      	mov	r4, r0
 800ecd6:	e9c0 3300 	strd	r3, r3, [r0]
 800ecda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecde:	6083      	str	r3, [r0, #8]
 800ece0:	8181      	strh	r1, [r0, #12]
 800ece2:	6643      	str	r3, [r0, #100]	@ 0x64
 800ece4:	81c2      	strh	r2, [r0, #14]
 800ece6:	6183      	str	r3, [r0, #24]
 800ece8:	4619      	mov	r1, r3
 800ecea:	2208      	movs	r2, #8
 800ecec:	305c      	adds	r0, #92	@ 0x5c
 800ecee:	f000 fa45 	bl	800f17c <memset>
 800ecf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ed28 <std+0x58>)
 800ecf4:	6263      	str	r3, [r4, #36]	@ 0x24
 800ecf6:	4b0d      	ldr	r3, [pc, #52]	@ (800ed2c <std+0x5c>)
 800ecf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ecfa:	4b0d      	ldr	r3, [pc, #52]	@ (800ed30 <std+0x60>)
 800ecfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ecfe:	4b0d      	ldr	r3, [pc, #52]	@ (800ed34 <std+0x64>)
 800ed00:	6323      	str	r3, [r4, #48]	@ 0x30
 800ed02:	4b0d      	ldr	r3, [pc, #52]	@ (800ed38 <std+0x68>)
 800ed04:	6224      	str	r4, [r4, #32]
 800ed06:	429c      	cmp	r4, r3
 800ed08:	d006      	beq.n	800ed18 <std+0x48>
 800ed0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ed0e:	4294      	cmp	r4, r2
 800ed10:	d002      	beq.n	800ed18 <std+0x48>
 800ed12:	33d0      	adds	r3, #208	@ 0xd0
 800ed14:	429c      	cmp	r4, r3
 800ed16:	d105      	bne.n	800ed24 <std+0x54>
 800ed18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ed1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed20:	f000 bb20 	b.w	800f364 <__retarget_lock_init_recursive>
 800ed24:	bd10      	pop	{r4, pc}
 800ed26:	bf00      	nop
 800ed28:	0800efc9 	.word	0x0800efc9
 800ed2c:	0800efef 	.word	0x0800efef
 800ed30:	0800f027 	.word	0x0800f027
 800ed34:	0800f04b 	.word	0x0800f04b
 800ed38:	2000561c 	.word	0x2000561c

0800ed3c <stdio_exit_handler>:
 800ed3c:	4a02      	ldr	r2, [pc, #8]	@ (800ed48 <stdio_exit_handler+0xc>)
 800ed3e:	4903      	ldr	r1, [pc, #12]	@ (800ed4c <stdio_exit_handler+0x10>)
 800ed40:	4803      	ldr	r0, [pc, #12]	@ (800ed50 <stdio_exit_handler+0x14>)
 800ed42:	f000 b869 	b.w	800ee18 <_fwalk_sglue>
 800ed46:	bf00      	nop
 800ed48:	200000ec 	.word	0x200000ec
 800ed4c:	08011d59 	.word	0x08011d59
 800ed50:	20000268 	.word	0x20000268

0800ed54 <cleanup_stdio>:
 800ed54:	6841      	ldr	r1, [r0, #4]
 800ed56:	4b0c      	ldr	r3, [pc, #48]	@ (800ed88 <cleanup_stdio+0x34>)
 800ed58:	4299      	cmp	r1, r3
 800ed5a:	b510      	push	{r4, lr}
 800ed5c:	4604      	mov	r4, r0
 800ed5e:	d001      	beq.n	800ed64 <cleanup_stdio+0x10>
 800ed60:	f002 fffa 	bl	8011d58 <_fflush_r>
 800ed64:	68a1      	ldr	r1, [r4, #8]
 800ed66:	4b09      	ldr	r3, [pc, #36]	@ (800ed8c <cleanup_stdio+0x38>)
 800ed68:	4299      	cmp	r1, r3
 800ed6a:	d002      	beq.n	800ed72 <cleanup_stdio+0x1e>
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	f002 fff3 	bl	8011d58 <_fflush_r>
 800ed72:	68e1      	ldr	r1, [r4, #12]
 800ed74:	4b06      	ldr	r3, [pc, #24]	@ (800ed90 <cleanup_stdio+0x3c>)
 800ed76:	4299      	cmp	r1, r3
 800ed78:	d004      	beq.n	800ed84 <cleanup_stdio+0x30>
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed80:	f002 bfea 	b.w	8011d58 <_fflush_r>
 800ed84:	bd10      	pop	{r4, pc}
 800ed86:	bf00      	nop
 800ed88:	2000561c 	.word	0x2000561c
 800ed8c:	20005684 	.word	0x20005684
 800ed90:	200056ec 	.word	0x200056ec

0800ed94 <global_stdio_init.part.0>:
 800ed94:	b510      	push	{r4, lr}
 800ed96:	4b0b      	ldr	r3, [pc, #44]	@ (800edc4 <global_stdio_init.part.0+0x30>)
 800ed98:	4c0b      	ldr	r4, [pc, #44]	@ (800edc8 <global_stdio_init.part.0+0x34>)
 800ed9a:	4a0c      	ldr	r2, [pc, #48]	@ (800edcc <global_stdio_init.part.0+0x38>)
 800ed9c:	601a      	str	r2, [r3, #0]
 800ed9e:	4620      	mov	r0, r4
 800eda0:	2200      	movs	r2, #0
 800eda2:	2104      	movs	r1, #4
 800eda4:	f7ff ff94 	bl	800ecd0 <std>
 800eda8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800edac:	2201      	movs	r2, #1
 800edae:	2109      	movs	r1, #9
 800edb0:	f7ff ff8e 	bl	800ecd0 <std>
 800edb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800edb8:	2202      	movs	r2, #2
 800edba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edbe:	2112      	movs	r1, #18
 800edc0:	f7ff bf86 	b.w	800ecd0 <std>
 800edc4:	20005754 	.word	0x20005754
 800edc8:	2000561c 	.word	0x2000561c
 800edcc:	0800ed3d 	.word	0x0800ed3d

0800edd0 <__sfp_lock_acquire>:
 800edd0:	4801      	ldr	r0, [pc, #4]	@ (800edd8 <__sfp_lock_acquire+0x8>)
 800edd2:	f000 bac8 	b.w	800f366 <__retarget_lock_acquire_recursive>
 800edd6:	bf00      	nop
 800edd8:	2000575d 	.word	0x2000575d

0800eddc <__sfp_lock_release>:
 800eddc:	4801      	ldr	r0, [pc, #4]	@ (800ede4 <__sfp_lock_release+0x8>)
 800edde:	f000 bac3 	b.w	800f368 <__retarget_lock_release_recursive>
 800ede2:	bf00      	nop
 800ede4:	2000575d 	.word	0x2000575d

0800ede8 <__sinit>:
 800ede8:	b510      	push	{r4, lr}
 800edea:	4604      	mov	r4, r0
 800edec:	f7ff fff0 	bl	800edd0 <__sfp_lock_acquire>
 800edf0:	6a23      	ldr	r3, [r4, #32]
 800edf2:	b11b      	cbz	r3, 800edfc <__sinit+0x14>
 800edf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edf8:	f7ff bff0 	b.w	800eddc <__sfp_lock_release>
 800edfc:	4b04      	ldr	r3, [pc, #16]	@ (800ee10 <__sinit+0x28>)
 800edfe:	6223      	str	r3, [r4, #32]
 800ee00:	4b04      	ldr	r3, [pc, #16]	@ (800ee14 <__sinit+0x2c>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d1f5      	bne.n	800edf4 <__sinit+0xc>
 800ee08:	f7ff ffc4 	bl	800ed94 <global_stdio_init.part.0>
 800ee0c:	e7f2      	b.n	800edf4 <__sinit+0xc>
 800ee0e:	bf00      	nop
 800ee10:	0800ed55 	.word	0x0800ed55
 800ee14:	20005754 	.word	0x20005754

0800ee18 <_fwalk_sglue>:
 800ee18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee1c:	4607      	mov	r7, r0
 800ee1e:	4688      	mov	r8, r1
 800ee20:	4614      	mov	r4, r2
 800ee22:	2600      	movs	r6, #0
 800ee24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee28:	f1b9 0901 	subs.w	r9, r9, #1
 800ee2c:	d505      	bpl.n	800ee3a <_fwalk_sglue+0x22>
 800ee2e:	6824      	ldr	r4, [r4, #0]
 800ee30:	2c00      	cmp	r4, #0
 800ee32:	d1f7      	bne.n	800ee24 <_fwalk_sglue+0xc>
 800ee34:	4630      	mov	r0, r6
 800ee36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee3a:	89ab      	ldrh	r3, [r5, #12]
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	d907      	bls.n	800ee50 <_fwalk_sglue+0x38>
 800ee40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee44:	3301      	adds	r3, #1
 800ee46:	d003      	beq.n	800ee50 <_fwalk_sglue+0x38>
 800ee48:	4629      	mov	r1, r5
 800ee4a:	4638      	mov	r0, r7
 800ee4c:	47c0      	blx	r8
 800ee4e:	4306      	orrs	r6, r0
 800ee50:	3568      	adds	r5, #104	@ 0x68
 800ee52:	e7e9      	b.n	800ee28 <_fwalk_sglue+0x10>

0800ee54 <iprintf>:
 800ee54:	b40f      	push	{r0, r1, r2, r3}
 800ee56:	b507      	push	{r0, r1, r2, lr}
 800ee58:	4906      	ldr	r1, [pc, #24]	@ (800ee74 <iprintf+0x20>)
 800ee5a:	ab04      	add	r3, sp, #16
 800ee5c:	6808      	ldr	r0, [r1, #0]
 800ee5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee62:	6881      	ldr	r1, [r0, #8]
 800ee64:	9301      	str	r3, [sp, #4]
 800ee66:	f002 fc8d 	bl	8011784 <_vfiprintf_r>
 800ee6a:	b003      	add	sp, #12
 800ee6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee70:	b004      	add	sp, #16
 800ee72:	4770      	bx	lr
 800ee74:	20000264 	.word	0x20000264

0800ee78 <_puts_r>:
 800ee78:	6a03      	ldr	r3, [r0, #32]
 800ee7a:	b570      	push	{r4, r5, r6, lr}
 800ee7c:	6884      	ldr	r4, [r0, #8]
 800ee7e:	4605      	mov	r5, r0
 800ee80:	460e      	mov	r6, r1
 800ee82:	b90b      	cbnz	r3, 800ee88 <_puts_r+0x10>
 800ee84:	f7ff ffb0 	bl	800ede8 <__sinit>
 800ee88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee8a:	07db      	lsls	r3, r3, #31
 800ee8c:	d405      	bmi.n	800ee9a <_puts_r+0x22>
 800ee8e:	89a3      	ldrh	r3, [r4, #12]
 800ee90:	0598      	lsls	r0, r3, #22
 800ee92:	d402      	bmi.n	800ee9a <_puts_r+0x22>
 800ee94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee96:	f000 fa66 	bl	800f366 <__retarget_lock_acquire_recursive>
 800ee9a:	89a3      	ldrh	r3, [r4, #12]
 800ee9c:	0719      	lsls	r1, r3, #28
 800ee9e:	d502      	bpl.n	800eea6 <_puts_r+0x2e>
 800eea0:	6923      	ldr	r3, [r4, #16]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d135      	bne.n	800ef12 <_puts_r+0x9a>
 800eea6:	4621      	mov	r1, r4
 800eea8:	4628      	mov	r0, r5
 800eeaa:	f000 f911 	bl	800f0d0 <__swsetup_r>
 800eeae:	b380      	cbz	r0, 800ef12 <_puts_r+0x9a>
 800eeb0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800eeb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eeb6:	07da      	lsls	r2, r3, #31
 800eeb8:	d405      	bmi.n	800eec6 <_puts_r+0x4e>
 800eeba:	89a3      	ldrh	r3, [r4, #12]
 800eebc:	059b      	lsls	r3, r3, #22
 800eebe:	d402      	bmi.n	800eec6 <_puts_r+0x4e>
 800eec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eec2:	f000 fa51 	bl	800f368 <__retarget_lock_release_recursive>
 800eec6:	4628      	mov	r0, r5
 800eec8:	bd70      	pop	{r4, r5, r6, pc}
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	da04      	bge.n	800eed8 <_puts_r+0x60>
 800eece:	69a2      	ldr	r2, [r4, #24]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	dc17      	bgt.n	800ef04 <_puts_r+0x8c>
 800eed4:	290a      	cmp	r1, #10
 800eed6:	d015      	beq.n	800ef04 <_puts_r+0x8c>
 800eed8:	6823      	ldr	r3, [r4, #0]
 800eeda:	1c5a      	adds	r2, r3, #1
 800eedc:	6022      	str	r2, [r4, #0]
 800eede:	7019      	strb	r1, [r3, #0]
 800eee0:	68a3      	ldr	r3, [r4, #8]
 800eee2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eee6:	3b01      	subs	r3, #1
 800eee8:	60a3      	str	r3, [r4, #8]
 800eeea:	2900      	cmp	r1, #0
 800eeec:	d1ed      	bne.n	800eeca <_puts_r+0x52>
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	da11      	bge.n	800ef16 <_puts_r+0x9e>
 800eef2:	4622      	mov	r2, r4
 800eef4:	210a      	movs	r1, #10
 800eef6:	4628      	mov	r0, r5
 800eef8:	f000 f8ab 	bl	800f052 <__swbuf_r>
 800eefc:	3001      	adds	r0, #1
 800eefe:	d0d7      	beq.n	800eeb0 <_puts_r+0x38>
 800ef00:	250a      	movs	r5, #10
 800ef02:	e7d7      	b.n	800eeb4 <_puts_r+0x3c>
 800ef04:	4622      	mov	r2, r4
 800ef06:	4628      	mov	r0, r5
 800ef08:	f000 f8a3 	bl	800f052 <__swbuf_r>
 800ef0c:	3001      	adds	r0, #1
 800ef0e:	d1e7      	bne.n	800eee0 <_puts_r+0x68>
 800ef10:	e7ce      	b.n	800eeb0 <_puts_r+0x38>
 800ef12:	3e01      	subs	r6, #1
 800ef14:	e7e4      	b.n	800eee0 <_puts_r+0x68>
 800ef16:	6823      	ldr	r3, [r4, #0]
 800ef18:	1c5a      	adds	r2, r3, #1
 800ef1a:	6022      	str	r2, [r4, #0]
 800ef1c:	220a      	movs	r2, #10
 800ef1e:	701a      	strb	r2, [r3, #0]
 800ef20:	e7ee      	b.n	800ef00 <_puts_r+0x88>
	...

0800ef24 <puts>:
 800ef24:	4b02      	ldr	r3, [pc, #8]	@ (800ef30 <puts+0xc>)
 800ef26:	4601      	mov	r1, r0
 800ef28:	6818      	ldr	r0, [r3, #0]
 800ef2a:	f7ff bfa5 	b.w	800ee78 <_puts_r>
 800ef2e:	bf00      	nop
 800ef30:	20000264 	.word	0x20000264

0800ef34 <siprintf>:
 800ef34:	b40e      	push	{r1, r2, r3}
 800ef36:	b500      	push	{lr}
 800ef38:	b09c      	sub	sp, #112	@ 0x70
 800ef3a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ef3c:	9002      	str	r0, [sp, #8]
 800ef3e:	9006      	str	r0, [sp, #24]
 800ef40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ef44:	4809      	ldr	r0, [pc, #36]	@ (800ef6c <siprintf+0x38>)
 800ef46:	9107      	str	r1, [sp, #28]
 800ef48:	9104      	str	r1, [sp, #16]
 800ef4a:	4909      	ldr	r1, [pc, #36]	@ (800ef70 <siprintf+0x3c>)
 800ef4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef50:	9105      	str	r1, [sp, #20]
 800ef52:	6800      	ldr	r0, [r0, #0]
 800ef54:	9301      	str	r3, [sp, #4]
 800ef56:	a902      	add	r1, sp, #8
 800ef58:	f002 f922 	bl	80111a0 <_svfiprintf_r>
 800ef5c:	9b02      	ldr	r3, [sp, #8]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	701a      	strb	r2, [r3, #0]
 800ef62:	b01c      	add	sp, #112	@ 0x70
 800ef64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef68:	b003      	add	sp, #12
 800ef6a:	4770      	bx	lr
 800ef6c:	20000264 	.word	0x20000264
 800ef70:	ffff0208 	.word	0xffff0208

0800ef74 <siscanf>:
 800ef74:	b40e      	push	{r1, r2, r3}
 800ef76:	b530      	push	{r4, r5, lr}
 800ef78:	b09c      	sub	sp, #112	@ 0x70
 800ef7a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ef7c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800ef80:	f854 5b04 	ldr.w	r5, [r4], #4
 800ef84:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ef88:	9002      	str	r0, [sp, #8]
 800ef8a:	9006      	str	r0, [sp, #24]
 800ef8c:	f7f1 f988 	bl	80002a0 <strlen>
 800ef90:	4b0b      	ldr	r3, [pc, #44]	@ (800efc0 <siscanf+0x4c>)
 800ef92:	9003      	str	r0, [sp, #12]
 800ef94:	9007      	str	r0, [sp, #28]
 800ef96:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef98:	480a      	ldr	r0, [pc, #40]	@ (800efc4 <siscanf+0x50>)
 800ef9a:	9401      	str	r4, [sp, #4]
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800efa0:	9314      	str	r3, [sp, #80]	@ 0x50
 800efa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800efa6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800efaa:	462a      	mov	r2, r5
 800efac:	4623      	mov	r3, r4
 800efae:	a902      	add	r1, sp, #8
 800efb0:	6800      	ldr	r0, [r0, #0]
 800efb2:	f002 fa49 	bl	8011448 <__ssvfiscanf_r>
 800efb6:	b01c      	add	sp, #112	@ 0x70
 800efb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efbc:	b003      	add	sp, #12
 800efbe:	4770      	bx	lr
 800efc0:	0800efeb 	.word	0x0800efeb
 800efc4:	20000264 	.word	0x20000264

0800efc8 <__sread>:
 800efc8:	b510      	push	{r4, lr}
 800efca:	460c      	mov	r4, r1
 800efcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efd0:	f000 f96a 	bl	800f2a8 <_read_r>
 800efd4:	2800      	cmp	r0, #0
 800efd6:	bfab      	itete	ge
 800efd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800efda:	89a3      	ldrhlt	r3, [r4, #12]
 800efdc:	181b      	addge	r3, r3, r0
 800efde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800efe2:	bfac      	ite	ge
 800efe4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800efe6:	81a3      	strhlt	r3, [r4, #12]
 800efe8:	bd10      	pop	{r4, pc}

0800efea <__seofread>:
 800efea:	2000      	movs	r0, #0
 800efec:	4770      	bx	lr

0800efee <__swrite>:
 800efee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff2:	461f      	mov	r7, r3
 800eff4:	898b      	ldrh	r3, [r1, #12]
 800eff6:	05db      	lsls	r3, r3, #23
 800eff8:	4605      	mov	r5, r0
 800effa:	460c      	mov	r4, r1
 800effc:	4616      	mov	r6, r2
 800effe:	d505      	bpl.n	800f00c <__swrite+0x1e>
 800f000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f004:	2302      	movs	r3, #2
 800f006:	2200      	movs	r2, #0
 800f008:	f000 f93c 	bl	800f284 <_lseek_r>
 800f00c:	89a3      	ldrh	r3, [r4, #12]
 800f00e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f012:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f016:	81a3      	strh	r3, [r4, #12]
 800f018:	4632      	mov	r2, r6
 800f01a:	463b      	mov	r3, r7
 800f01c:	4628      	mov	r0, r5
 800f01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f022:	f000 b963 	b.w	800f2ec <_write_r>

0800f026 <__sseek>:
 800f026:	b510      	push	{r4, lr}
 800f028:	460c      	mov	r4, r1
 800f02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f02e:	f000 f929 	bl	800f284 <_lseek_r>
 800f032:	1c43      	adds	r3, r0, #1
 800f034:	89a3      	ldrh	r3, [r4, #12]
 800f036:	bf15      	itete	ne
 800f038:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f03a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f03e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f042:	81a3      	strheq	r3, [r4, #12]
 800f044:	bf18      	it	ne
 800f046:	81a3      	strhne	r3, [r4, #12]
 800f048:	bd10      	pop	{r4, pc}

0800f04a <__sclose>:
 800f04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f04e:	f000 b8b3 	b.w	800f1b8 <_close_r>

0800f052 <__swbuf_r>:
 800f052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f054:	460e      	mov	r6, r1
 800f056:	4614      	mov	r4, r2
 800f058:	4605      	mov	r5, r0
 800f05a:	b118      	cbz	r0, 800f064 <__swbuf_r+0x12>
 800f05c:	6a03      	ldr	r3, [r0, #32]
 800f05e:	b90b      	cbnz	r3, 800f064 <__swbuf_r+0x12>
 800f060:	f7ff fec2 	bl	800ede8 <__sinit>
 800f064:	69a3      	ldr	r3, [r4, #24]
 800f066:	60a3      	str	r3, [r4, #8]
 800f068:	89a3      	ldrh	r3, [r4, #12]
 800f06a:	071a      	lsls	r2, r3, #28
 800f06c:	d501      	bpl.n	800f072 <__swbuf_r+0x20>
 800f06e:	6923      	ldr	r3, [r4, #16]
 800f070:	b943      	cbnz	r3, 800f084 <__swbuf_r+0x32>
 800f072:	4621      	mov	r1, r4
 800f074:	4628      	mov	r0, r5
 800f076:	f000 f82b 	bl	800f0d0 <__swsetup_r>
 800f07a:	b118      	cbz	r0, 800f084 <__swbuf_r+0x32>
 800f07c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f080:	4638      	mov	r0, r7
 800f082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f084:	6823      	ldr	r3, [r4, #0]
 800f086:	6922      	ldr	r2, [r4, #16]
 800f088:	1a98      	subs	r0, r3, r2
 800f08a:	6963      	ldr	r3, [r4, #20]
 800f08c:	b2f6      	uxtb	r6, r6
 800f08e:	4283      	cmp	r3, r0
 800f090:	4637      	mov	r7, r6
 800f092:	dc05      	bgt.n	800f0a0 <__swbuf_r+0x4e>
 800f094:	4621      	mov	r1, r4
 800f096:	4628      	mov	r0, r5
 800f098:	f002 fe5e 	bl	8011d58 <_fflush_r>
 800f09c:	2800      	cmp	r0, #0
 800f09e:	d1ed      	bne.n	800f07c <__swbuf_r+0x2a>
 800f0a0:	68a3      	ldr	r3, [r4, #8]
 800f0a2:	3b01      	subs	r3, #1
 800f0a4:	60a3      	str	r3, [r4, #8]
 800f0a6:	6823      	ldr	r3, [r4, #0]
 800f0a8:	1c5a      	adds	r2, r3, #1
 800f0aa:	6022      	str	r2, [r4, #0]
 800f0ac:	701e      	strb	r6, [r3, #0]
 800f0ae:	6962      	ldr	r2, [r4, #20]
 800f0b0:	1c43      	adds	r3, r0, #1
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d004      	beq.n	800f0c0 <__swbuf_r+0x6e>
 800f0b6:	89a3      	ldrh	r3, [r4, #12]
 800f0b8:	07db      	lsls	r3, r3, #31
 800f0ba:	d5e1      	bpl.n	800f080 <__swbuf_r+0x2e>
 800f0bc:	2e0a      	cmp	r6, #10
 800f0be:	d1df      	bne.n	800f080 <__swbuf_r+0x2e>
 800f0c0:	4621      	mov	r1, r4
 800f0c2:	4628      	mov	r0, r5
 800f0c4:	f002 fe48 	bl	8011d58 <_fflush_r>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	d0d9      	beq.n	800f080 <__swbuf_r+0x2e>
 800f0cc:	e7d6      	b.n	800f07c <__swbuf_r+0x2a>
	...

0800f0d0 <__swsetup_r>:
 800f0d0:	b538      	push	{r3, r4, r5, lr}
 800f0d2:	4b29      	ldr	r3, [pc, #164]	@ (800f178 <__swsetup_r+0xa8>)
 800f0d4:	4605      	mov	r5, r0
 800f0d6:	6818      	ldr	r0, [r3, #0]
 800f0d8:	460c      	mov	r4, r1
 800f0da:	b118      	cbz	r0, 800f0e4 <__swsetup_r+0x14>
 800f0dc:	6a03      	ldr	r3, [r0, #32]
 800f0de:	b90b      	cbnz	r3, 800f0e4 <__swsetup_r+0x14>
 800f0e0:	f7ff fe82 	bl	800ede8 <__sinit>
 800f0e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0e8:	0719      	lsls	r1, r3, #28
 800f0ea:	d422      	bmi.n	800f132 <__swsetup_r+0x62>
 800f0ec:	06da      	lsls	r2, r3, #27
 800f0ee:	d407      	bmi.n	800f100 <__swsetup_r+0x30>
 800f0f0:	2209      	movs	r2, #9
 800f0f2:	602a      	str	r2, [r5, #0]
 800f0f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0f8:	81a3      	strh	r3, [r4, #12]
 800f0fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f0fe:	e033      	b.n	800f168 <__swsetup_r+0x98>
 800f100:	0758      	lsls	r0, r3, #29
 800f102:	d512      	bpl.n	800f12a <__swsetup_r+0x5a>
 800f104:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f106:	b141      	cbz	r1, 800f11a <__swsetup_r+0x4a>
 800f108:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f10c:	4299      	cmp	r1, r3
 800f10e:	d002      	beq.n	800f116 <__swsetup_r+0x46>
 800f110:	4628      	mov	r0, r5
 800f112:	f000 ff8d 	bl	8010030 <_free_r>
 800f116:	2300      	movs	r3, #0
 800f118:	6363      	str	r3, [r4, #52]	@ 0x34
 800f11a:	89a3      	ldrh	r3, [r4, #12]
 800f11c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f120:	81a3      	strh	r3, [r4, #12]
 800f122:	2300      	movs	r3, #0
 800f124:	6063      	str	r3, [r4, #4]
 800f126:	6923      	ldr	r3, [r4, #16]
 800f128:	6023      	str	r3, [r4, #0]
 800f12a:	89a3      	ldrh	r3, [r4, #12]
 800f12c:	f043 0308 	orr.w	r3, r3, #8
 800f130:	81a3      	strh	r3, [r4, #12]
 800f132:	6923      	ldr	r3, [r4, #16]
 800f134:	b94b      	cbnz	r3, 800f14a <__swsetup_r+0x7a>
 800f136:	89a3      	ldrh	r3, [r4, #12]
 800f138:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f13c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f140:	d003      	beq.n	800f14a <__swsetup_r+0x7a>
 800f142:	4621      	mov	r1, r4
 800f144:	4628      	mov	r0, r5
 800f146:	f002 fe55 	bl	8011df4 <__smakebuf_r>
 800f14a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f14e:	f013 0201 	ands.w	r2, r3, #1
 800f152:	d00a      	beq.n	800f16a <__swsetup_r+0x9a>
 800f154:	2200      	movs	r2, #0
 800f156:	60a2      	str	r2, [r4, #8]
 800f158:	6962      	ldr	r2, [r4, #20]
 800f15a:	4252      	negs	r2, r2
 800f15c:	61a2      	str	r2, [r4, #24]
 800f15e:	6922      	ldr	r2, [r4, #16]
 800f160:	b942      	cbnz	r2, 800f174 <__swsetup_r+0xa4>
 800f162:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f166:	d1c5      	bne.n	800f0f4 <__swsetup_r+0x24>
 800f168:	bd38      	pop	{r3, r4, r5, pc}
 800f16a:	0799      	lsls	r1, r3, #30
 800f16c:	bf58      	it	pl
 800f16e:	6962      	ldrpl	r2, [r4, #20]
 800f170:	60a2      	str	r2, [r4, #8]
 800f172:	e7f4      	b.n	800f15e <__swsetup_r+0x8e>
 800f174:	2000      	movs	r0, #0
 800f176:	e7f7      	b.n	800f168 <__swsetup_r+0x98>
 800f178:	20000264 	.word	0x20000264

0800f17c <memset>:
 800f17c:	4402      	add	r2, r0
 800f17e:	4603      	mov	r3, r0
 800f180:	4293      	cmp	r3, r2
 800f182:	d100      	bne.n	800f186 <memset+0xa>
 800f184:	4770      	bx	lr
 800f186:	f803 1b01 	strb.w	r1, [r3], #1
 800f18a:	e7f9      	b.n	800f180 <memset+0x4>

0800f18c <strncmp>:
 800f18c:	b510      	push	{r4, lr}
 800f18e:	b16a      	cbz	r2, 800f1ac <strncmp+0x20>
 800f190:	3901      	subs	r1, #1
 800f192:	1884      	adds	r4, r0, r2
 800f194:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f198:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d103      	bne.n	800f1a8 <strncmp+0x1c>
 800f1a0:	42a0      	cmp	r0, r4
 800f1a2:	d001      	beq.n	800f1a8 <strncmp+0x1c>
 800f1a4:	2a00      	cmp	r2, #0
 800f1a6:	d1f5      	bne.n	800f194 <strncmp+0x8>
 800f1a8:	1ad0      	subs	r0, r2, r3
 800f1aa:	bd10      	pop	{r4, pc}
 800f1ac:	4610      	mov	r0, r2
 800f1ae:	e7fc      	b.n	800f1aa <strncmp+0x1e>

0800f1b0 <_localeconv_r>:
 800f1b0:	4800      	ldr	r0, [pc, #0]	@ (800f1b4 <_localeconv_r+0x4>)
 800f1b2:	4770      	bx	lr
 800f1b4:	200001e8 	.word	0x200001e8

0800f1b8 <_close_r>:
 800f1b8:	b538      	push	{r3, r4, r5, lr}
 800f1ba:	4d06      	ldr	r5, [pc, #24]	@ (800f1d4 <_close_r+0x1c>)
 800f1bc:	2300      	movs	r3, #0
 800f1be:	4604      	mov	r4, r0
 800f1c0:	4608      	mov	r0, r1
 800f1c2:	602b      	str	r3, [r5, #0]
 800f1c4:	f7f3 fa7a 	bl	80026bc <_close>
 800f1c8:	1c43      	adds	r3, r0, #1
 800f1ca:	d102      	bne.n	800f1d2 <_close_r+0x1a>
 800f1cc:	682b      	ldr	r3, [r5, #0]
 800f1ce:	b103      	cbz	r3, 800f1d2 <_close_r+0x1a>
 800f1d0:	6023      	str	r3, [r4, #0]
 800f1d2:	bd38      	pop	{r3, r4, r5, pc}
 800f1d4:	20005758 	.word	0x20005758

0800f1d8 <_reclaim_reent>:
 800f1d8:	4b29      	ldr	r3, [pc, #164]	@ (800f280 <_reclaim_reent+0xa8>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	4283      	cmp	r3, r0
 800f1de:	b570      	push	{r4, r5, r6, lr}
 800f1e0:	4604      	mov	r4, r0
 800f1e2:	d04b      	beq.n	800f27c <_reclaim_reent+0xa4>
 800f1e4:	69c3      	ldr	r3, [r0, #28]
 800f1e6:	b1ab      	cbz	r3, 800f214 <_reclaim_reent+0x3c>
 800f1e8:	68db      	ldr	r3, [r3, #12]
 800f1ea:	b16b      	cbz	r3, 800f208 <_reclaim_reent+0x30>
 800f1ec:	2500      	movs	r5, #0
 800f1ee:	69e3      	ldr	r3, [r4, #28]
 800f1f0:	68db      	ldr	r3, [r3, #12]
 800f1f2:	5959      	ldr	r1, [r3, r5]
 800f1f4:	2900      	cmp	r1, #0
 800f1f6:	d13b      	bne.n	800f270 <_reclaim_reent+0x98>
 800f1f8:	3504      	adds	r5, #4
 800f1fa:	2d80      	cmp	r5, #128	@ 0x80
 800f1fc:	d1f7      	bne.n	800f1ee <_reclaim_reent+0x16>
 800f1fe:	69e3      	ldr	r3, [r4, #28]
 800f200:	4620      	mov	r0, r4
 800f202:	68d9      	ldr	r1, [r3, #12]
 800f204:	f000 ff14 	bl	8010030 <_free_r>
 800f208:	69e3      	ldr	r3, [r4, #28]
 800f20a:	6819      	ldr	r1, [r3, #0]
 800f20c:	b111      	cbz	r1, 800f214 <_reclaim_reent+0x3c>
 800f20e:	4620      	mov	r0, r4
 800f210:	f000 ff0e 	bl	8010030 <_free_r>
 800f214:	6961      	ldr	r1, [r4, #20]
 800f216:	b111      	cbz	r1, 800f21e <_reclaim_reent+0x46>
 800f218:	4620      	mov	r0, r4
 800f21a:	f000 ff09 	bl	8010030 <_free_r>
 800f21e:	69e1      	ldr	r1, [r4, #28]
 800f220:	b111      	cbz	r1, 800f228 <_reclaim_reent+0x50>
 800f222:	4620      	mov	r0, r4
 800f224:	f000 ff04 	bl	8010030 <_free_r>
 800f228:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f22a:	b111      	cbz	r1, 800f232 <_reclaim_reent+0x5a>
 800f22c:	4620      	mov	r0, r4
 800f22e:	f000 feff 	bl	8010030 <_free_r>
 800f232:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f234:	b111      	cbz	r1, 800f23c <_reclaim_reent+0x64>
 800f236:	4620      	mov	r0, r4
 800f238:	f000 fefa 	bl	8010030 <_free_r>
 800f23c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f23e:	b111      	cbz	r1, 800f246 <_reclaim_reent+0x6e>
 800f240:	4620      	mov	r0, r4
 800f242:	f000 fef5 	bl	8010030 <_free_r>
 800f246:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f248:	b111      	cbz	r1, 800f250 <_reclaim_reent+0x78>
 800f24a:	4620      	mov	r0, r4
 800f24c:	f000 fef0 	bl	8010030 <_free_r>
 800f250:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f252:	b111      	cbz	r1, 800f25a <_reclaim_reent+0x82>
 800f254:	4620      	mov	r0, r4
 800f256:	f000 feeb 	bl	8010030 <_free_r>
 800f25a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f25c:	b111      	cbz	r1, 800f264 <_reclaim_reent+0x8c>
 800f25e:	4620      	mov	r0, r4
 800f260:	f000 fee6 	bl	8010030 <_free_r>
 800f264:	6a23      	ldr	r3, [r4, #32]
 800f266:	b14b      	cbz	r3, 800f27c <_reclaim_reent+0xa4>
 800f268:	4620      	mov	r0, r4
 800f26a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f26e:	4718      	bx	r3
 800f270:	680e      	ldr	r6, [r1, #0]
 800f272:	4620      	mov	r0, r4
 800f274:	f000 fedc 	bl	8010030 <_free_r>
 800f278:	4631      	mov	r1, r6
 800f27a:	e7bb      	b.n	800f1f4 <_reclaim_reent+0x1c>
 800f27c:	bd70      	pop	{r4, r5, r6, pc}
 800f27e:	bf00      	nop
 800f280:	20000264 	.word	0x20000264

0800f284 <_lseek_r>:
 800f284:	b538      	push	{r3, r4, r5, lr}
 800f286:	4d07      	ldr	r5, [pc, #28]	@ (800f2a4 <_lseek_r+0x20>)
 800f288:	4604      	mov	r4, r0
 800f28a:	4608      	mov	r0, r1
 800f28c:	4611      	mov	r1, r2
 800f28e:	2200      	movs	r2, #0
 800f290:	602a      	str	r2, [r5, #0]
 800f292:	461a      	mov	r2, r3
 800f294:	f7f3 fa39 	bl	800270a <_lseek>
 800f298:	1c43      	adds	r3, r0, #1
 800f29a:	d102      	bne.n	800f2a2 <_lseek_r+0x1e>
 800f29c:	682b      	ldr	r3, [r5, #0]
 800f29e:	b103      	cbz	r3, 800f2a2 <_lseek_r+0x1e>
 800f2a0:	6023      	str	r3, [r4, #0]
 800f2a2:	bd38      	pop	{r3, r4, r5, pc}
 800f2a4:	20005758 	.word	0x20005758

0800f2a8 <_read_r>:
 800f2a8:	b538      	push	{r3, r4, r5, lr}
 800f2aa:	4d07      	ldr	r5, [pc, #28]	@ (800f2c8 <_read_r+0x20>)
 800f2ac:	4604      	mov	r4, r0
 800f2ae:	4608      	mov	r0, r1
 800f2b0:	4611      	mov	r1, r2
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	602a      	str	r2, [r5, #0]
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	f7f3 f9e3 	bl	8002682 <_read>
 800f2bc:	1c43      	adds	r3, r0, #1
 800f2be:	d102      	bne.n	800f2c6 <_read_r+0x1e>
 800f2c0:	682b      	ldr	r3, [r5, #0]
 800f2c2:	b103      	cbz	r3, 800f2c6 <_read_r+0x1e>
 800f2c4:	6023      	str	r3, [r4, #0]
 800f2c6:	bd38      	pop	{r3, r4, r5, pc}
 800f2c8:	20005758 	.word	0x20005758

0800f2cc <_sbrk_r>:
 800f2cc:	b538      	push	{r3, r4, r5, lr}
 800f2ce:	4d06      	ldr	r5, [pc, #24]	@ (800f2e8 <_sbrk_r+0x1c>)
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	4608      	mov	r0, r1
 800f2d6:	602b      	str	r3, [r5, #0]
 800f2d8:	f7f3 fa24 	bl	8002724 <_sbrk>
 800f2dc:	1c43      	adds	r3, r0, #1
 800f2de:	d102      	bne.n	800f2e6 <_sbrk_r+0x1a>
 800f2e0:	682b      	ldr	r3, [r5, #0]
 800f2e2:	b103      	cbz	r3, 800f2e6 <_sbrk_r+0x1a>
 800f2e4:	6023      	str	r3, [r4, #0]
 800f2e6:	bd38      	pop	{r3, r4, r5, pc}
 800f2e8:	20005758 	.word	0x20005758

0800f2ec <_write_r>:
 800f2ec:	b538      	push	{r3, r4, r5, lr}
 800f2ee:	4d07      	ldr	r5, [pc, #28]	@ (800f30c <_write_r+0x20>)
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	4608      	mov	r0, r1
 800f2f4:	4611      	mov	r1, r2
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	602a      	str	r2, [r5, #0]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	f7f2 fb76 	bl	80019ec <_write>
 800f300:	1c43      	adds	r3, r0, #1
 800f302:	d102      	bne.n	800f30a <_write_r+0x1e>
 800f304:	682b      	ldr	r3, [r5, #0]
 800f306:	b103      	cbz	r3, 800f30a <_write_r+0x1e>
 800f308:	6023      	str	r3, [r4, #0]
 800f30a:	bd38      	pop	{r3, r4, r5, pc}
 800f30c:	20005758 	.word	0x20005758

0800f310 <__errno>:
 800f310:	4b01      	ldr	r3, [pc, #4]	@ (800f318 <__errno+0x8>)
 800f312:	6818      	ldr	r0, [r3, #0]
 800f314:	4770      	bx	lr
 800f316:	bf00      	nop
 800f318:	20000264 	.word	0x20000264

0800f31c <__libc_init_array>:
 800f31c:	b570      	push	{r4, r5, r6, lr}
 800f31e:	4d0d      	ldr	r5, [pc, #52]	@ (800f354 <__libc_init_array+0x38>)
 800f320:	4c0d      	ldr	r4, [pc, #52]	@ (800f358 <__libc_init_array+0x3c>)
 800f322:	1b64      	subs	r4, r4, r5
 800f324:	10a4      	asrs	r4, r4, #2
 800f326:	2600      	movs	r6, #0
 800f328:	42a6      	cmp	r6, r4
 800f32a:	d109      	bne.n	800f340 <__libc_init_array+0x24>
 800f32c:	4d0b      	ldr	r5, [pc, #44]	@ (800f35c <__libc_init_array+0x40>)
 800f32e:	4c0c      	ldr	r4, [pc, #48]	@ (800f360 <__libc_init_array+0x44>)
 800f330:	f004 f8a6 	bl	8013480 <_init>
 800f334:	1b64      	subs	r4, r4, r5
 800f336:	10a4      	asrs	r4, r4, #2
 800f338:	2600      	movs	r6, #0
 800f33a:	42a6      	cmp	r6, r4
 800f33c:	d105      	bne.n	800f34a <__libc_init_array+0x2e>
 800f33e:	bd70      	pop	{r4, r5, r6, pc}
 800f340:	f855 3b04 	ldr.w	r3, [r5], #4
 800f344:	4798      	blx	r3
 800f346:	3601      	adds	r6, #1
 800f348:	e7ee      	b.n	800f328 <__libc_init_array+0xc>
 800f34a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f34e:	4798      	blx	r3
 800f350:	3601      	adds	r6, #1
 800f352:	e7f2      	b.n	800f33a <__libc_init_array+0x1e>
 800f354:	08013d90 	.word	0x08013d90
 800f358:	08013d90 	.word	0x08013d90
 800f35c:	08013d90 	.word	0x08013d90
 800f360:	08013d94 	.word	0x08013d94

0800f364 <__retarget_lock_init_recursive>:
 800f364:	4770      	bx	lr

0800f366 <__retarget_lock_acquire_recursive>:
 800f366:	4770      	bx	lr

0800f368 <__retarget_lock_release_recursive>:
 800f368:	4770      	bx	lr

0800f36a <memcpy>:
 800f36a:	440a      	add	r2, r1
 800f36c:	4291      	cmp	r1, r2
 800f36e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f372:	d100      	bne.n	800f376 <memcpy+0xc>
 800f374:	4770      	bx	lr
 800f376:	b510      	push	{r4, lr}
 800f378:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f37c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f380:	4291      	cmp	r1, r2
 800f382:	d1f9      	bne.n	800f378 <memcpy+0xe>
 800f384:	bd10      	pop	{r4, pc}
	...

0800f388 <nan>:
 800f388:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f390 <nan+0x8>
 800f38c:	4770      	bx	lr
 800f38e:	bf00      	nop
 800f390:	00000000 	.word	0x00000000
 800f394:	7ff80000 	.word	0x7ff80000

0800f398 <quorem>:
 800f398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39c:	6903      	ldr	r3, [r0, #16]
 800f39e:	690c      	ldr	r4, [r1, #16]
 800f3a0:	42a3      	cmp	r3, r4
 800f3a2:	4607      	mov	r7, r0
 800f3a4:	db7e      	blt.n	800f4a4 <quorem+0x10c>
 800f3a6:	3c01      	subs	r4, #1
 800f3a8:	f101 0814 	add.w	r8, r1, #20
 800f3ac:	00a3      	lsls	r3, r4, #2
 800f3ae:	f100 0514 	add.w	r5, r0, #20
 800f3b2:	9300      	str	r3, [sp, #0]
 800f3b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f3b8:	9301      	str	r3, [sp, #4]
 800f3ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f3be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f3ca:	fbb2 f6f3 	udiv	r6, r2, r3
 800f3ce:	d32e      	bcc.n	800f42e <quorem+0x96>
 800f3d0:	f04f 0a00 	mov.w	sl, #0
 800f3d4:	46c4      	mov	ip, r8
 800f3d6:	46ae      	mov	lr, r5
 800f3d8:	46d3      	mov	fp, sl
 800f3da:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f3de:	b298      	uxth	r0, r3
 800f3e0:	fb06 a000 	mla	r0, r6, r0, sl
 800f3e4:	0c02      	lsrs	r2, r0, #16
 800f3e6:	0c1b      	lsrs	r3, r3, #16
 800f3e8:	fb06 2303 	mla	r3, r6, r3, r2
 800f3ec:	f8de 2000 	ldr.w	r2, [lr]
 800f3f0:	b280      	uxth	r0, r0
 800f3f2:	b292      	uxth	r2, r2
 800f3f4:	1a12      	subs	r2, r2, r0
 800f3f6:	445a      	add	r2, fp
 800f3f8:	f8de 0000 	ldr.w	r0, [lr]
 800f3fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f400:	b29b      	uxth	r3, r3
 800f402:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f406:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f40a:	b292      	uxth	r2, r2
 800f40c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f410:	45e1      	cmp	r9, ip
 800f412:	f84e 2b04 	str.w	r2, [lr], #4
 800f416:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f41a:	d2de      	bcs.n	800f3da <quorem+0x42>
 800f41c:	9b00      	ldr	r3, [sp, #0]
 800f41e:	58eb      	ldr	r3, [r5, r3]
 800f420:	b92b      	cbnz	r3, 800f42e <quorem+0x96>
 800f422:	9b01      	ldr	r3, [sp, #4]
 800f424:	3b04      	subs	r3, #4
 800f426:	429d      	cmp	r5, r3
 800f428:	461a      	mov	r2, r3
 800f42a:	d32f      	bcc.n	800f48c <quorem+0xf4>
 800f42c:	613c      	str	r4, [r7, #16]
 800f42e:	4638      	mov	r0, r7
 800f430:	f001 fc58 	bl	8010ce4 <__mcmp>
 800f434:	2800      	cmp	r0, #0
 800f436:	db25      	blt.n	800f484 <quorem+0xec>
 800f438:	4629      	mov	r1, r5
 800f43a:	2000      	movs	r0, #0
 800f43c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f440:	f8d1 c000 	ldr.w	ip, [r1]
 800f444:	fa1f fe82 	uxth.w	lr, r2
 800f448:	fa1f f38c 	uxth.w	r3, ip
 800f44c:	eba3 030e 	sub.w	r3, r3, lr
 800f450:	4403      	add	r3, r0
 800f452:	0c12      	lsrs	r2, r2, #16
 800f454:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f458:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f45c:	b29b      	uxth	r3, r3
 800f45e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f462:	45c1      	cmp	r9, r8
 800f464:	f841 3b04 	str.w	r3, [r1], #4
 800f468:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f46c:	d2e6      	bcs.n	800f43c <quorem+0xa4>
 800f46e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f472:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f476:	b922      	cbnz	r2, 800f482 <quorem+0xea>
 800f478:	3b04      	subs	r3, #4
 800f47a:	429d      	cmp	r5, r3
 800f47c:	461a      	mov	r2, r3
 800f47e:	d30b      	bcc.n	800f498 <quorem+0x100>
 800f480:	613c      	str	r4, [r7, #16]
 800f482:	3601      	adds	r6, #1
 800f484:	4630      	mov	r0, r6
 800f486:	b003      	add	sp, #12
 800f488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f48c:	6812      	ldr	r2, [r2, #0]
 800f48e:	3b04      	subs	r3, #4
 800f490:	2a00      	cmp	r2, #0
 800f492:	d1cb      	bne.n	800f42c <quorem+0x94>
 800f494:	3c01      	subs	r4, #1
 800f496:	e7c6      	b.n	800f426 <quorem+0x8e>
 800f498:	6812      	ldr	r2, [r2, #0]
 800f49a:	3b04      	subs	r3, #4
 800f49c:	2a00      	cmp	r2, #0
 800f49e:	d1ef      	bne.n	800f480 <quorem+0xe8>
 800f4a0:	3c01      	subs	r4, #1
 800f4a2:	e7ea      	b.n	800f47a <quorem+0xe2>
 800f4a4:	2000      	movs	r0, #0
 800f4a6:	e7ee      	b.n	800f486 <quorem+0xee>

0800f4a8 <_dtoa_r>:
 800f4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ac:	69c7      	ldr	r7, [r0, #28]
 800f4ae:	b099      	sub	sp, #100	@ 0x64
 800f4b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f4b4:	ec55 4b10 	vmov	r4, r5, d0
 800f4b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f4ba:	9109      	str	r1, [sp, #36]	@ 0x24
 800f4bc:	4683      	mov	fp, r0
 800f4be:	920e      	str	r2, [sp, #56]	@ 0x38
 800f4c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f4c2:	b97f      	cbnz	r7, 800f4e4 <_dtoa_r+0x3c>
 800f4c4:	2010      	movs	r0, #16
 800f4c6:	f7fe f8a7 	bl	800d618 <malloc>
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	f8cb 001c 	str.w	r0, [fp, #28]
 800f4d0:	b920      	cbnz	r0, 800f4dc <_dtoa_r+0x34>
 800f4d2:	4ba7      	ldr	r3, [pc, #668]	@ (800f770 <_dtoa_r+0x2c8>)
 800f4d4:	21ef      	movs	r1, #239	@ 0xef
 800f4d6:	48a7      	ldr	r0, [pc, #668]	@ (800f774 <_dtoa_r+0x2cc>)
 800f4d8:	f002 fd78 	bl	8011fcc <__assert_func>
 800f4dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f4e0:	6007      	str	r7, [r0, #0]
 800f4e2:	60c7      	str	r7, [r0, #12]
 800f4e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f4e8:	6819      	ldr	r1, [r3, #0]
 800f4ea:	b159      	cbz	r1, 800f504 <_dtoa_r+0x5c>
 800f4ec:	685a      	ldr	r2, [r3, #4]
 800f4ee:	604a      	str	r2, [r1, #4]
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	4093      	lsls	r3, r2
 800f4f4:	608b      	str	r3, [r1, #8]
 800f4f6:	4658      	mov	r0, fp
 800f4f8:	f001 f970 	bl	80107dc <_Bfree>
 800f4fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f500:	2200      	movs	r2, #0
 800f502:	601a      	str	r2, [r3, #0]
 800f504:	1e2b      	subs	r3, r5, #0
 800f506:	bfb9      	ittee	lt
 800f508:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f50c:	9303      	strlt	r3, [sp, #12]
 800f50e:	2300      	movge	r3, #0
 800f510:	6033      	strge	r3, [r6, #0]
 800f512:	9f03      	ldr	r7, [sp, #12]
 800f514:	4b98      	ldr	r3, [pc, #608]	@ (800f778 <_dtoa_r+0x2d0>)
 800f516:	bfbc      	itt	lt
 800f518:	2201      	movlt	r2, #1
 800f51a:	6032      	strlt	r2, [r6, #0]
 800f51c:	43bb      	bics	r3, r7
 800f51e:	d112      	bne.n	800f546 <_dtoa_r+0x9e>
 800f520:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f522:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f526:	6013      	str	r3, [r2, #0]
 800f528:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f52c:	4323      	orrs	r3, r4
 800f52e:	f000 854d 	beq.w	800ffcc <_dtoa_r+0xb24>
 800f532:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f534:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f78c <_dtoa_r+0x2e4>
 800f538:	2b00      	cmp	r3, #0
 800f53a:	f000 854f 	beq.w	800ffdc <_dtoa_r+0xb34>
 800f53e:	f10a 0303 	add.w	r3, sl, #3
 800f542:	f000 bd49 	b.w	800ffd8 <_dtoa_r+0xb30>
 800f546:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f54a:	2200      	movs	r2, #0
 800f54c:	ec51 0b17 	vmov	r0, r1, d7
 800f550:	2300      	movs	r3, #0
 800f552:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f556:	f7f1 facf 	bl	8000af8 <__aeabi_dcmpeq>
 800f55a:	4680      	mov	r8, r0
 800f55c:	b158      	cbz	r0, 800f576 <_dtoa_r+0xce>
 800f55e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f560:	2301      	movs	r3, #1
 800f562:	6013      	str	r3, [r2, #0]
 800f564:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f566:	b113      	cbz	r3, 800f56e <_dtoa_r+0xc6>
 800f568:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f56a:	4b84      	ldr	r3, [pc, #528]	@ (800f77c <_dtoa_r+0x2d4>)
 800f56c:	6013      	str	r3, [r2, #0]
 800f56e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f790 <_dtoa_r+0x2e8>
 800f572:	f000 bd33 	b.w	800ffdc <_dtoa_r+0xb34>
 800f576:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f57a:	aa16      	add	r2, sp, #88	@ 0x58
 800f57c:	a917      	add	r1, sp, #92	@ 0x5c
 800f57e:	4658      	mov	r0, fp
 800f580:	f001 fcd0 	bl	8010f24 <__d2b>
 800f584:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f588:	4681      	mov	r9, r0
 800f58a:	2e00      	cmp	r6, #0
 800f58c:	d077      	beq.n	800f67e <_dtoa_r+0x1d6>
 800f58e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f590:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f59c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f5a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f5a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	4b74      	ldr	r3, [pc, #464]	@ (800f780 <_dtoa_r+0x2d8>)
 800f5ae:	f7f0 fe83 	bl	80002b8 <__aeabi_dsub>
 800f5b2:	a369      	add	r3, pc, #420	@ (adr r3, 800f758 <_dtoa_r+0x2b0>)
 800f5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b8:	f7f1 f836 	bl	8000628 <__aeabi_dmul>
 800f5bc:	a368      	add	r3, pc, #416	@ (adr r3, 800f760 <_dtoa_r+0x2b8>)
 800f5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c2:	f7f0 fe7b 	bl	80002bc <__adddf3>
 800f5c6:	4604      	mov	r4, r0
 800f5c8:	4630      	mov	r0, r6
 800f5ca:	460d      	mov	r5, r1
 800f5cc:	f7f0 ffc2 	bl	8000554 <__aeabi_i2d>
 800f5d0:	a365      	add	r3, pc, #404	@ (adr r3, 800f768 <_dtoa_r+0x2c0>)
 800f5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d6:	f7f1 f827 	bl	8000628 <__aeabi_dmul>
 800f5da:	4602      	mov	r2, r0
 800f5dc:	460b      	mov	r3, r1
 800f5de:	4620      	mov	r0, r4
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	f7f0 fe6b 	bl	80002bc <__adddf3>
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	460d      	mov	r5, r1
 800f5ea:	f7f1 facd 	bl	8000b88 <__aeabi_d2iz>
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	4607      	mov	r7, r0
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	4629      	mov	r1, r5
 800f5f8:	f7f1 fa88 	bl	8000b0c <__aeabi_dcmplt>
 800f5fc:	b140      	cbz	r0, 800f610 <_dtoa_r+0x168>
 800f5fe:	4638      	mov	r0, r7
 800f600:	f7f0 ffa8 	bl	8000554 <__aeabi_i2d>
 800f604:	4622      	mov	r2, r4
 800f606:	462b      	mov	r3, r5
 800f608:	f7f1 fa76 	bl	8000af8 <__aeabi_dcmpeq>
 800f60c:	b900      	cbnz	r0, 800f610 <_dtoa_r+0x168>
 800f60e:	3f01      	subs	r7, #1
 800f610:	2f16      	cmp	r7, #22
 800f612:	d851      	bhi.n	800f6b8 <_dtoa_r+0x210>
 800f614:	4b5b      	ldr	r3, [pc, #364]	@ (800f784 <_dtoa_r+0x2dc>)
 800f616:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f622:	f7f1 fa73 	bl	8000b0c <__aeabi_dcmplt>
 800f626:	2800      	cmp	r0, #0
 800f628:	d048      	beq.n	800f6bc <_dtoa_r+0x214>
 800f62a:	3f01      	subs	r7, #1
 800f62c:	2300      	movs	r3, #0
 800f62e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f630:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f632:	1b9b      	subs	r3, r3, r6
 800f634:	1e5a      	subs	r2, r3, #1
 800f636:	bf44      	itt	mi
 800f638:	f1c3 0801 	rsbmi	r8, r3, #1
 800f63c:	2300      	movmi	r3, #0
 800f63e:	9208      	str	r2, [sp, #32]
 800f640:	bf54      	ite	pl
 800f642:	f04f 0800 	movpl.w	r8, #0
 800f646:	9308      	strmi	r3, [sp, #32]
 800f648:	2f00      	cmp	r7, #0
 800f64a:	db39      	blt.n	800f6c0 <_dtoa_r+0x218>
 800f64c:	9b08      	ldr	r3, [sp, #32]
 800f64e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f650:	443b      	add	r3, r7
 800f652:	9308      	str	r3, [sp, #32]
 800f654:	2300      	movs	r3, #0
 800f656:	930a      	str	r3, [sp, #40]	@ 0x28
 800f658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f65a:	2b09      	cmp	r3, #9
 800f65c:	d864      	bhi.n	800f728 <_dtoa_r+0x280>
 800f65e:	2b05      	cmp	r3, #5
 800f660:	bfc4      	itt	gt
 800f662:	3b04      	subgt	r3, #4
 800f664:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f668:	f1a3 0302 	sub.w	r3, r3, #2
 800f66c:	bfcc      	ite	gt
 800f66e:	2400      	movgt	r4, #0
 800f670:	2401      	movle	r4, #1
 800f672:	2b03      	cmp	r3, #3
 800f674:	d863      	bhi.n	800f73e <_dtoa_r+0x296>
 800f676:	e8df f003 	tbb	[pc, r3]
 800f67a:	372a      	.short	0x372a
 800f67c:	5535      	.short	0x5535
 800f67e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f682:	441e      	add	r6, r3
 800f684:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f688:	2b20      	cmp	r3, #32
 800f68a:	bfc1      	itttt	gt
 800f68c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f690:	409f      	lslgt	r7, r3
 800f692:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f696:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f69a:	bfd6      	itet	le
 800f69c:	f1c3 0320 	rsble	r3, r3, #32
 800f6a0:	ea47 0003 	orrgt.w	r0, r7, r3
 800f6a4:	fa04 f003 	lslle.w	r0, r4, r3
 800f6a8:	f7f0 ff44 	bl	8000534 <__aeabi_ui2d>
 800f6ac:	2201      	movs	r2, #1
 800f6ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f6b2:	3e01      	subs	r6, #1
 800f6b4:	9214      	str	r2, [sp, #80]	@ 0x50
 800f6b6:	e777      	b.n	800f5a8 <_dtoa_r+0x100>
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	e7b8      	b.n	800f62e <_dtoa_r+0x186>
 800f6bc:	9012      	str	r0, [sp, #72]	@ 0x48
 800f6be:	e7b7      	b.n	800f630 <_dtoa_r+0x188>
 800f6c0:	427b      	negs	r3, r7
 800f6c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	eba8 0807 	sub.w	r8, r8, r7
 800f6ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f6cc:	e7c4      	b.n	800f658 <_dtoa_r+0x1b0>
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	dc35      	bgt.n	800f744 <_dtoa_r+0x29c>
 800f6d8:	2301      	movs	r3, #1
 800f6da:	9300      	str	r3, [sp, #0]
 800f6dc:	9307      	str	r3, [sp, #28]
 800f6de:	461a      	mov	r2, r3
 800f6e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f6e2:	e00b      	b.n	800f6fc <_dtoa_r+0x254>
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	e7f3      	b.n	800f6d0 <_dtoa_r+0x228>
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6ee:	18fb      	adds	r3, r7, r3
 800f6f0:	9300      	str	r3, [sp, #0]
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	9307      	str	r3, [sp, #28]
 800f6f8:	bfb8      	it	lt
 800f6fa:	2301      	movlt	r3, #1
 800f6fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f700:	2100      	movs	r1, #0
 800f702:	2204      	movs	r2, #4
 800f704:	f102 0514 	add.w	r5, r2, #20
 800f708:	429d      	cmp	r5, r3
 800f70a:	d91f      	bls.n	800f74c <_dtoa_r+0x2a4>
 800f70c:	6041      	str	r1, [r0, #4]
 800f70e:	4658      	mov	r0, fp
 800f710:	f001 f824 	bl	801075c <_Balloc>
 800f714:	4682      	mov	sl, r0
 800f716:	2800      	cmp	r0, #0
 800f718:	d13c      	bne.n	800f794 <_dtoa_r+0x2ec>
 800f71a:	4b1b      	ldr	r3, [pc, #108]	@ (800f788 <_dtoa_r+0x2e0>)
 800f71c:	4602      	mov	r2, r0
 800f71e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f722:	e6d8      	b.n	800f4d6 <_dtoa_r+0x2e>
 800f724:	2301      	movs	r3, #1
 800f726:	e7e0      	b.n	800f6ea <_dtoa_r+0x242>
 800f728:	2401      	movs	r4, #1
 800f72a:	2300      	movs	r3, #0
 800f72c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f72e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f730:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f734:	9300      	str	r3, [sp, #0]
 800f736:	9307      	str	r3, [sp, #28]
 800f738:	2200      	movs	r2, #0
 800f73a:	2312      	movs	r3, #18
 800f73c:	e7d0      	b.n	800f6e0 <_dtoa_r+0x238>
 800f73e:	2301      	movs	r3, #1
 800f740:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f742:	e7f5      	b.n	800f730 <_dtoa_r+0x288>
 800f744:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f746:	9300      	str	r3, [sp, #0]
 800f748:	9307      	str	r3, [sp, #28]
 800f74a:	e7d7      	b.n	800f6fc <_dtoa_r+0x254>
 800f74c:	3101      	adds	r1, #1
 800f74e:	0052      	lsls	r2, r2, #1
 800f750:	e7d8      	b.n	800f704 <_dtoa_r+0x25c>
 800f752:	bf00      	nop
 800f754:	f3af 8000 	nop.w
 800f758:	636f4361 	.word	0x636f4361
 800f75c:	3fd287a7 	.word	0x3fd287a7
 800f760:	8b60c8b3 	.word	0x8b60c8b3
 800f764:	3fc68a28 	.word	0x3fc68a28
 800f768:	509f79fb 	.word	0x509f79fb
 800f76c:	3fd34413 	.word	0x3fd34413
 800f770:	08013910 	.word	0x08013910
 800f774:	08013927 	.word	0x08013927
 800f778:	7ff00000 	.word	0x7ff00000
 800f77c:	08013b70 	.word	0x08013b70
 800f780:	3ff80000 	.word	0x3ff80000
 800f784:	08013a80 	.word	0x08013a80
 800f788:	0801397f 	.word	0x0801397f
 800f78c:	0801390c 	.word	0x0801390c
 800f790:	08013b6f 	.word	0x08013b6f
 800f794:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f798:	6018      	str	r0, [r3, #0]
 800f79a:	9b07      	ldr	r3, [sp, #28]
 800f79c:	2b0e      	cmp	r3, #14
 800f79e:	f200 80a4 	bhi.w	800f8ea <_dtoa_r+0x442>
 800f7a2:	2c00      	cmp	r4, #0
 800f7a4:	f000 80a1 	beq.w	800f8ea <_dtoa_r+0x442>
 800f7a8:	2f00      	cmp	r7, #0
 800f7aa:	dd33      	ble.n	800f814 <_dtoa_r+0x36c>
 800f7ac:	4bad      	ldr	r3, [pc, #692]	@ (800fa64 <_dtoa_r+0x5bc>)
 800f7ae:	f007 020f 	and.w	r2, r7, #15
 800f7b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7b6:	ed93 7b00 	vldr	d7, [r3]
 800f7ba:	05f8      	lsls	r0, r7, #23
 800f7bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f7c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f7c4:	d516      	bpl.n	800f7f4 <_dtoa_r+0x34c>
 800f7c6:	4ba8      	ldr	r3, [pc, #672]	@ (800fa68 <_dtoa_r+0x5c0>)
 800f7c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f7cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f7d0:	f7f1 f854 	bl	800087c <__aeabi_ddiv>
 800f7d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7d8:	f004 040f 	and.w	r4, r4, #15
 800f7dc:	2603      	movs	r6, #3
 800f7de:	4da2      	ldr	r5, [pc, #648]	@ (800fa68 <_dtoa_r+0x5c0>)
 800f7e0:	b954      	cbnz	r4, 800f7f8 <_dtoa_r+0x350>
 800f7e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7ea:	f7f1 f847 	bl	800087c <__aeabi_ddiv>
 800f7ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7f2:	e028      	b.n	800f846 <_dtoa_r+0x39e>
 800f7f4:	2602      	movs	r6, #2
 800f7f6:	e7f2      	b.n	800f7de <_dtoa_r+0x336>
 800f7f8:	07e1      	lsls	r1, r4, #31
 800f7fa:	d508      	bpl.n	800f80e <_dtoa_r+0x366>
 800f7fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f800:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f804:	f7f0 ff10 	bl	8000628 <__aeabi_dmul>
 800f808:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f80c:	3601      	adds	r6, #1
 800f80e:	1064      	asrs	r4, r4, #1
 800f810:	3508      	adds	r5, #8
 800f812:	e7e5      	b.n	800f7e0 <_dtoa_r+0x338>
 800f814:	f000 80d2 	beq.w	800f9bc <_dtoa_r+0x514>
 800f818:	427c      	negs	r4, r7
 800f81a:	4b92      	ldr	r3, [pc, #584]	@ (800fa64 <_dtoa_r+0x5bc>)
 800f81c:	4d92      	ldr	r5, [pc, #584]	@ (800fa68 <_dtoa_r+0x5c0>)
 800f81e:	f004 020f 	and.w	r2, r4, #15
 800f822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f82e:	f7f0 fefb 	bl	8000628 <__aeabi_dmul>
 800f832:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f836:	1124      	asrs	r4, r4, #4
 800f838:	2300      	movs	r3, #0
 800f83a:	2602      	movs	r6, #2
 800f83c:	2c00      	cmp	r4, #0
 800f83e:	f040 80b2 	bne.w	800f9a6 <_dtoa_r+0x4fe>
 800f842:	2b00      	cmp	r3, #0
 800f844:	d1d3      	bne.n	800f7ee <_dtoa_r+0x346>
 800f846:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f848:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	f000 80b7 	beq.w	800f9c0 <_dtoa_r+0x518>
 800f852:	4b86      	ldr	r3, [pc, #536]	@ (800fa6c <_dtoa_r+0x5c4>)
 800f854:	2200      	movs	r2, #0
 800f856:	4620      	mov	r0, r4
 800f858:	4629      	mov	r1, r5
 800f85a:	f7f1 f957 	bl	8000b0c <__aeabi_dcmplt>
 800f85e:	2800      	cmp	r0, #0
 800f860:	f000 80ae 	beq.w	800f9c0 <_dtoa_r+0x518>
 800f864:	9b07      	ldr	r3, [sp, #28]
 800f866:	2b00      	cmp	r3, #0
 800f868:	f000 80aa 	beq.w	800f9c0 <_dtoa_r+0x518>
 800f86c:	9b00      	ldr	r3, [sp, #0]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	dd37      	ble.n	800f8e2 <_dtoa_r+0x43a>
 800f872:	1e7b      	subs	r3, r7, #1
 800f874:	9304      	str	r3, [sp, #16]
 800f876:	4620      	mov	r0, r4
 800f878:	4b7d      	ldr	r3, [pc, #500]	@ (800fa70 <_dtoa_r+0x5c8>)
 800f87a:	2200      	movs	r2, #0
 800f87c:	4629      	mov	r1, r5
 800f87e:	f7f0 fed3 	bl	8000628 <__aeabi_dmul>
 800f882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f886:	9c00      	ldr	r4, [sp, #0]
 800f888:	3601      	adds	r6, #1
 800f88a:	4630      	mov	r0, r6
 800f88c:	f7f0 fe62 	bl	8000554 <__aeabi_i2d>
 800f890:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f894:	f7f0 fec8 	bl	8000628 <__aeabi_dmul>
 800f898:	4b76      	ldr	r3, [pc, #472]	@ (800fa74 <_dtoa_r+0x5cc>)
 800f89a:	2200      	movs	r2, #0
 800f89c:	f7f0 fd0e 	bl	80002bc <__adddf3>
 800f8a0:	4605      	mov	r5, r0
 800f8a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f8a6:	2c00      	cmp	r4, #0
 800f8a8:	f040 808d 	bne.w	800f9c6 <_dtoa_r+0x51e>
 800f8ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8b0:	4b71      	ldr	r3, [pc, #452]	@ (800fa78 <_dtoa_r+0x5d0>)
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	f7f0 fd00 	bl	80002b8 <__aeabi_dsub>
 800f8b8:	4602      	mov	r2, r0
 800f8ba:	460b      	mov	r3, r1
 800f8bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f8c0:	462a      	mov	r2, r5
 800f8c2:	4633      	mov	r3, r6
 800f8c4:	f7f1 f940 	bl	8000b48 <__aeabi_dcmpgt>
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	f040 828b 	bne.w	800fde4 <_dtoa_r+0x93c>
 800f8ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8d2:	462a      	mov	r2, r5
 800f8d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f8d8:	f7f1 f918 	bl	8000b0c <__aeabi_dcmplt>
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	f040 8128 	bne.w	800fb32 <_dtoa_r+0x68a>
 800f8e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f8e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f8ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	f2c0 815a 	blt.w	800fba6 <_dtoa_r+0x6fe>
 800f8f2:	2f0e      	cmp	r7, #14
 800f8f4:	f300 8157 	bgt.w	800fba6 <_dtoa_r+0x6fe>
 800f8f8:	4b5a      	ldr	r3, [pc, #360]	@ (800fa64 <_dtoa_r+0x5bc>)
 800f8fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f8fe:	ed93 7b00 	vldr	d7, [r3]
 800f902:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f904:	2b00      	cmp	r3, #0
 800f906:	ed8d 7b00 	vstr	d7, [sp]
 800f90a:	da03      	bge.n	800f914 <_dtoa_r+0x46c>
 800f90c:	9b07      	ldr	r3, [sp, #28]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	f340 8101 	ble.w	800fb16 <_dtoa_r+0x66e>
 800f914:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f918:	4656      	mov	r6, sl
 800f91a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f91e:	4620      	mov	r0, r4
 800f920:	4629      	mov	r1, r5
 800f922:	f7f0 ffab 	bl	800087c <__aeabi_ddiv>
 800f926:	f7f1 f92f 	bl	8000b88 <__aeabi_d2iz>
 800f92a:	4680      	mov	r8, r0
 800f92c:	f7f0 fe12 	bl	8000554 <__aeabi_i2d>
 800f930:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f934:	f7f0 fe78 	bl	8000628 <__aeabi_dmul>
 800f938:	4602      	mov	r2, r0
 800f93a:	460b      	mov	r3, r1
 800f93c:	4620      	mov	r0, r4
 800f93e:	4629      	mov	r1, r5
 800f940:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f944:	f7f0 fcb8 	bl	80002b8 <__aeabi_dsub>
 800f948:	f806 4b01 	strb.w	r4, [r6], #1
 800f94c:	9d07      	ldr	r5, [sp, #28]
 800f94e:	eba6 040a 	sub.w	r4, r6, sl
 800f952:	42a5      	cmp	r5, r4
 800f954:	4602      	mov	r2, r0
 800f956:	460b      	mov	r3, r1
 800f958:	f040 8117 	bne.w	800fb8a <_dtoa_r+0x6e2>
 800f95c:	f7f0 fcae 	bl	80002bc <__adddf3>
 800f960:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f964:	4604      	mov	r4, r0
 800f966:	460d      	mov	r5, r1
 800f968:	f7f1 f8ee 	bl	8000b48 <__aeabi_dcmpgt>
 800f96c:	2800      	cmp	r0, #0
 800f96e:	f040 80f9 	bne.w	800fb64 <_dtoa_r+0x6bc>
 800f972:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f976:	4620      	mov	r0, r4
 800f978:	4629      	mov	r1, r5
 800f97a:	f7f1 f8bd 	bl	8000af8 <__aeabi_dcmpeq>
 800f97e:	b118      	cbz	r0, 800f988 <_dtoa_r+0x4e0>
 800f980:	f018 0f01 	tst.w	r8, #1
 800f984:	f040 80ee 	bne.w	800fb64 <_dtoa_r+0x6bc>
 800f988:	4649      	mov	r1, r9
 800f98a:	4658      	mov	r0, fp
 800f98c:	f000 ff26 	bl	80107dc <_Bfree>
 800f990:	2300      	movs	r3, #0
 800f992:	7033      	strb	r3, [r6, #0]
 800f994:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f996:	3701      	adds	r7, #1
 800f998:	601f      	str	r7, [r3, #0]
 800f99a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f000 831d 	beq.w	800ffdc <_dtoa_r+0xb34>
 800f9a2:	601e      	str	r6, [r3, #0]
 800f9a4:	e31a      	b.n	800ffdc <_dtoa_r+0xb34>
 800f9a6:	07e2      	lsls	r2, r4, #31
 800f9a8:	d505      	bpl.n	800f9b6 <_dtoa_r+0x50e>
 800f9aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f9ae:	f7f0 fe3b 	bl	8000628 <__aeabi_dmul>
 800f9b2:	3601      	adds	r6, #1
 800f9b4:	2301      	movs	r3, #1
 800f9b6:	1064      	asrs	r4, r4, #1
 800f9b8:	3508      	adds	r5, #8
 800f9ba:	e73f      	b.n	800f83c <_dtoa_r+0x394>
 800f9bc:	2602      	movs	r6, #2
 800f9be:	e742      	b.n	800f846 <_dtoa_r+0x39e>
 800f9c0:	9c07      	ldr	r4, [sp, #28]
 800f9c2:	9704      	str	r7, [sp, #16]
 800f9c4:	e761      	b.n	800f88a <_dtoa_r+0x3e2>
 800f9c6:	4b27      	ldr	r3, [pc, #156]	@ (800fa64 <_dtoa_r+0x5bc>)
 800f9c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f9ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f9ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f9d2:	4454      	add	r4, sl
 800f9d4:	2900      	cmp	r1, #0
 800f9d6:	d053      	beq.n	800fa80 <_dtoa_r+0x5d8>
 800f9d8:	4928      	ldr	r1, [pc, #160]	@ (800fa7c <_dtoa_r+0x5d4>)
 800f9da:	2000      	movs	r0, #0
 800f9dc:	f7f0 ff4e 	bl	800087c <__aeabi_ddiv>
 800f9e0:	4633      	mov	r3, r6
 800f9e2:	462a      	mov	r2, r5
 800f9e4:	f7f0 fc68 	bl	80002b8 <__aeabi_dsub>
 800f9e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f9ec:	4656      	mov	r6, sl
 800f9ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9f2:	f7f1 f8c9 	bl	8000b88 <__aeabi_d2iz>
 800f9f6:	4605      	mov	r5, r0
 800f9f8:	f7f0 fdac 	bl	8000554 <__aeabi_i2d>
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	460b      	mov	r3, r1
 800fa00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa04:	f7f0 fc58 	bl	80002b8 <__aeabi_dsub>
 800fa08:	3530      	adds	r5, #48	@ 0x30
 800fa0a:	4602      	mov	r2, r0
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fa12:	f806 5b01 	strb.w	r5, [r6], #1
 800fa16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fa1a:	f7f1 f877 	bl	8000b0c <__aeabi_dcmplt>
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	d171      	bne.n	800fb06 <_dtoa_r+0x65e>
 800fa22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa26:	4911      	ldr	r1, [pc, #68]	@ (800fa6c <_dtoa_r+0x5c4>)
 800fa28:	2000      	movs	r0, #0
 800fa2a:	f7f0 fc45 	bl	80002b8 <__aeabi_dsub>
 800fa2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fa32:	f7f1 f86b 	bl	8000b0c <__aeabi_dcmplt>
 800fa36:	2800      	cmp	r0, #0
 800fa38:	f040 8095 	bne.w	800fb66 <_dtoa_r+0x6be>
 800fa3c:	42a6      	cmp	r6, r4
 800fa3e:	f43f af50 	beq.w	800f8e2 <_dtoa_r+0x43a>
 800fa42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fa46:	4b0a      	ldr	r3, [pc, #40]	@ (800fa70 <_dtoa_r+0x5c8>)
 800fa48:	2200      	movs	r2, #0
 800fa4a:	f7f0 fded 	bl	8000628 <__aeabi_dmul>
 800fa4e:	4b08      	ldr	r3, [pc, #32]	@ (800fa70 <_dtoa_r+0x5c8>)
 800fa50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fa54:	2200      	movs	r2, #0
 800fa56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa5a:	f7f0 fde5 	bl	8000628 <__aeabi_dmul>
 800fa5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa62:	e7c4      	b.n	800f9ee <_dtoa_r+0x546>
 800fa64:	08013a80 	.word	0x08013a80
 800fa68:	08013a58 	.word	0x08013a58
 800fa6c:	3ff00000 	.word	0x3ff00000
 800fa70:	40240000 	.word	0x40240000
 800fa74:	401c0000 	.word	0x401c0000
 800fa78:	40140000 	.word	0x40140000
 800fa7c:	3fe00000 	.word	0x3fe00000
 800fa80:	4631      	mov	r1, r6
 800fa82:	4628      	mov	r0, r5
 800fa84:	f7f0 fdd0 	bl	8000628 <__aeabi_dmul>
 800fa88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fa8c:	9415      	str	r4, [sp, #84]	@ 0x54
 800fa8e:	4656      	mov	r6, sl
 800fa90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa94:	f7f1 f878 	bl	8000b88 <__aeabi_d2iz>
 800fa98:	4605      	mov	r5, r0
 800fa9a:	f7f0 fd5b 	bl	8000554 <__aeabi_i2d>
 800fa9e:	4602      	mov	r2, r0
 800faa0:	460b      	mov	r3, r1
 800faa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800faa6:	f7f0 fc07 	bl	80002b8 <__aeabi_dsub>
 800faaa:	3530      	adds	r5, #48	@ 0x30
 800faac:	f806 5b01 	strb.w	r5, [r6], #1
 800fab0:	4602      	mov	r2, r0
 800fab2:	460b      	mov	r3, r1
 800fab4:	42a6      	cmp	r6, r4
 800fab6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800faba:	f04f 0200 	mov.w	r2, #0
 800fabe:	d124      	bne.n	800fb0a <_dtoa_r+0x662>
 800fac0:	4bac      	ldr	r3, [pc, #688]	@ (800fd74 <_dtoa_r+0x8cc>)
 800fac2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fac6:	f7f0 fbf9 	bl	80002bc <__adddf3>
 800faca:	4602      	mov	r2, r0
 800facc:	460b      	mov	r3, r1
 800face:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fad2:	f7f1 f839 	bl	8000b48 <__aeabi_dcmpgt>
 800fad6:	2800      	cmp	r0, #0
 800fad8:	d145      	bne.n	800fb66 <_dtoa_r+0x6be>
 800fada:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fade:	49a5      	ldr	r1, [pc, #660]	@ (800fd74 <_dtoa_r+0x8cc>)
 800fae0:	2000      	movs	r0, #0
 800fae2:	f7f0 fbe9 	bl	80002b8 <__aeabi_dsub>
 800fae6:	4602      	mov	r2, r0
 800fae8:	460b      	mov	r3, r1
 800faea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800faee:	f7f1 f80d 	bl	8000b0c <__aeabi_dcmplt>
 800faf2:	2800      	cmp	r0, #0
 800faf4:	f43f aef5 	beq.w	800f8e2 <_dtoa_r+0x43a>
 800faf8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fafa:	1e73      	subs	r3, r6, #1
 800fafc:	9315      	str	r3, [sp, #84]	@ 0x54
 800fafe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fb02:	2b30      	cmp	r3, #48	@ 0x30
 800fb04:	d0f8      	beq.n	800faf8 <_dtoa_r+0x650>
 800fb06:	9f04      	ldr	r7, [sp, #16]
 800fb08:	e73e      	b.n	800f988 <_dtoa_r+0x4e0>
 800fb0a:	4b9b      	ldr	r3, [pc, #620]	@ (800fd78 <_dtoa_r+0x8d0>)
 800fb0c:	f7f0 fd8c 	bl	8000628 <__aeabi_dmul>
 800fb10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb14:	e7bc      	b.n	800fa90 <_dtoa_r+0x5e8>
 800fb16:	d10c      	bne.n	800fb32 <_dtoa_r+0x68a>
 800fb18:	4b98      	ldr	r3, [pc, #608]	@ (800fd7c <_dtoa_r+0x8d4>)
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb20:	f7f0 fd82 	bl	8000628 <__aeabi_dmul>
 800fb24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb28:	f7f1 f804 	bl	8000b34 <__aeabi_dcmpge>
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	f000 8157 	beq.w	800fde0 <_dtoa_r+0x938>
 800fb32:	2400      	movs	r4, #0
 800fb34:	4625      	mov	r5, r4
 800fb36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb38:	43db      	mvns	r3, r3
 800fb3a:	9304      	str	r3, [sp, #16]
 800fb3c:	4656      	mov	r6, sl
 800fb3e:	2700      	movs	r7, #0
 800fb40:	4621      	mov	r1, r4
 800fb42:	4658      	mov	r0, fp
 800fb44:	f000 fe4a 	bl	80107dc <_Bfree>
 800fb48:	2d00      	cmp	r5, #0
 800fb4a:	d0dc      	beq.n	800fb06 <_dtoa_r+0x65e>
 800fb4c:	b12f      	cbz	r7, 800fb5a <_dtoa_r+0x6b2>
 800fb4e:	42af      	cmp	r7, r5
 800fb50:	d003      	beq.n	800fb5a <_dtoa_r+0x6b2>
 800fb52:	4639      	mov	r1, r7
 800fb54:	4658      	mov	r0, fp
 800fb56:	f000 fe41 	bl	80107dc <_Bfree>
 800fb5a:	4629      	mov	r1, r5
 800fb5c:	4658      	mov	r0, fp
 800fb5e:	f000 fe3d 	bl	80107dc <_Bfree>
 800fb62:	e7d0      	b.n	800fb06 <_dtoa_r+0x65e>
 800fb64:	9704      	str	r7, [sp, #16]
 800fb66:	4633      	mov	r3, r6
 800fb68:	461e      	mov	r6, r3
 800fb6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb6e:	2a39      	cmp	r2, #57	@ 0x39
 800fb70:	d107      	bne.n	800fb82 <_dtoa_r+0x6da>
 800fb72:	459a      	cmp	sl, r3
 800fb74:	d1f8      	bne.n	800fb68 <_dtoa_r+0x6c0>
 800fb76:	9a04      	ldr	r2, [sp, #16]
 800fb78:	3201      	adds	r2, #1
 800fb7a:	9204      	str	r2, [sp, #16]
 800fb7c:	2230      	movs	r2, #48	@ 0x30
 800fb7e:	f88a 2000 	strb.w	r2, [sl]
 800fb82:	781a      	ldrb	r2, [r3, #0]
 800fb84:	3201      	adds	r2, #1
 800fb86:	701a      	strb	r2, [r3, #0]
 800fb88:	e7bd      	b.n	800fb06 <_dtoa_r+0x65e>
 800fb8a:	4b7b      	ldr	r3, [pc, #492]	@ (800fd78 <_dtoa_r+0x8d0>)
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	f7f0 fd4b 	bl	8000628 <__aeabi_dmul>
 800fb92:	2200      	movs	r2, #0
 800fb94:	2300      	movs	r3, #0
 800fb96:	4604      	mov	r4, r0
 800fb98:	460d      	mov	r5, r1
 800fb9a:	f7f0 ffad 	bl	8000af8 <__aeabi_dcmpeq>
 800fb9e:	2800      	cmp	r0, #0
 800fba0:	f43f aebb 	beq.w	800f91a <_dtoa_r+0x472>
 800fba4:	e6f0      	b.n	800f988 <_dtoa_r+0x4e0>
 800fba6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fba8:	2a00      	cmp	r2, #0
 800fbaa:	f000 80db 	beq.w	800fd64 <_dtoa_r+0x8bc>
 800fbae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbb0:	2a01      	cmp	r2, #1
 800fbb2:	f300 80bf 	bgt.w	800fd34 <_dtoa_r+0x88c>
 800fbb6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fbb8:	2a00      	cmp	r2, #0
 800fbba:	f000 80b7 	beq.w	800fd2c <_dtoa_r+0x884>
 800fbbe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fbc2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fbc4:	4646      	mov	r6, r8
 800fbc6:	9a08      	ldr	r2, [sp, #32]
 800fbc8:	2101      	movs	r1, #1
 800fbca:	441a      	add	r2, r3
 800fbcc:	4658      	mov	r0, fp
 800fbce:	4498      	add	r8, r3
 800fbd0:	9208      	str	r2, [sp, #32]
 800fbd2:	f000 ff01 	bl	80109d8 <__i2b>
 800fbd6:	4605      	mov	r5, r0
 800fbd8:	b15e      	cbz	r6, 800fbf2 <_dtoa_r+0x74a>
 800fbda:	9b08      	ldr	r3, [sp, #32]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	dd08      	ble.n	800fbf2 <_dtoa_r+0x74a>
 800fbe0:	42b3      	cmp	r3, r6
 800fbe2:	9a08      	ldr	r2, [sp, #32]
 800fbe4:	bfa8      	it	ge
 800fbe6:	4633      	movge	r3, r6
 800fbe8:	eba8 0803 	sub.w	r8, r8, r3
 800fbec:	1af6      	subs	r6, r6, r3
 800fbee:	1ad3      	subs	r3, r2, r3
 800fbf0:	9308      	str	r3, [sp, #32]
 800fbf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbf4:	b1f3      	cbz	r3, 800fc34 <_dtoa_r+0x78c>
 800fbf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	f000 80b7 	beq.w	800fd6c <_dtoa_r+0x8c4>
 800fbfe:	b18c      	cbz	r4, 800fc24 <_dtoa_r+0x77c>
 800fc00:	4629      	mov	r1, r5
 800fc02:	4622      	mov	r2, r4
 800fc04:	4658      	mov	r0, fp
 800fc06:	f000 ffa7 	bl	8010b58 <__pow5mult>
 800fc0a:	464a      	mov	r2, r9
 800fc0c:	4601      	mov	r1, r0
 800fc0e:	4605      	mov	r5, r0
 800fc10:	4658      	mov	r0, fp
 800fc12:	f000 fef7 	bl	8010a04 <__multiply>
 800fc16:	4649      	mov	r1, r9
 800fc18:	9004      	str	r0, [sp, #16]
 800fc1a:	4658      	mov	r0, fp
 800fc1c:	f000 fdde 	bl	80107dc <_Bfree>
 800fc20:	9b04      	ldr	r3, [sp, #16]
 800fc22:	4699      	mov	r9, r3
 800fc24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc26:	1b1a      	subs	r2, r3, r4
 800fc28:	d004      	beq.n	800fc34 <_dtoa_r+0x78c>
 800fc2a:	4649      	mov	r1, r9
 800fc2c:	4658      	mov	r0, fp
 800fc2e:	f000 ff93 	bl	8010b58 <__pow5mult>
 800fc32:	4681      	mov	r9, r0
 800fc34:	2101      	movs	r1, #1
 800fc36:	4658      	mov	r0, fp
 800fc38:	f000 fece 	bl	80109d8 <__i2b>
 800fc3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc3e:	4604      	mov	r4, r0
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	f000 81cf 	beq.w	800ffe4 <_dtoa_r+0xb3c>
 800fc46:	461a      	mov	r2, r3
 800fc48:	4601      	mov	r1, r0
 800fc4a:	4658      	mov	r0, fp
 800fc4c:	f000 ff84 	bl	8010b58 <__pow5mult>
 800fc50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc52:	2b01      	cmp	r3, #1
 800fc54:	4604      	mov	r4, r0
 800fc56:	f300 8095 	bgt.w	800fd84 <_dtoa_r+0x8dc>
 800fc5a:	9b02      	ldr	r3, [sp, #8]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	f040 8087 	bne.w	800fd70 <_dtoa_r+0x8c8>
 800fc62:	9b03      	ldr	r3, [sp, #12]
 800fc64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	f040 8089 	bne.w	800fd80 <_dtoa_r+0x8d8>
 800fc6e:	9b03      	ldr	r3, [sp, #12]
 800fc70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fc74:	0d1b      	lsrs	r3, r3, #20
 800fc76:	051b      	lsls	r3, r3, #20
 800fc78:	b12b      	cbz	r3, 800fc86 <_dtoa_r+0x7de>
 800fc7a:	9b08      	ldr	r3, [sp, #32]
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	9308      	str	r3, [sp, #32]
 800fc80:	f108 0801 	add.w	r8, r8, #1
 800fc84:	2301      	movs	r3, #1
 800fc86:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	f000 81b0 	beq.w	800fff0 <_dtoa_r+0xb48>
 800fc90:	6923      	ldr	r3, [r4, #16]
 800fc92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fc96:	6918      	ldr	r0, [r3, #16]
 800fc98:	f000 fe52 	bl	8010940 <__hi0bits>
 800fc9c:	f1c0 0020 	rsb	r0, r0, #32
 800fca0:	9b08      	ldr	r3, [sp, #32]
 800fca2:	4418      	add	r0, r3
 800fca4:	f010 001f 	ands.w	r0, r0, #31
 800fca8:	d077      	beq.n	800fd9a <_dtoa_r+0x8f2>
 800fcaa:	f1c0 0320 	rsb	r3, r0, #32
 800fcae:	2b04      	cmp	r3, #4
 800fcb0:	dd6b      	ble.n	800fd8a <_dtoa_r+0x8e2>
 800fcb2:	9b08      	ldr	r3, [sp, #32]
 800fcb4:	f1c0 001c 	rsb	r0, r0, #28
 800fcb8:	4403      	add	r3, r0
 800fcba:	4480      	add	r8, r0
 800fcbc:	4406      	add	r6, r0
 800fcbe:	9308      	str	r3, [sp, #32]
 800fcc0:	f1b8 0f00 	cmp.w	r8, #0
 800fcc4:	dd05      	ble.n	800fcd2 <_dtoa_r+0x82a>
 800fcc6:	4649      	mov	r1, r9
 800fcc8:	4642      	mov	r2, r8
 800fcca:	4658      	mov	r0, fp
 800fccc:	f000 ff9e 	bl	8010c0c <__lshift>
 800fcd0:	4681      	mov	r9, r0
 800fcd2:	9b08      	ldr	r3, [sp, #32]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	dd05      	ble.n	800fce4 <_dtoa_r+0x83c>
 800fcd8:	4621      	mov	r1, r4
 800fcda:	461a      	mov	r2, r3
 800fcdc:	4658      	mov	r0, fp
 800fcde:	f000 ff95 	bl	8010c0c <__lshift>
 800fce2:	4604      	mov	r4, r0
 800fce4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d059      	beq.n	800fd9e <_dtoa_r+0x8f6>
 800fcea:	4621      	mov	r1, r4
 800fcec:	4648      	mov	r0, r9
 800fcee:	f000 fff9 	bl	8010ce4 <__mcmp>
 800fcf2:	2800      	cmp	r0, #0
 800fcf4:	da53      	bge.n	800fd9e <_dtoa_r+0x8f6>
 800fcf6:	1e7b      	subs	r3, r7, #1
 800fcf8:	9304      	str	r3, [sp, #16]
 800fcfa:	4649      	mov	r1, r9
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	220a      	movs	r2, #10
 800fd00:	4658      	mov	r0, fp
 800fd02:	f000 fd8d 	bl	8010820 <__multadd>
 800fd06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd08:	4681      	mov	r9, r0
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	f000 8172 	beq.w	800fff4 <_dtoa_r+0xb4c>
 800fd10:	2300      	movs	r3, #0
 800fd12:	4629      	mov	r1, r5
 800fd14:	220a      	movs	r2, #10
 800fd16:	4658      	mov	r0, fp
 800fd18:	f000 fd82 	bl	8010820 <__multadd>
 800fd1c:	9b00      	ldr	r3, [sp, #0]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	4605      	mov	r5, r0
 800fd22:	dc67      	bgt.n	800fdf4 <_dtoa_r+0x94c>
 800fd24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd26:	2b02      	cmp	r3, #2
 800fd28:	dc41      	bgt.n	800fdae <_dtoa_r+0x906>
 800fd2a:	e063      	b.n	800fdf4 <_dtoa_r+0x94c>
 800fd2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fd2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fd32:	e746      	b.n	800fbc2 <_dtoa_r+0x71a>
 800fd34:	9b07      	ldr	r3, [sp, #28]
 800fd36:	1e5c      	subs	r4, r3, #1
 800fd38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd3a:	42a3      	cmp	r3, r4
 800fd3c:	bfbf      	itttt	lt
 800fd3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fd40:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fd42:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fd44:	1ae3      	sublt	r3, r4, r3
 800fd46:	bfb4      	ite	lt
 800fd48:	18d2      	addlt	r2, r2, r3
 800fd4a:	1b1c      	subge	r4, r3, r4
 800fd4c:	9b07      	ldr	r3, [sp, #28]
 800fd4e:	bfbc      	itt	lt
 800fd50:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fd52:	2400      	movlt	r4, #0
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	bfb5      	itete	lt
 800fd58:	eba8 0603 	sublt.w	r6, r8, r3
 800fd5c:	9b07      	ldrge	r3, [sp, #28]
 800fd5e:	2300      	movlt	r3, #0
 800fd60:	4646      	movge	r6, r8
 800fd62:	e730      	b.n	800fbc6 <_dtoa_r+0x71e>
 800fd64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fd66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fd68:	4646      	mov	r6, r8
 800fd6a:	e735      	b.n	800fbd8 <_dtoa_r+0x730>
 800fd6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd6e:	e75c      	b.n	800fc2a <_dtoa_r+0x782>
 800fd70:	2300      	movs	r3, #0
 800fd72:	e788      	b.n	800fc86 <_dtoa_r+0x7de>
 800fd74:	3fe00000 	.word	0x3fe00000
 800fd78:	40240000 	.word	0x40240000
 800fd7c:	40140000 	.word	0x40140000
 800fd80:	9b02      	ldr	r3, [sp, #8]
 800fd82:	e780      	b.n	800fc86 <_dtoa_r+0x7de>
 800fd84:	2300      	movs	r3, #0
 800fd86:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd88:	e782      	b.n	800fc90 <_dtoa_r+0x7e8>
 800fd8a:	d099      	beq.n	800fcc0 <_dtoa_r+0x818>
 800fd8c:	9a08      	ldr	r2, [sp, #32]
 800fd8e:	331c      	adds	r3, #28
 800fd90:	441a      	add	r2, r3
 800fd92:	4498      	add	r8, r3
 800fd94:	441e      	add	r6, r3
 800fd96:	9208      	str	r2, [sp, #32]
 800fd98:	e792      	b.n	800fcc0 <_dtoa_r+0x818>
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	e7f6      	b.n	800fd8c <_dtoa_r+0x8e4>
 800fd9e:	9b07      	ldr	r3, [sp, #28]
 800fda0:	9704      	str	r7, [sp, #16]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	dc20      	bgt.n	800fde8 <_dtoa_r+0x940>
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdaa:	2b02      	cmp	r3, #2
 800fdac:	dd1e      	ble.n	800fdec <_dtoa_r+0x944>
 800fdae:	9b00      	ldr	r3, [sp, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	f47f aec0 	bne.w	800fb36 <_dtoa_r+0x68e>
 800fdb6:	4621      	mov	r1, r4
 800fdb8:	2205      	movs	r2, #5
 800fdba:	4658      	mov	r0, fp
 800fdbc:	f000 fd30 	bl	8010820 <__multadd>
 800fdc0:	4601      	mov	r1, r0
 800fdc2:	4604      	mov	r4, r0
 800fdc4:	4648      	mov	r0, r9
 800fdc6:	f000 ff8d 	bl	8010ce4 <__mcmp>
 800fdca:	2800      	cmp	r0, #0
 800fdcc:	f77f aeb3 	ble.w	800fb36 <_dtoa_r+0x68e>
 800fdd0:	4656      	mov	r6, sl
 800fdd2:	2331      	movs	r3, #49	@ 0x31
 800fdd4:	f806 3b01 	strb.w	r3, [r6], #1
 800fdd8:	9b04      	ldr	r3, [sp, #16]
 800fdda:	3301      	adds	r3, #1
 800fddc:	9304      	str	r3, [sp, #16]
 800fdde:	e6ae      	b.n	800fb3e <_dtoa_r+0x696>
 800fde0:	9c07      	ldr	r4, [sp, #28]
 800fde2:	9704      	str	r7, [sp, #16]
 800fde4:	4625      	mov	r5, r4
 800fde6:	e7f3      	b.n	800fdd0 <_dtoa_r+0x928>
 800fde8:	9b07      	ldr	r3, [sp, #28]
 800fdea:	9300      	str	r3, [sp, #0]
 800fdec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	f000 8104 	beq.w	800fffc <_dtoa_r+0xb54>
 800fdf4:	2e00      	cmp	r6, #0
 800fdf6:	dd05      	ble.n	800fe04 <_dtoa_r+0x95c>
 800fdf8:	4629      	mov	r1, r5
 800fdfa:	4632      	mov	r2, r6
 800fdfc:	4658      	mov	r0, fp
 800fdfe:	f000 ff05 	bl	8010c0c <__lshift>
 800fe02:	4605      	mov	r5, r0
 800fe04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d05a      	beq.n	800fec0 <_dtoa_r+0xa18>
 800fe0a:	6869      	ldr	r1, [r5, #4]
 800fe0c:	4658      	mov	r0, fp
 800fe0e:	f000 fca5 	bl	801075c <_Balloc>
 800fe12:	4606      	mov	r6, r0
 800fe14:	b928      	cbnz	r0, 800fe22 <_dtoa_r+0x97a>
 800fe16:	4b84      	ldr	r3, [pc, #528]	@ (8010028 <_dtoa_r+0xb80>)
 800fe18:	4602      	mov	r2, r0
 800fe1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fe1e:	f7ff bb5a 	b.w	800f4d6 <_dtoa_r+0x2e>
 800fe22:	692a      	ldr	r2, [r5, #16]
 800fe24:	3202      	adds	r2, #2
 800fe26:	0092      	lsls	r2, r2, #2
 800fe28:	f105 010c 	add.w	r1, r5, #12
 800fe2c:	300c      	adds	r0, #12
 800fe2e:	f7ff fa9c 	bl	800f36a <memcpy>
 800fe32:	2201      	movs	r2, #1
 800fe34:	4631      	mov	r1, r6
 800fe36:	4658      	mov	r0, fp
 800fe38:	f000 fee8 	bl	8010c0c <__lshift>
 800fe3c:	f10a 0301 	add.w	r3, sl, #1
 800fe40:	9307      	str	r3, [sp, #28]
 800fe42:	9b00      	ldr	r3, [sp, #0]
 800fe44:	4453      	add	r3, sl
 800fe46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe48:	9b02      	ldr	r3, [sp, #8]
 800fe4a:	f003 0301 	and.w	r3, r3, #1
 800fe4e:	462f      	mov	r7, r5
 800fe50:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe52:	4605      	mov	r5, r0
 800fe54:	9b07      	ldr	r3, [sp, #28]
 800fe56:	4621      	mov	r1, r4
 800fe58:	3b01      	subs	r3, #1
 800fe5a:	4648      	mov	r0, r9
 800fe5c:	9300      	str	r3, [sp, #0]
 800fe5e:	f7ff fa9b 	bl	800f398 <quorem>
 800fe62:	4639      	mov	r1, r7
 800fe64:	9002      	str	r0, [sp, #8]
 800fe66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fe6a:	4648      	mov	r0, r9
 800fe6c:	f000 ff3a 	bl	8010ce4 <__mcmp>
 800fe70:	462a      	mov	r2, r5
 800fe72:	9008      	str	r0, [sp, #32]
 800fe74:	4621      	mov	r1, r4
 800fe76:	4658      	mov	r0, fp
 800fe78:	f000 ff50 	bl	8010d1c <__mdiff>
 800fe7c:	68c2      	ldr	r2, [r0, #12]
 800fe7e:	4606      	mov	r6, r0
 800fe80:	bb02      	cbnz	r2, 800fec4 <_dtoa_r+0xa1c>
 800fe82:	4601      	mov	r1, r0
 800fe84:	4648      	mov	r0, r9
 800fe86:	f000 ff2d 	bl	8010ce4 <__mcmp>
 800fe8a:	4602      	mov	r2, r0
 800fe8c:	4631      	mov	r1, r6
 800fe8e:	4658      	mov	r0, fp
 800fe90:	920e      	str	r2, [sp, #56]	@ 0x38
 800fe92:	f000 fca3 	bl	80107dc <_Bfree>
 800fe96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe9a:	9e07      	ldr	r6, [sp, #28]
 800fe9c:	ea43 0102 	orr.w	r1, r3, r2
 800fea0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fea2:	4319      	orrs	r1, r3
 800fea4:	d110      	bne.n	800fec8 <_dtoa_r+0xa20>
 800fea6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800feaa:	d029      	beq.n	800ff00 <_dtoa_r+0xa58>
 800feac:	9b08      	ldr	r3, [sp, #32]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	dd02      	ble.n	800feb8 <_dtoa_r+0xa10>
 800feb2:	9b02      	ldr	r3, [sp, #8]
 800feb4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800feb8:	9b00      	ldr	r3, [sp, #0]
 800feba:	f883 8000 	strb.w	r8, [r3]
 800febe:	e63f      	b.n	800fb40 <_dtoa_r+0x698>
 800fec0:	4628      	mov	r0, r5
 800fec2:	e7bb      	b.n	800fe3c <_dtoa_r+0x994>
 800fec4:	2201      	movs	r2, #1
 800fec6:	e7e1      	b.n	800fe8c <_dtoa_r+0x9e4>
 800fec8:	9b08      	ldr	r3, [sp, #32]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	db04      	blt.n	800fed8 <_dtoa_r+0xa30>
 800fece:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fed0:	430b      	orrs	r3, r1
 800fed2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fed4:	430b      	orrs	r3, r1
 800fed6:	d120      	bne.n	800ff1a <_dtoa_r+0xa72>
 800fed8:	2a00      	cmp	r2, #0
 800feda:	dded      	ble.n	800feb8 <_dtoa_r+0xa10>
 800fedc:	4649      	mov	r1, r9
 800fede:	2201      	movs	r2, #1
 800fee0:	4658      	mov	r0, fp
 800fee2:	f000 fe93 	bl	8010c0c <__lshift>
 800fee6:	4621      	mov	r1, r4
 800fee8:	4681      	mov	r9, r0
 800feea:	f000 fefb 	bl	8010ce4 <__mcmp>
 800feee:	2800      	cmp	r0, #0
 800fef0:	dc03      	bgt.n	800fefa <_dtoa_r+0xa52>
 800fef2:	d1e1      	bne.n	800feb8 <_dtoa_r+0xa10>
 800fef4:	f018 0f01 	tst.w	r8, #1
 800fef8:	d0de      	beq.n	800feb8 <_dtoa_r+0xa10>
 800fefa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fefe:	d1d8      	bne.n	800feb2 <_dtoa_r+0xa0a>
 800ff00:	9a00      	ldr	r2, [sp, #0]
 800ff02:	2339      	movs	r3, #57	@ 0x39
 800ff04:	7013      	strb	r3, [r2, #0]
 800ff06:	4633      	mov	r3, r6
 800ff08:	461e      	mov	r6, r3
 800ff0a:	3b01      	subs	r3, #1
 800ff0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ff10:	2a39      	cmp	r2, #57	@ 0x39
 800ff12:	d052      	beq.n	800ffba <_dtoa_r+0xb12>
 800ff14:	3201      	adds	r2, #1
 800ff16:	701a      	strb	r2, [r3, #0]
 800ff18:	e612      	b.n	800fb40 <_dtoa_r+0x698>
 800ff1a:	2a00      	cmp	r2, #0
 800ff1c:	dd07      	ble.n	800ff2e <_dtoa_r+0xa86>
 800ff1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ff22:	d0ed      	beq.n	800ff00 <_dtoa_r+0xa58>
 800ff24:	9a00      	ldr	r2, [sp, #0]
 800ff26:	f108 0301 	add.w	r3, r8, #1
 800ff2a:	7013      	strb	r3, [r2, #0]
 800ff2c:	e608      	b.n	800fb40 <_dtoa_r+0x698>
 800ff2e:	9b07      	ldr	r3, [sp, #28]
 800ff30:	9a07      	ldr	r2, [sp, #28]
 800ff32:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ff36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d028      	beq.n	800ff8e <_dtoa_r+0xae6>
 800ff3c:	4649      	mov	r1, r9
 800ff3e:	2300      	movs	r3, #0
 800ff40:	220a      	movs	r2, #10
 800ff42:	4658      	mov	r0, fp
 800ff44:	f000 fc6c 	bl	8010820 <__multadd>
 800ff48:	42af      	cmp	r7, r5
 800ff4a:	4681      	mov	r9, r0
 800ff4c:	f04f 0300 	mov.w	r3, #0
 800ff50:	f04f 020a 	mov.w	r2, #10
 800ff54:	4639      	mov	r1, r7
 800ff56:	4658      	mov	r0, fp
 800ff58:	d107      	bne.n	800ff6a <_dtoa_r+0xac2>
 800ff5a:	f000 fc61 	bl	8010820 <__multadd>
 800ff5e:	4607      	mov	r7, r0
 800ff60:	4605      	mov	r5, r0
 800ff62:	9b07      	ldr	r3, [sp, #28]
 800ff64:	3301      	adds	r3, #1
 800ff66:	9307      	str	r3, [sp, #28]
 800ff68:	e774      	b.n	800fe54 <_dtoa_r+0x9ac>
 800ff6a:	f000 fc59 	bl	8010820 <__multadd>
 800ff6e:	4629      	mov	r1, r5
 800ff70:	4607      	mov	r7, r0
 800ff72:	2300      	movs	r3, #0
 800ff74:	220a      	movs	r2, #10
 800ff76:	4658      	mov	r0, fp
 800ff78:	f000 fc52 	bl	8010820 <__multadd>
 800ff7c:	4605      	mov	r5, r0
 800ff7e:	e7f0      	b.n	800ff62 <_dtoa_r+0xaba>
 800ff80:	9b00      	ldr	r3, [sp, #0]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	bfcc      	ite	gt
 800ff86:	461e      	movgt	r6, r3
 800ff88:	2601      	movle	r6, #1
 800ff8a:	4456      	add	r6, sl
 800ff8c:	2700      	movs	r7, #0
 800ff8e:	4649      	mov	r1, r9
 800ff90:	2201      	movs	r2, #1
 800ff92:	4658      	mov	r0, fp
 800ff94:	f000 fe3a 	bl	8010c0c <__lshift>
 800ff98:	4621      	mov	r1, r4
 800ff9a:	4681      	mov	r9, r0
 800ff9c:	f000 fea2 	bl	8010ce4 <__mcmp>
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	dcb0      	bgt.n	800ff06 <_dtoa_r+0xa5e>
 800ffa4:	d102      	bne.n	800ffac <_dtoa_r+0xb04>
 800ffa6:	f018 0f01 	tst.w	r8, #1
 800ffaa:	d1ac      	bne.n	800ff06 <_dtoa_r+0xa5e>
 800ffac:	4633      	mov	r3, r6
 800ffae:	461e      	mov	r6, r3
 800ffb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ffb4:	2a30      	cmp	r2, #48	@ 0x30
 800ffb6:	d0fa      	beq.n	800ffae <_dtoa_r+0xb06>
 800ffb8:	e5c2      	b.n	800fb40 <_dtoa_r+0x698>
 800ffba:	459a      	cmp	sl, r3
 800ffbc:	d1a4      	bne.n	800ff08 <_dtoa_r+0xa60>
 800ffbe:	9b04      	ldr	r3, [sp, #16]
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	9304      	str	r3, [sp, #16]
 800ffc4:	2331      	movs	r3, #49	@ 0x31
 800ffc6:	f88a 3000 	strb.w	r3, [sl]
 800ffca:	e5b9      	b.n	800fb40 <_dtoa_r+0x698>
 800ffcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ffce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801002c <_dtoa_r+0xb84>
 800ffd2:	b11b      	cbz	r3, 800ffdc <_dtoa_r+0xb34>
 800ffd4:	f10a 0308 	add.w	r3, sl, #8
 800ffd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ffda:	6013      	str	r3, [r2, #0]
 800ffdc:	4650      	mov	r0, sl
 800ffde:	b019      	add	sp, #100	@ 0x64
 800ffe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	f77f ae37 	ble.w	800fc5a <_dtoa_r+0x7b2>
 800ffec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffee:	930a      	str	r3, [sp, #40]	@ 0x28
 800fff0:	2001      	movs	r0, #1
 800fff2:	e655      	b.n	800fca0 <_dtoa_r+0x7f8>
 800fff4:	9b00      	ldr	r3, [sp, #0]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	f77f aed6 	ble.w	800fda8 <_dtoa_r+0x900>
 800fffc:	4656      	mov	r6, sl
 800fffe:	4621      	mov	r1, r4
 8010000:	4648      	mov	r0, r9
 8010002:	f7ff f9c9 	bl	800f398 <quorem>
 8010006:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801000a:	f806 8b01 	strb.w	r8, [r6], #1
 801000e:	9b00      	ldr	r3, [sp, #0]
 8010010:	eba6 020a 	sub.w	r2, r6, sl
 8010014:	4293      	cmp	r3, r2
 8010016:	ddb3      	ble.n	800ff80 <_dtoa_r+0xad8>
 8010018:	4649      	mov	r1, r9
 801001a:	2300      	movs	r3, #0
 801001c:	220a      	movs	r2, #10
 801001e:	4658      	mov	r0, fp
 8010020:	f000 fbfe 	bl	8010820 <__multadd>
 8010024:	4681      	mov	r9, r0
 8010026:	e7ea      	b.n	800fffe <_dtoa_r+0xb56>
 8010028:	0801397f 	.word	0x0801397f
 801002c:	08013903 	.word	0x08013903

08010030 <_free_r>:
 8010030:	b538      	push	{r3, r4, r5, lr}
 8010032:	4605      	mov	r5, r0
 8010034:	2900      	cmp	r1, #0
 8010036:	d041      	beq.n	80100bc <_free_r+0x8c>
 8010038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801003c:	1f0c      	subs	r4, r1, #4
 801003e:	2b00      	cmp	r3, #0
 8010040:	bfb8      	it	lt
 8010042:	18e4      	addlt	r4, r4, r3
 8010044:	f7fd fb9a 	bl	800d77c <__malloc_lock>
 8010048:	4a1d      	ldr	r2, [pc, #116]	@ (80100c0 <_free_r+0x90>)
 801004a:	6813      	ldr	r3, [r2, #0]
 801004c:	b933      	cbnz	r3, 801005c <_free_r+0x2c>
 801004e:	6063      	str	r3, [r4, #4]
 8010050:	6014      	str	r4, [r2, #0]
 8010052:	4628      	mov	r0, r5
 8010054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010058:	f7fd bb96 	b.w	800d788 <__malloc_unlock>
 801005c:	42a3      	cmp	r3, r4
 801005e:	d908      	bls.n	8010072 <_free_r+0x42>
 8010060:	6820      	ldr	r0, [r4, #0]
 8010062:	1821      	adds	r1, r4, r0
 8010064:	428b      	cmp	r3, r1
 8010066:	bf01      	itttt	eq
 8010068:	6819      	ldreq	r1, [r3, #0]
 801006a:	685b      	ldreq	r3, [r3, #4]
 801006c:	1809      	addeq	r1, r1, r0
 801006e:	6021      	streq	r1, [r4, #0]
 8010070:	e7ed      	b.n	801004e <_free_r+0x1e>
 8010072:	461a      	mov	r2, r3
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	b10b      	cbz	r3, 801007c <_free_r+0x4c>
 8010078:	42a3      	cmp	r3, r4
 801007a:	d9fa      	bls.n	8010072 <_free_r+0x42>
 801007c:	6811      	ldr	r1, [r2, #0]
 801007e:	1850      	adds	r0, r2, r1
 8010080:	42a0      	cmp	r0, r4
 8010082:	d10b      	bne.n	801009c <_free_r+0x6c>
 8010084:	6820      	ldr	r0, [r4, #0]
 8010086:	4401      	add	r1, r0
 8010088:	1850      	adds	r0, r2, r1
 801008a:	4283      	cmp	r3, r0
 801008c:	6011      	str	r1, [r2, #0]
 801008e:	d1e0      	bne.n	8010052 <_free_r+0x22>
 8010090:	6818      	ldr	r0, [r3, #0]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	6053      	str	r3, [r2, #4]
 8010096:	4408      	add	r0, r1
 8010098:	6010      	str	r0, [r2, #0]
 801009a:	e7da      	b.n	8010052 <_free_r+0x22>
 801009c:	d902      	bls.n	80100a4 <_free_r+0x74>
 801009e:	230c      	movs	r3, #12
 80100a0:	602b      	str	r3, [r5, #0]
 80100a2:	e7d6      	b.n	8010052 <_free_r+0x22>
 80100a4:	6820      	ldr	r0, [r4, #0]
 80100a6:	1821      	adds	r1, r4, r0
 80100a8:	428b      	cmp	r3, r1
 80100aa:	bf04      	itt	eq
 80100ac:	6819      	ldreq	r1, [r3, #0]
 80100ae:	685b      	ldreq	r3, [r3, #4]
 80100b0:	6063      	str	r3, [r4, #4]
 80100b2:	bf04      	itt	eq
 80100b4:	1809      	addeq	r1, r1, r0
 80100b6:	6021      	streq	r1, [r4, #0]
 80100b8:	6054      	str	r4, [r2, #4]
 80100ba:	e7ca      	b.n	8010052 <_free_r+0x22>
 80100bc:	bd38      	pop	{r3, r4, r5, pc}
 80100be:	bf00      	nop
 80100c0:	20005618 	.word	0x20005618

080100c4 <rshift>:
 80100c4:	6903      	ldr	r3, [r0, #16]
 80100c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80100ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80100d2:	f100 0414 	add.w	r4, r0, #20
 80100d6:	dd45      	ble.n	8010164 <rshift+0xa0>
 80100d8:	f011 011f 	ands.w	r1, r1, #31
 80100dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80100e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80100e4:	d10c      	bne.n	8010100 <rshift+0x3c>
 80100e6:	f100 0710 	add.w	r7, r0, #16
 80100ea:	4629      	mov	r1, r5
 80100ec:	42b1      	cmp	r1, r6
 80100ee:	d334      	bcc.n	801015a <rshift+0x96>
 80100f0:	1a9b      	subs	r3, r3, r2
 80100f2:	009b      	lsls	r3, r3, #2
 80100f4:	1eea      	subs	r2, r5, #3
 80100f6:	4296      	cmp	r6, r2
 80100f8:	bf38      	it	cc
 80100fa:	2300      	movcc	r3, #0
 80100fc:	4423      	add	r3, r4
 80100fe:	e015      	b.n	801012c <rshift+0x68>
 8010100:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010104:	f1c1 0820 	rsb	r8, r1, #32
 8010108:	40cf      	lsrs	r7, r1
 801010a:	f105 0e04 	add.w	lr, r5, #4
 801010e:	46a1      	mov	r9, r4
 8010110:	4576      	cmp	r6, lr
 8010112:	46f4      	mov	ip, lr
 8010114:	d815      	bhi.n	8010142 <rshift+0x7e>
 8010116:	1a9a      	subs	r2, r3, r2
 8010118:	0092      	lsls	r2, r2, #2
 801011a:	3a04      	subs	r2, #4
 801011c:	3501      	adds	r5, #1
 801011e:	42ae      	cmp	r6, r5
 8010120:	bf38      	it	cc
 8010122:	2200      	movcc	r2, #0
 8010124:	18a3      	adds	r3, r4, r2
 8010126:	50a7      	str	r7, [r4, r2]
 8010128:	b107      	cbz	r7, 801012c <rshift+0x68>
 801012a:	3304      	adds	r3, #4
 801012c:	1b1a      	subs	r2, r3, r4
 801012e:	42a3      	cmp	r3, r4
 8010130:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010134:	bf08      	it	eq
 8010136:	2300      	moveq	r3, #0
 8010138:	6102      	str	r2, [r0, #16]
 801013a:	bf08      	it	eq
 801013c:	6143      	streq	r3, [r0, #20]
 801013e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010142:	f8dc c000 	ldr.w	ip, [ip]
 8010146:	fa0c fc08 	lsl.w	ip, ip, r8
 801014a:	ea4c 0707 	orr.w	r7, ip, r7
 801014e:	f849 7b04 	str.w	r7, [r9], #4
 8010152:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010156:	40cf      	lsrs	r7, r1
 8010158:	e7da      	b.n	8010110 <rshift+0x4c>
 801015a:	f851 cb04 	ldr.w	ip, [r1], #4
 801015e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010162:	e7c3      	b.n	80100ec <rshift+0x28>
 8010164:	4623      	mov	r3, r4
 8010166:	e7e1      	b.n	801012c <rshift+0x68>

08010168 <__hexdig_fun>:
 8010168:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801016c:	2b09      	cmp	r3, #9
 801016e:	d802      	bhi.n	8010176 <__hexdig_fun+0xe>
 8010170:	3820      	subs	r0, #32
 8010172:	b2c0      	uxtb	r0, r0
 8010174:	4770      	bx	lr
 8010176:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801017a:	2b05      	cmp	r3, #5
 801017c:	d801      	bhi.n	8010182 <__hexdig_fun+0x1a>
 801017e:	3847      	subs	r0, #71	@ 0x47
 8010180:	e7f7      	b.n	8010172 <__hexdig_fun+0xa>
 8010182:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010186:	2b05      	cmp	r3, #5
 8010188:	d801      	bhi.n	801018e <__hexdig_fun+0x26>
 801018a:	3827      	subs	r0, #39	@ 0x27
 801018c:	e7f1      	b.n	8010172 <__hexdig_fun+0xa>
 801018e:	2000      	movs	r0, #0
 8010190:	4770      	bx	lr
	...

08010194 <__gethex>:
 8010194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010198:	b085      	sub	sp, #20
 801019a:	468a      	mov	sl, r1
 801019c:	9302      	str	r3, [sp, #8]
 801019e:	680b      	ldr	r3, [r1, #0]
 80101a0:	9001      	str	r0, [sp, #4]
 80101a2:	4690      	mov	r8, r2
 80101a4:	1c9c      	adds	r4, r3, #2
 80101a6:	46a1      	mov	r9, r4
 80101a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80101ac:	2830      	cmp	r0, #48	@ 0x30
 80101ae:	d0fa      	beq.n	80101a6 <__gethex+0x12>
 80101b0:	eba9 0303 	sub.w	r3, r9, r3
 80101b4:	f1a3 0b02 	sub.w	fp, r3, #2
 80101b8:	f7ff ffd6 	bl	8010168 <__hexdig_fun>
 80101bc:	4605      	mov	r5, r0
 80101be:	2800      	cmp	r0, #0
 80101c0:	d168      	bne.n	8010294 <__gethex+0x100>
 80101c2:	49a0      	ldr	r1, [pc, #640]	@ (8010444 <__gethex+0x2b0>)
 80101c4:	2201      	movs	r2, #1
 80101c6:	4648      	mov	r0, r9
 80101c8:	f7fe ffe0 	bl	800f18c <strncmp>
 80101cc:	4607      	mov	r7, r0
 80101ce:	2800      	cmp	r0, #0
 80101d0:	d167      	bne.n	80102a2 <__gethex+0x10e>
 80101d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80101d6:	4626      	mov	r6, r4
 80101d8:	f7ff ffc6 	bl	8010168 <__hexdig_fun>
 80101dc:	2800      	cmp	r0, #0
 80101de:	d062      	beq.n	80102a6 <__gethex+0x112>
 80101e0:	4623      	mov	r3, r4
 80101e2:	7818      	ldrb	r0, [r3, #0]
 80101e4:	2830      	cmp	r0, #48	@ 0x30
 80101e6:	4699      	mov	r9, r3
 80101e8:	f103 0301 	add.w	r3, r3, #1
 80101ec:	d0f9      	beq.n	80101e2 <__gethex+0x4e>
 80101ee:	f7ff ffbb 	bl	8010168 <__hexdig_fun>
 80101f2:	fab0 f580 	clz	r5, r0
 80101f6:	096d      	lsrs	r5, r5, #5
 80101f8:	f04f 0b01 	mov.w	fp, #1
 80101fc:	464a      	mov	r2, r9
 80101fe:	4616      	mov	r6, r2
 8010200:	3201      	adds	r2, #1
 8010202:	7830      	ldrb	r0, [r6, #0]
 8010204:	f7ff ffb0 	bl	8010168 <__hexdig_fun>
 8010208:	2800      	cmp	r0, #0
 801020a:	d1f8      	bne.n	80101fe <__gethex+0x6a>
 801020c:	498d      	ldr	r1, [pc, #564]	@ (8010444 <__gethex+0x2b0>)
 801020e:	2201      	movs	r2, #1
 8010210:	4630      	mov	r0, r6
 8010212:	f7fe ffbb 	bl	800f18c <strncmp>
 8010216:	2800      	cmp	r0, #0
 8010218:	d13f      	bne.n	801029a <__gethex+0x106>
 801021a:	b944      	cbnz	r4, 801022e <__gethex+0x9a>
 801021c:	1c74      	adds	r4, r6, #1
 801021e:	4622      	mov	r2, r4
 8010220:	4616      	mov	r6, r2
 8010222:	3201      	adds	r2, #1
 8010224:	7830      	ldrb	r0, [r6, #0]
 8010226:	f7ff ff9f 	bl	8010168 <__hexdig_fun>
 801022a:	2800      	cmp	r0, #0
 801022c:	d1f8      	bne.n	8010220 <__gethex+0x8c>
 801022e:	1ba4      	subs	r4, r4, r6
 8010230:	00a7      	lsls	r7, r4, #2
 8010232:	7833      	ldrb	r3, [r6, #0]
 8010234:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010238:	2b50      	cmp	r3, #80	@ 0x50
 801023a:	d13e      	bne.n	80102ba <__gethex+0x126>
 801023c:	7873      	ldrb	r3, [r6, #1]
 801023e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010240:	d033      	beq.n	80102aa <__gethex+0x116>
 8010242:	2b2d      	cmp	r3, #45	@ 0x2d
 8010244:	d034      	beq.n	80102b0 <__gethex+0x11c>
 8010246:	1c71      	adds	r1, r6, #1
 8010248:	2400      	movs	r4, #0
 801024a:	7808      	ldrb	r0, [r1, #0]
 801024c:	f7ff ff8c 	bl	8010168 <__hexdig_fun>
 8010250:	1e43      	subs	r3, r0, #1
 8010252:	b2db      	uxtb	r3, r3
 8010254:	2b18      	cmp	r3, #24
 8010256:	d830      	bhi.n	80102ba <__gethex+0x126>
 8010258:	f1a0 0210 	sub.w	r2, r0, #16
 801025c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010260:	f7ff ff82 	bl	8010168 <__hexdig_fun>
 8010264:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8010268:	fa5f fc8c 	uxtb.w	ip, ip
 801026c:	f1bc 0f18 	cmp.w	ip, #24
 8010270:	f04f 030a 	mov.w	r3, #10
 8010274:	d91e      	bls.n	80102b4 <__gethex+0x120>
 8010276:	b104      	cbz	r4, 801027a <__gethex+0xe6>
 8010278:	4252      	negs	r2, r2
 801027a:	4417      	add	r7, r2
 801027c:	f8ca 1000 	str.w	r1, [sl]
 8010280:	b1ed      	cbz	r5, 80102be <__gethex+0x12a>
 8010282:	f1bb 0f00 	cmp.w	fp, #0
 8010286:	bf0c      	ite	eq
 8010288:	2506      	moveq	r5, #6
 801028a:	2500      	movne	r5, #0
 801028c:	4628      	mov	r0, r5
 801028e:	b005      	add	sp, #20
 8010290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010294:	2500      	movs	r5, #0
 8010296:	462c      	mov	r4, r5
 8010298:	e7b0      	b.n	80101fc <__gethex+0x68>
 801029a:	2c00      	cmp	r4, #0
 801029c:	d1c7      	bne.n	801022e <__gethex+0x9a>
 801029e:	4627      	mov	r7, r4
 80102a0:	e7c7      	b.n	8010232 <__gethex+0x9e>
 80102a2:	464e      	mov	r6, r9
 80102a4:	462f      	mov	r7, r5
 80102a6:	2501      	movs	r5, #1
 80102a8:	e7c3      	b.n	8010232 <__gethex+0x9e>
 80102aa:	2400      	movs	r4, #0
 80102ac:	1cb1      	adds	r1, r6, #2
 80102ae:	e7cc      	b.n	801024a <__gethex+0xb6>
 80102b0:	2401      	movs	r4, #1
 80102b2:	e7fb      	b.n	80102ac <__gethex+0x118>
 80102b4:	fb03 0002 	mla	r0, r3, r2, r0
 80102b8:	e7ce      	b.n	8010258 <__gethex+0xc4>
 80102ba:	4631      	mov	r1, r6
 80102bc:	e7de      	b.n	801027c <__gethex+0xe8>
 80102be:	eba6 0309 	sub.w	r3, r6, r9
 80102c2:	3b01      	subs	r3, #1
 80102c4:	4629      	mov	r1, r5
 80102c6:	2b07      	cmp	r3, #7
 80102c8:	dc0a      	bgt.n	80102e0 <__gethex+0x14c>
 80102ca:	9801      	ldr	r0, [sp, #4]
 80102cc:	f000 fa46 	bl	801075c <_Balloc>
 80102d0:	4604      	mov	r4, r0
 80102d2:	b940      	cbnz	r0, 80102e6 <__gethex+0x152>
 80102d4:	4b5c      	ldr	r3, [pc, #368]	@ (8010448 <__gethex+0x2b4>)
 80102d6:	4602      	mov	r2, r0
 80102d8:	21e4      	movs	r1, #228	@ 0xe4
 80102da:	485c      	ldr	r0, [pc, #368]	@ (801044c <__gethex+0x2b8>)
 80102dc:	f001 fe76 	bl	8011fcc <__assert_func>
 80102e0:	3101      	adds	r1, #1
 80102e2:	105b      	asrs	r3, r3, #1
 80102e4:	e7ef      	b.n	80102c6 <__gethex+0x132>
 80102e6:	f100 0a14 	add.w	sl, r0, #20
 80102ea:	2300      	movs	r3, #0
 80102ec:	4655      	mov	r5, sl
 80102ee:	469b      	mov	fp, r3
 80102f0:	45b1      	cmp	r9, r6
 80102f2:	d337      	bcc.n	8010364 <__gethex+0x1d0>
 80102f4:	f845 bb04 	str.w	fp, [r5], #4
 80102f8:	eba5 050a 	sub.w	r5, r5, sl
 80102fc:	10ad      	asrs	r5, r5, #2
 80102fe:	6125      	str	r5, [r4, #16]
 8010300:	4658      	mov	r0, fp
 8010302:	f000 fb1d 	bl	8010940 <__hi0bits>
 8010306:	016d      	lsls	r5, r5, #5
 8010308:	f8d8 6000 	ldr.w	r6, [r8]
 801030c:	1a2d      	subs	r5, r5, r0
 801030e:	42b5      	cmp	r5, r6
 8010310:	dd54      	ble.n	80103bc <__gethex+0x228>
 8010312:	1bad      	subs	r5, r5, r6
 8010314:	4629      	mov	r1, r5
 8010316:	4620      	mov	r0, r4
 8010318:	f000 feb1 	bl	801107e <__any_on>
 801031c:	4681      	mov	r9, r0
 801031e:	b178      	cbz	r0, 8010340 <__gethex+0x1ac>
 8010320:	1e6b      	subs	r3, r5, #1
 8010322:	1159      	asrs	r1, r3, #5
 8010324:	f003 021f 	and.w	r2, r3, #31
 8010328:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801032c:	f04f 0901 	mov.w	r9, #1
 8010330:	fa09 f202 	lsl.w	r2, r9, r2
 8010334:	420a      	tst	r2, r1
 8010336:	d003      	beq.n	8010340 <__gethex+0x1ac>
 8010338:	454b      	cmp	r3, r9
 801033a:	dc36      	bgt.n	80103aa <__gethex+0x216>
 801033c:	f04f 0902 	mov.w	r9, #2
 8010340:	4629      	mov	r1, r5
 8010342:	4620      	mov	r0, r4
 8010344:	f7ff febe 	bl	80100c4 <rshift>
 8010348:	442f      	add	r7, r5
 801034a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801034e:	42bb      	cmp	r3, r7
 8010350:	da42      	bge.n	80103d8 <__gethex+0x244>
 8010352:	9801      	ldr	r0, [sp, #4]
 8010354:	4621      	mov	r1, r4
 8010356:	f000 fa41 	bl	80107dc <_Bfree>
 801035a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801035c:	2300      	movs	r3, #0
 801035e:	6013      	str	r3, [r2, #0]
 8010360:	25a3      	movs	r5, #163	@ 0xa3
 8010362:	e793      	b.n	801028c <__gethex+0xf8>
 8010364:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010368:	2a2e      	cmp	r2, #46	@ 0x2e
 801036a:	d012      	beq.n	8010392 <__gethex+0x1fe>
 801036c:	2b20      	cmp	r3, #32
 801036e:	d104      	bne.n	801037a <__gethex+0x1e6>
 8010370:	f845 bb04 	str.w	fp, [r5], #4
 8010374:	f04f 0b00 	mov.w	fp, #0
 8010378:	465b      	mov	r3, fp
 801037a:	7830      	ldrb	r0, [r6, #0]
 801037c:	9303      	str	r3, [sp, #12]
 801037e:	f7ff fef3 	bl	8010168 <__hexdig_fun>
 8010382:	9b03      	ldr	r3, [sp, #12]
 8010384:	f000 000f 	and.w	r0, r0, #15
 8010388:	4098      	lsls	r0, r3
 801038a:	ea4b 0b00 	orr.w	fp, fp, r0
 801038e:	3304      	adds	r3, #4
 8010390:	e7ae      	b.n	80102f0 <__gethex+0x15c>
 8010392:	45b1      	cmp	r9, r6
 8010394:	d8ea      	bhi.n	801036c <__gethex+0x1d8>
 8010396:	492b      	ldr	r1, [pc, #172]	@ (8010444 <__gethex+0x2b0>)
 8010398:	9303      	str	r3, [sp, #12]
 801039a:	2201      	movs	r2, #1
 801039c:	4630      	mov	r0, r6
 801039e:	f7fe fef5 	bl	800f18c <strncmp>
 80103a2:	9b03      	ldr	r3, [sp, #12]
 80103a4:	2800      	cmp	r0, #0
 80103a6:	d1e1      	bne.n	801036c <__gethex+0x1d8>
 80103a8:	e7a2      	b.n	80102f0 <__gethex+0x15c>
 80103aa:	1ea9      	subs	r1, r5, #2
 80103ac:	4620      	mov	r0, r4
 80103ae:	f000 fe66 	bl	801107e <__any_on>
 80103b2:	2800      	cmp	r0, #0
 80103b4:	d0c2      	beq.n	801033c <__gethex+0x1a8>
 80103b6:	f04f 0903 	mov.w	r9, #3
 80103ba:	e7c1      	b.n	8010340 <__gethex+0x1ac>
 80103bc:	da09      	bge.n	80103d2 <__gethex+0x23e>
 80103be:	1b75      	subs	r5, r6, r5
 80103c0:	4621      	mov	r1, r4
 80103c2:	9801      	ldr	r0, [sp, #4]
 80103c4:	462a      	mov	r2, r5
 80103c6:	f000 fc21 	bl	8010c0c <__lshift>
 80103ca:	1b7f      	subs	r7, r7, r5
 80103cc:	4604      	mov	r4, r0
 80103ce:	f100 0a14 	add.w	sl, r0, #20
 80103d2:	f04f 0900 	mov.w	r9, #0
 80103d6:	e7b8      	b.n	801034a <__gethex+0x1b6>
 80103d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80103dc:	42bd      	cmp	r5, r7
 80103de:	dd6f      	ble.n	80104c0 <__gethex+0x32c>
 80103e0:	1bed      	subs	r5, r5, r7
 80103e2:	42ae      	cmp	r6, r5
 80103e4:	dc34      	bgt.n	8010450 <__gethex+0x2bc>
 80103e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80103ea:	2b02      	cmp	r3, #2
 80103ec:	d022      	beq.n	8010434 <__gethex+0x2a0>
 80103ee:	2b03      	cmp	r3, #3
 80103f0:	d024      	beq.n	801043c <__gethex+0x2a8>
 80103f2:	2b01      	cmp	r3, #1
 80103f4:	d115      	bne.n	8010422 <__gethex+0x28e>
 80103f6:	42ae      	cmp	r6, r5
 80103f8:	d113      	bne.n	8010422 <__gethex+0x28e>
 80103fa:	2e01      	cmp	r6, #1
 80103fc:	d10b      	bne.n	8010416 <__gethex+0x282>
 80103fe:	9a02      	ldr	r2, [sp, #8]
 8010400:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010404:	6013      	str	r3, [r2, #0]
 8010406:	2301      	movs	r3, #1
 8010408:	6123      	str	r3, [r4, #16]
 801040a:	f8ca 3000 	str.w	r3, [sl]
 801040e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010410:	2562      	movs	r5, #98	@ 0x62
 8010412:	601c      	str	r4, [r3, #0]
 8010414:	e73a      	b.n	801028c <__gethex+0xf8>
 8010416:	1e71      	subs	r1, r6, #1
 8010418:	4620      	mov	r0, r4
 801041a:	f000 fe30 	bl	801107e <__any_on>
 801041e:	2800      	cmp	r0, #0
 8010420:	d1ed      	bne.n	80103fe <__gethex+0x26a>
 8010422:	9801      	ldr	r0, [sp, #4]
 8010424:	4621      	mov	r1, r4
 8010426:	f000 f9d9 	bl	80107dc <_Bfree>
 801042a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801042c:	2300      	movs	r3, #0
 801042e:	6013      	str	r3, [r2, #0]
 8010430:	2550      	movs	r5, #80	@ 0x50
 8010432:	e72b      	b.n	801028c <__gethex+0xf8>
 8010434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010436:	2b00      	cmp	r3, #0
 8010438:	d1f3      	bne.n	8010422 <__gethex+0x28e>
 801043a:	e7e0      	b.n	80103fe <__gethex+0x26a>
 801043c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801043e:	2b00      	cmp	r3, #0
 8010440:	d1dd      	bne.n	80103fe <__gethex+0x26a>
 8010442:	e7ee      	b.n	8010422 <__gethex+0x28e>
 8010444:	08013774 	.word	0x08013774
 8010448:	0801397f 	.word	0x0801397f
 801044c:	08013990 	.word	0x08013990
 8010450:	1e6f      	subs	r7, r5, #1
 8010452:	f1b9 0f00 	cmp.w	r9, #0
 8010456:	d130      	bne.n	80104ba <__gethex+0x326>
 8010458:	b127      	cbz	r7, 8010464 <__gethex+0x2d0>
 801045a:	4639      	mov	r1, r7
 801045c:	4620      	mov	r0, r4
 801045e:	f000 fe0e 	bl	801107e <__any_on>
 8010462:	4681      	mov	r9, r0
 8010464:	117a      	asrs	r2, r7, #5
 8010466:	2301      	movs	r3, #1
 8010468:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801046c:	f007 071f 	and.w	r7, r7, #31
 8010470:	40bb      	lsls	r3, r7
 8010472:	4213      	tst	r3, r2
 8010474:	4629      	mov	r1, r5
 8010476:	4620      	mov	r0, r4
 8010478:	bf18      	it	ne
 801047a:	f049 0902 	orrne.w	r9, r9, #2
 801047e:	f7ff fe21 	bl	80100c4 <rshift>
 8010482:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010486:	1b76      	subs	r6, r6, r5
 8010488:	2502      	movs	r5, #2
 801048a:	f1b9 0f00 	cmp.w	r9, #0
 801048e:	d047      	beq.n	8010520 <__gethex+0x38c>
 8010490:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010494:	2b02      	cmp	r3, #2
 8010496:	d015      	beq.n	80104c4 <__gethex+0x330>
 8010498:	2b03      	cmp	r3, #3
 801049a:	d017      	beq.n	80104cc <__gethex+0x338>
 801049c:	2b01      	cmp	r3, #1
 801049e:	d109      	bne.n	80104b4 <__gethex+0x320>
 80104a0:	f019 0f02 	tst.w	r9, #2
 80104a4:	d006      	beq.n	80104b4 <__gethex+0x320>
 80104a6:	f8da 3000 	ldr.w	r3, [sl]
 80104aa:	ea49 0903 	orr.w	r9, r9, r3
 80104ae:	f019 0f01 	tst.w	r9, #1
 80104b2:	d10e      	bne.n	80104d2 <__gethex+0x33e>
 80104b4:	f045 0510 	orr.w	r5, r5, #16
 80104b8:	e032      	b.n	8010520 <__gethex+0x38c>
 80104ba:	f04f 0901 	mov.w	r9, #1
 80104be:	e7d1      	b.n	8010464 <__gethex+0x2d0>
 80104c0:	2501      	movs	r5, #1
 80104c2:	e7e2      	b.n	801048a <__gethex+0x2f6>
 80104c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104c6:	f1c3 0301 	rsb	r3, r3, #1
 80104ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80104cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d0f0      	beq.n	80104b4 <__gethex+0x320>
 80104d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80104d6:	f104 0314 	add.w	r3, r4, #20
 80104da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80104de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80104e2:	f04f 0c00 	mov.w	ip, #0
 80104e6:	4618      	mov	r0, r3
 80104e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80104ec:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80104f0:	d01b      	beq.n	801052a <__gethex+0x396>
 80104f2:	3201      	adds	r2, #1
 80104f4:	6002      	str	r2, [r0, #0]
 80104f6:	2d02      	cmp	r5, #2
 80104f8:	f104 0314 	add.w	r3, r4, #20
 80104fc:	d13c      	bne.n	8010578 <__gethex+0x3e4>
 80104fe:	f8d8 2000 	ldr.w	r2, [r8]
 8010502:	3a01      	subs	r2, #1
 8010504:	42b2      	cmp	r2, r6
 8010506:	d109      	bne.n	801051c <__gethex+0x388>
 8010508:	1171      	asrs	r1, r6, #5
 801050a:	2201      	movs	r2, #1
 801050c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010510:	f006 061f 	and.w	r6, r6, #31
 8010514:	fa02 f606 	lsl.w	r6, r2, r6
 8010518:	421e      	tst	r6, r3
 801051a:	d13a      	bne.n	8010592 <__gethex+0x3fe>
 801051c:	f045 0520 	orr.w	r5, r5, #32
 8010520:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010522:	601c      	str	r4, [r3, #0]
 8010524:	9b02      	ldr	r3, [sp, #8]
 8010526:	601f      	str	r7, [r3, #0]
 8010528:	e6b0      	b.n	801028c <__gethex+0xf8>
 801052a:	4299      	cmp	r1, r3
 801052c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010530:	d8d9      	bhi.n	80104e6 <__gethex+0x352>
 8010532:	68a3      	ldr	r3, [r4, #8]
 8010534:	459b      	cmp	fp, r3
 8010536:	db17      	blt.n	8010568 <__gethex+0x3d4>
 8010538:	6861      	ldr	r1, [r4, #4]
 801053a:	9801      	ldr	r0, [sp, #4]
 801053c:	3101      	adds	r1, #1
 801053e:	f000 f90d 	bl	801075c <_Balloc>
 8010542:	4681      	mov	r9, r0
 8010544:	b918      	cbnz	r0, 801054e <__gethex+0x3ba>
 8010546:	4b1a      	ldr	r3, [pc, #104]	@ (80105b0 <__gethex+0x41c>)
 8010548:	4602      	mov	r2, r0
 801054a:	2184      	movs	r1, #132	@ 0x84
 801054c:	e6c5      	b.n	80102da <__gethex+0x146>
 801054e:	6922      	ldr	r2, [r4, #16]
 8010550:	3202      	adds	r2, #2
 8010552:	f104 010c 	add.w	r1, r4, #12
 8010556:	0092      	lsls	r2, r2, #2
 8010558:	300c      	adds	r0, #12
 801055a:	f7fe ff06 	bl	800f36a <memcpy>
 801055e:	4621      	mov	r1, r4
 8010560:	9801      	ldr	r0, [sp, #4]
 8010562:	f000 f93b 	bl	80107dc <_Bfree>
 8010566:	464c      	mov	r4, r9
 8010568:	6923      	ldr	r3, [r4, #16]
 801056a:	1c5a      	adds	r2, r3, #1
 801056c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010570:	6122      	str	r2, [r4, #16]
 8010572:	2201      	movs	r2, #1
 8010574:	615a      	str	r2, [r3, #20]
 8010576:	e7be      	b.n	80104f6 <__gethex+0x362>
 8010578:	6922      	ldr	r2, [r4, #16]
 801057a:	455a      	cmp	r2, fp
 801057c:	dd0b      	ble.n	8010596 <__gethex+0x402>
 801057e:	2101      	movs	r1, #1
 8010580:	4620      	mov	r0, r4
 8010582:	f7ff fd9f 	bl	80100c4 <rshift>
 8010586:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801058a:	3701      	adds	r7, #1
 801058c:	42bb      	cmp	r3, r7
 801058e:	f6ff aee0 	blt.w	8010352 <__gethex+0x1be>
 8010592:	2501      	movs	r5, #1
 8010594:	e7c2      	b.n	801051c <__gethex+0x388>
 8010596:	f016 061f 	ands.w	r6, r6, #31
 801059a:	d0fa      	beq.n	8010592 <__gethex+0x3fe>
 801059c:	4453      	add	r3, sl
 801059e:	f1c6 0620 	rsb	r6, r6, #32
 80105a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80105a6:	f000 f9cb 	bl	8010940 <__hi0bits>
 80105aa:	42b0      	cmp	r0, r6
 80105ac:	dbe7      	blt.n	801057e <__gethex+0x3ea>
 80105ae:	e7f0      	b.n	8010592 <__gethex+0x3fe>
 80105b0:	0801397f 	.word	0x0801397f

080105b4 <L_shift>:
 80105b4:	f1c2 0208 	rsb	r2, r2, #8
 80105b8:	0092      	lsls	r2, r2, #2
 80105ba:	b570      	push	{r4, r5, r6, lr}
 80105bc:	f1c2 0620 	rsb	r6, r2, #32
 80105c0:	6843      	ldr	r3, [r0, #4]
 80105c2:	6804      	ldr	r4, [r0, #0]
 80105c4:	fa03 f506 	lsl.w	r5, r3, r6
 80105c8:	432c      	orrs	r4, r5
 80105ca:	40d3      	lsrs	r3, r2
 80105cc:	6004      	str	r4, [r0, #0]
 80105ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80105d2:	4288      	cmp	r0, r1
 80105d4:	d3f4      	bcc.n	80105c0 <L_shift+0xc>
 80105d6:	bd70      	pop	{r4, r5, r6, pc}

080105d8 <__match>:
 80105d8:	b530      	push	{r4, r5, lr}
 80105da:	6803      	ldr	r3, [r0, #0]
 80105dc:	3301      	adds	r3, #1
 80105de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105e2:	b914      	cbnz	r4, 80105ea <__match+0x12>
 80105e4:	6003      	str	r3, [r0, #0]
 80105e6:	2001      	movs	r0, #1
 80105e8:	bd30      	pop	{r4, r5, pc}
 80105ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80105f2:	2d19      	cmp	r5, #25
 80105f4:	bf98      	it	ls
 80105f6:	3220      	addls	r2, #32
 80105f8:	42a2      	cmp	r2, r4
 80105fa:	d0f0      	beq.n	80105de <__match+0x6>
 80105fc:	2000      	movs	r0, #0
 80105fe:	e7f3      	b.n	80105e8 <__match+0x10>

08010600 <__hexnan>:
 8010600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010604:	680b      	ldr	r3, [r1, #0]
 8010606:	6801      	ldr	r1, [r0, #0]
 8010608:	115e      	asrs	r6, r3, #5
 801060a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801060e:	f013 031f 	ands.w	r3, r3, #31
 8010612:	b087      	sub	sp, #28
 8010614:	bf18      	it	ne
 8010616:	3604      	addne	r6, #4
 8010618:	2500      	movs	r5, #0
 801061a:	1f37      	subs	r7, r6, #4
 801061c:	4682      	mov	sl, r0
 801061e:	4690      	mov	r8, r2
 8010620:	9301      	str	r3, [sp, #4]
 8010622:	f846 5c04 	str.w	r5, [r6, #-4]
 8010626:	46b9      	mov	r9, r7
 8010628:	463c      	mov	r4, r7
 801062a:	9502      	str	r5, [sp, #8]
 801062c:	46ab      	mov	fp, r5
 801062e:	784a      	ldrb	r2, [r1, #1]
 8010630:	1c4b      	adds	r3, r1, #1
 8010632:	9303      	str	r3, [sp, #12]
 8010634:	b342      	cbz	r2, 8010688 <__hexnan+0x88>
 8010636:	4610      	mov	r0, r2
 8010638:	9105      	str	r1, [sp, #20]
 801063a:	9204      	str	r2, [sp, #16]
 801063c:	f7ff fd94 	bl	8010168 <__hexdig_fun>
 8010640:	2800      	cmp	r0, #0
 8010642:	d151      	bne.n	80106e8 <__hexnan+0xe8>
 8010644:	9a04      	ldr	r2, [sp, #16]
 8010646:	9905      	ldr	r1, [sp, #20]
 8010648:	2a20      	cmp	r2, #32
 801064a:	d818      	bhi.n	801067e <__hexnan+0x7e>
 801064c:	9b02      	ldr	r3, [sp, #8]
 801064e:	459b      	cmp	fp, r3
 8010650:	dd13      	ble.n	801067a <__hexnan+0x7a>
 8010652:	454c      	cmp	r4, r9
 8010654:	d206      	bcs.n	8010664 <__hexnan+0x64>
 8010656:	2d07      	cmp	r5, #7
 8010658:	dc04      	bgt.n	8010664 <__hexnan+0x64>
 801065a:	462a      	mov	r2, r5
 801065c:	4649      	mov	r1, r9
 801065e:	4620      	mov	r0, r4
 8010660:	f7ff ffa8 	bl	80105b4 <L_shift>
 8010664:	4544      	cmp	r4, r8
 8010666:	d952      	bls.n	801070e <__hexnan+0x10e>
 8010668:	2300      	movs	r3, #0
 801066a:	f1a4 0904 	sub.w	r9, r4, #4
 801066e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010672:	f8cd b008 	str.w	fp, [sp, #8]
 8010676:	464c      	mov	r4, r9
 8010678:	461d      	mov	r5, r3
 801067a:	9903      	ldr	r1, [sp, #12]
 801067c:	e7d7      	b.n	801062e <__hexnan+0x2e>
 801067e:	2a29      	cmp	r2, #41	@ 0x29
 8010680:	d157      	bne.n	8010732 <__hexnan+0x132>
 8010682:	3102      	adds	r1, #2
 8010684:	f8ca 1000 	str.w	r1, [sl]
 8010688:	f1bb 0f00 	cmp.w	fp, #0
 801068c:	d051      	beq.n	8010732 <__hexnan+0x132>
 801068e:	454c      	cmp	r4, r9
 8010690:	d206      	bcs.n	80106a0 <__hexnan+0xa0>
 8010692:	2d07      	cmp	r5, #7
 8010694:	dc04      	bgt.n	80106a0 <__hexnan+0xa0>
 8010696:	462a      	mov	r2, r5
 8010698:	4649      	mov	r1, r9
 801069a:	4620      	mov	r0, r4
 801069c:	f7ff ff8a 	bl	80105b4 <L_shift>
 80106a0:	4544      	cmp	r4, r8
 80106a2:	d936      	bls.n	8010712 <__hexnan+0x112>
 80106a4:	f1a8 0204 	sub.w	r2, r8, #4
 80106a8:	4623      	mov	r3, r4
 80106aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80106ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80106b2:	429f      	cmp	r7, r3
 80106b4:	d2f9      	bcs.n	80106aa <__hexnan+0xaa>
 80106b6:	1b3b      	subs	r3, r7, r4
 80106b8:	f023 0303 	bic.w	r3, r3, #3
 80106bc:	3304      	adds	r3, #4
 80106be:	3401      	adds	r4, #1
 80106c0:	3e03      	subs	r6, #3
 80106c2:	42b4      	cmp	r4, r6
 80106c4:	bf88      	it	hi
 80106c6:	2304      	movhi	r3, #4
 80106c8:	4443      	add	r3, r8
 80106ca:	2200      	movs	r2, #0
 80106cc:	f843 2b04 	str.w	r2, [r3], #4
 80106d0:	429f      	cmp	r7, r3
 80106d2:	d2fb      	bcs.n	80106cc <__hexnan+0xcc>
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	b91b      	cbnz	r3, 80106e0 <__hexnan+0xe0>
 80106d8:	4547      	cmp	r7, r8
 80106da:	d128      	bne.n	801072e <__hexnan+0x12e>
 80106dc:	2301      	movs	r3, #1
 80106de:	603b      	str	r3, [r7, #0]
 80106e0:	2005      	movs	r0, #5
 80106e2:	b007      	add	sp, #28
 80106e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106e8:	3501      	adds	r5, #1
 80106ea:	2d08      	cmp	r5, #8
 80106ec:	f10b 0b01 	add.w	fp, fp, #1
 80106f0:	dd06      	ble.n	8010700 <__hexnan+0x100>
 80106f2:	4544      	cmp	r4, r8
 80106f4:	d9c1      	bls.n	801067a <__hexnan+0x7a>
 80106f6:	2300      	movs	r3, #0
 80106f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80106fc:	2501      	movs	r5, #1
 80106fe:	3c04      	subs	r4, #4
 8010700:	6822      	ldr	r2, [r4, #0]
 8010702:	f000 000f 	and.w	r0, r0, #15
 8010706:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801070a:	6020      	str	r0, [r4, #0]
 801070c:	e7b5      	b.n	801067a <__hexnan+0x7a>
 801070e:	2508      	movs	r5, #8
 8010710:	e7b3      	b.n	801067a <__hexnan+0x7a>
 8010712:	9b01      	ldr	r3, [sp, #4]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d0dd      	beq.n	80106d4 <__hexnan+0xd4>
 8010718:	f1c3 0320 	rsb	r3, r3, #32
 801071c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010720:	40da      	lsrs	r2, r3
 8010722:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010726:	4013      	ands	r3, r2
 8010728:	f846 3c04 	str.w	r3, [r6, #-4]
 801072c:	e7d2      	b.n	80106d4 <__hexnan+0xd4>
 801072e:	3f04      	subs	r7, #4
 8010730:	e7d0      	b.n	80106d4 <__hexnan+0xd4>
 8010732:	2004      	movs	r0, #4
 8010734:	e7d5      	b.n	80106e2 <__hexnan+0xe2>

08010736 <__ascii_mbtowc>:
 8010736:	b082      	sub	sp, #8
 8010738:	b901      	cbnz	r1, 801073c <__ascii_mbtowc+0x6>
 801073a:	a901      	add	r1, sp, #4
 801073c:	b142      	cbz	r2, 8010750 <__ascii_mbtowc+0x1a>
 801073e:	b14b      	cbz	r3, 8010754 <__ascii_mbtowc+0x1e>
 8010740:	7813      	ldrb	r3, [r2, #0]
 8010742:	600b      	str	r3, [r1, #0]
 8010744:	7812      	ldrb	r2, [r2, #0]
 8010746:	1e10      	subs	r0, r2, #0
 8010748:	bf18      	it	ne
 801074a:	2001      	movne	r0, #1
 801074c:	b002      	add	sp, #8
 801074e:	4770      	bx	lr
 8010750:	4610      	mov	r0, r2
 8010752:	e7fb      	b.n	801074c <__ascii_mbtowc+0x16>
 8010754:	f06f 0001 	mvn.w	r0, #1
 8010758:	e7f8      	b.n	801074c <__ascii_mbtowc+0x16>
	...

0801075c <_Balloc>:
 801075c:	b570      	push	{r4, r5, r6, lr}
 801075e:	69c6      	ldr	r6, [r0, #28]
 8010760:	4604      	mov	r4, r0
 8010762:	460d      	mov	r5, r1
 8010764:	b976      	cbnz	r6, 8010784 <_Balloc+0x28>
 8010766:	2010      	movs	r0, #16
 8010768:	f7fc ff56 	bl	800d618 <malloc>
 801076c:	4602      	mov	r2, r0
 801076e:	61e0      	str	r0, [r4, #28]
 8010770:	b920      	cbnz	r0, 801077c <_Balloc+0x20>
 8010772:	4b18      	ldr	r3, [pc, #96]	@ (80107d4 <_Balloc+0x78>)
 8010774:	4818      	ldr	r0, [pc, #96]	@ (80107d8 <_Balloc+0x7c>)
 8010776:	216b      	movs	r1, #107	@ 0x6b
 8010778:	f001 fc28 	bl	8011fcc <__assert_func>
 801077c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010780:	6006      	str	r6, [r0, #0]
 8010782:	60c6      	str	r6, [r0, #12]
 8010784:	69e6      	ldr	r6, [r4, #28]
 8010786:	68f3      	ldr	r3, [r6, #12]
 8010788:	b183      	cbz	r3, 80107ac <_Balloc+0x50>
 801078a:	69e3      	ldr	r3, [r4, #28]
 801078c:	68db      	ldr	r3, [r3, #12]
 801078e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010792:	b9b8      	cbnz	r0, 80107c4 <_Balloc+0x68>
 8010794:	2101      	movs	r1, #1
 8010796:	fa01 f605 	lsl.w	r6, r1, r5
 801079a:	1d72      	adds	r2, r6, #5
 801079c:	0092      	lsls	r2, r2, #2
 801079e:	4620      	mov	r0, r4
 80107a0:	f001 fc32 	bl	8012008 <_calloc_r>
 80107a4:	b160      	cbz	r0, 80107c0 <_Balloc+0x64>
 80107a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80107aa:	e00e      	b.n	80107ca <_Balloc+0x6e>
 80107ac:	2221      	movs	r2, #33	@ 0x21
 80107ae:	2104      	movs	r1, #4
 80107b0:	4620      	mov	r0, r4
 80107b2:	f001 fc29 	bl	8012008 <_calloc_r>
 80107b6:	69e3      	ldr	r3, [r4, #28]
 80107b8:	60f0      	str	r0, [r6, #12]
 80107ba:	68db      	ldr	r3, [r3, #12]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d1e4      	bne.n	801078a <_Balloc+0x2e>
 80107c0:	2000      	movs	r0, #0
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	6802      	ldr	r2, [r0, #0]
 80107c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80107ca:	2300      	movs	r3, #0
 80107cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80107d0:	e7f7      	b.n	80107c2 <_Balloc+0x66>
 80107d2:	bf00      	nop
 80107d4:	08013910 	.word	0x08013910
 80107d8:	080139f0 	.word	0x080139f0

080107dc <_Bfree>:
 80107dc:	b570      	push	{r4, r5, r6, lr}
 80107de:	69c6      	ldr	r6, [r0, #28]
 80107e0:	4605      	mov	r5, r0
 80107e2:	460c      	mov	r4, r1
 80107e4:	b976      	cbnz	r6, 8010804 <_Bfree+0x28>
 80107e6:	2010      	movs	r0, #16
 80107e8:	f7fc ff16 	bl	800d618 <malloc>
 80107ec:	4602      	mov	r2, r0
 80107ee:	61e8      	str	r0, [r5, #28]
 80107f0:	b920      	cbnz	r0, 80107fc <_Bfree+0x20>
 80107f2:	4b09      	ldr	r3, [pc, #36]	@ (8010818 <_Bfree+0x3c>)
 80107f4:	4809      	ldr	r0, [pc, #36]	@ (801081c <_Bfree+0x40>)
 80107f6:	218f      	movs	r1, #143	@ 0x8f
 80107f8:	f001 fbe8 	bl	8011fcc <__assert_func>
 80107fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010800:	6006      	str	r6, [r0, #0]
 8010802:	60c6      	str	r6, [r0, #12]
 8010804:	b13c      	cbz	r4, 8010816 <_Bfree+0x3a>
 8010806:	69eb      	ldr	r3, [r5, #28]
 8010808:	6862      	ldr	r2, [r4, #4]
 801080a:	68db      	ldr	r3, [r3, #12]
 801080c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010810:	6021      	str	r1, [r4, #0]
 8010812:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010816:	bd70      	pop	{r4, r5, r6, pc}
 8010818:	08013910 	.word	0x08013910
 801081c:	080139f0 	.word	0x080139f0

08010820 <__multadd>:
 8010820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010824:	690d      	ldr	r5, [r1, #16]
 8010826:	4607      	mov	r7, r0
 8010828:	460c      	mov	r4, r1
 801082a:	461e      	mov	r6, r3
 801082c:	f101 0c14 	add.w	ip, r1, #20
 8010830:	2000      	movs	r0, #0
 8010832:	f8dc 3000 	ldr.w	r3, [ip]
 8010836:	b299      	uxth	r1, r3
 8010838:	fb02 6101 	mla	r1, r2, r1, r6
 801083c:	0c1e      	lsrs	r6, r3, #16
 801083e:	0c0b      	lsrs	r3, r1, #16
 8010840:	fb02 3306 	mla	r3, r2, r6, r3
 8010844:	b289      	uxth	r1, r1
 8010846:	3001      	adds	r0, #1
 8010848:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801084c:	4285      	cmp	r5, r0
 801084e:	f84c 1b04 	str.w	r1, [ip], #4
 8010852:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010856:	dcec      	bgt.n	8010832 <__multadd+0x12>
 8010858:	b30e      	cbz	r6, 801089e <__multadd+0x7e>
 801085a:	68a3      	ldr	r3, [r4, #8]
 801085c:	42ab      	cmp	r3, r5
 801085e:	dc19      	bgt.n	8010894 <__multadd+0x74>
 8010860:	6861      	ldr	r1, [r4, #4]
 8010862:	4638      	mov	r0, r7
 8010864:	3101      	adds	r1, #1
 8010866:	f7ff ff79 	bl	801075c <_Balloc>
 801086a:	4680      	mov	r8, r0
 801086c:	b928      	cbnz	r0, 801087a <__multadd+0x5a>
 801086e:	4602      	mov	r2, r0
 8010870:	4b0c      	ldr	r3, [pc, #48]	@ (80108a4 <__multadd+0x84>)
 8010872:	480d      	ldr	r0, [pc, #52]	@ (80108a8 <__multadd+0x88>)
 8010874:	21ba      	movs	r1, #186	@ 0xba
 8010876:	f001 fba9 	bl	8011fcc <__assert_func>
 801087a:	6922      	ldr	r2, [r4, #16]
 801087c:	3202      	adds	r2, #2
 801087e:	f104 010c 	add.w	r1, r4, #12
 8010882:	0092      	lsls	r2, r2, #2
 8010884:	300c      	adds	r0, #12
 8010886:	f7fe fd70 	bl	800f36a <memcpy>
 801088a:	4621      	mov	r1, r4
 801088c:	4638      	mov	r0, r7
 801088e:	f7ff ffa5 	bl	80107dc <_Bfree>
 8010892:	4644      	mov	r4, r8
 8010894:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010898:	3501      	adds	r5, #1
 801089a:	615e      	str	r6, [r3, #20]
 801089c:	6125      	str	r5, [r4, #16]
 801089e:	4620      	mov	r0, r4
 80108a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108a4:	0801397f 	.word	0x0801397f
 80108a8:	080139f0 	.word	0x080139f0

080108ac <__s2b>:
 80108ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108b0:	460c      	mov	r4, r1
 80108b2:	4615      	mov	r5, r2
 80108b4:	461f      	mov	r7, r3
 80108b6:	2209      	movs	r2, #9
 80108b8:	3308      	adds	r3, #8
 80108ba:	4606      	mov	r6, r0
 80108bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80108c0:	2100      	movs	r1, #0
 80108c2:	2201      	movs	r2, #1
 80108c4:	429a      	cmp	r2, r3
 80108c6:	db09      	blt.n	80108dc <__s2b+0x30>
 80108c8:	4630      	mov	r0, r6
 80108ca:	f7ff ff47 	bl	801075c <_Balloc>
 80108ce:	b940      	cbnz	r0, 80108e2 <__s2b+0x36>
 80108d0:	4602      	mov	r2, r0
 80108d2:	4b19      	ldr	r3, [pc, #100]	@ (8010938 <__s2b+0x8c>)
 80108d4:	4819      	ldr	r0, [pc, #100]	@ (801093c <__s2b+0x90>)
 80108d6:	21d3      	movs	r1, #211	@ 0xd3
 80108d8:	f001 fb78 	bl	8011fcc <__assert_func>
 80108dc:	0052      	lsls	r2, r2, #1
 80108de:	3101      	adds	r1, #1
 80108e0:	e7f0      	b.n	80108c4 <__s2b+0x18>
 80108e2:	9b08      	ldr	r3, [sp, #32]
 80108e4:	6143      	str	r3, [r0, #20]
 80108e6:	2d09      	cmp	r5, #9
 80108e8:	f04f 0301 	mov.w	r3, #1
 80108ec:	6103      	str	r3, [r0, #16]
 80108ee:	dd16      	ble.n	801091e <__s2b+0x72>
 80108f0:	f104 0909 	add.w	r9, r4, #9
 80108f4:	46c8      	mov	r8, r9
 80108f6:	442c      	add	r4, r5
 80108f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80108fc:	4601      	mov	r1, r0
 80108fe:	3b30      	subs	r3, #48	@ 0x30
 8010900:	220a      	movs	r2, #10
 8010902:	4630      	mov	r0, r6
 8010904:	f7ff ff8c 	bl	8010820 <__multadd>
 8010908:	45a0      	cmp	r8, r4
 801090a:	d1f5      	bne.n	80108f8 <__s2b+0x4c>
 801090c:	f1a5 0408 	sub.w	r4, r5, #8
 8010910:	444c      	add	r4, r9
 8010912:	1b2d      	subs	r5, r5, r4
 8010914:	1963      	adds	r3, r4, r5
 8010916:	42bb      	cmp	r3, r7
 8010918:	db04      	blt.n	8010924 <__s2b+0x78>
 801091a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801091e:	340a      	adds	r4, #10
 8010920:	2509      	movs	r5, #9
 8010922:	e7f6      	b.n	8010912 <__s2b+0x66>
 8010924:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010928:	4601      	mov	r1, r0
 801092a:	3b30      	subs	r3, #48	@ 0x30
 801092c:	220a      	movs	r2, #10
 801092e:	4630      	mov	r0, r6
 8010930:	f7ff ff76 	bl	8010820 <__multadd>
 8010934:	e7ee      	b.n	8010914 <__s2b+0x68>
 8010936:	bf00      	nop
 8010938:	0801397f 	.word	0x0801397f
 801093c:	080139f0 	.word	0x080139f0

08010940 <__hi0bits>:
 8010940:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010944:	4603      	mov	r3, r0
 8010946:	bf36      	itet	cc
 8010948:	0403      	lslcc	r3, r0, #16
 801094a:	2000      	movcs	r0, #0
 801094c:	2010      	movcc	r0, #16
 801094e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010952:	bf3c      	itt	cc
 8010954:	021b      	lslcc	r3, r3, #8
 8010956:	3008      	addcc	r0, #8
 8010958:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801095c:	bf3c      	itt	cc
 801095e:	011b      	lslcc	r3, r3, #4
 8010960:	3004      	addcc	r0, #4
 8010962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010966:	bf3c      	itt	cc
 8010968:	009b      	lslcc	r3, r3, #2
 801096a:	3002      	addcc	r0, #2
 801096c:	2b00      	cmp	r3, #0
 801096e:	db05      	blt.n	801097c <__hi0bits+0x3c>
 8010970:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010974:	f100 0001 	add.w	r0, r0, #1
 8010978:	bf08      	it	eq
 801097a:	2020      	moveq	r0, #32
 801097c:	4770      	bx	lr

0801097e <__lo0bits>:
 801097e:	6803      	ldr	r3, [r0, #0]
 8010980:	4602      	mov	r2, r0
 8010982:	f013 0007 	ands.w	r0, r3, #7
 8010986:	d00b      	beq.n	80109a0 <__lo0bits+0x22>
 8010988:	07d9      	lsls	r1, r3, #31
 801098a:	d421      	bmi.n	80109d0 <__lo0bits+0x52>
 801098c:	0798      	lsls	r0, r3, #30
 801098e:	bf49      	itett	mi
 8010990:	085b      	lsrmi	r3, r3, #1
 8010992:	089b      	lsrpl	r3, r3, #2
 8010994:	2001      	movmi	r0, #1
 8010996:	6013      	strmi	r3, [r2, #0]
 8010998:	bf5c      	itt	pl
 801099a:	6013      	strpl	r3, [r2, #0]
 801099c:	2002      	movpl	r0, #2
 801099e:	4770      	bx	lr
 80109a0:	b299      	uxth	r1, r3
 80109a2:	b909      	cbnz	r1, 80109a8 <__lo0bits+0x2a>
 80109a4:	0c1b      	lsrs	r3, r3, #16
 80109a6:	2010      	movs	r0, #16
 80109a8:	b2d9      	uxtb	r1, r3
 80109aa:	b909      	cbnz	r1, 80109b0 <__lo0bits+0x32>
 80109ac:	3008      	adds	r0, #8
 80109ae:	0a1b      	lsrs	r3, r3, #8
 80109b0:	0719      	lsls	r1, r3, #28
 80109b2:	bf04      	itt	eq
 80109b4:	091b      	lsreq	r3, r3, #4
 80109b6:	3004      	addeq	r0, #4
 80109b8:	0799      	lsls	r1, r3, #30
 80109ba:	bf04      	itt	eq
 80109bc:	089b      	lsreq	r3, r3, #2
 80109be:	3002      	addeq	r0, #2
 80109c0:	07d9      	lsls	r1, r3, #31
 80109c2:	d403      	bmi.n	80109cc <__lo0bits+0x4e>
 80109c4:	085b      	lsrs	r3, r3, #1
 80109c6:	f100 0001 	add.w	r0, r0, #1
 80109ca:	d003      	beq.n	80109d4 <__lo0bits+0x56>
 80109cc:	6013      	str	r3, [r2, #0]
 80109ce:	4770      	bx	lr
 80109d0:	2000      	movs	r0, #0
 80109d2:	4770      	bx	lr
 80109d4:	2020      	movs	r0, #32
 80109d6:	4770      	bx	lr

080109d8 <__i2b>:
 80109d8:	b510      	push	{r4, lr}
 80109da:	460c      	mov	r4, r1
 80109dc:	2101      	movs	r1, #1
 80109de:	f7ff febd 	bl	801075c <_Balloc>
 80109e2:	4602      	mov	r2, r0
 80109e4:	b928      	cbnz	r0, 80109f2 <__i2b+0x1a>
 80109e6:	4b05      	ldr	r3, [pc, #20]	@ (80109fc <__i2b+0x24>)
 80109e8:	4805      	ldr	r0, [pc, #20]	@ (8010a00 <__i2b+0x28>)
 80109ea:	f240 1145 	movw	r1, #325	@ 0x145
 80109ee:	f001 faed 	bl	8011fcc <__assert_func>
 80109f2:	2301      	movs	r3, #1
 80109f4:	6144      	str	r4, [r0, #20]
 80109f6:	6103      	str	r3, [r0, #16]
 80109f8:	bd10      	pop	{r4, pc}
 80109fa:	bf00      	nop
 80109fc:	0801397f 	.word	0x0801397f
 8010a00:	080139f0 	.word	0x080139f0

08010a04 <__multiply>:
 8010a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a08:	4614      	mov	r4, r2
 8010a0a:	690a      	ldr	r2, [r1, #16]
 8010a0c:	6923      	ldr	r3, [r4, #16]
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	bfa8      	it	ge
 8010a12:	4623      	movge	r3, r4
 8010a14:	460f      	mov	r7, r1
 8010a16:	bfa4      	itt	ge
 8010a18:	460c      	movge	r4, r1
 8010a1a:	461f      	movge	r7, r3
 8010a1c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010a20:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010a24:	68a3      	ldr	r3, [r4, #8]
 8010a26:	6861      	ldr	r1, [r4, #4]
 8010a28:	eb0a 0609 	add.w	r6, sl, r9
 8010a2c:	42b3      	cmp	r3, r6
 8010a2e:	b085      	sub	sp, #20
 8010a30:	bfb8      	it	lt
 8010a32:	3101      	addlt	r1, #1
 8010a34:	f7ff fe92 	bl	801075c <_Balloc>
 8010a38:	b930      	cbnz	r0, 8010a48 <__multiply+0x44>
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	4b44      	ldr	r3, [pc, #272]	@ (8010b50 <__multiply+0x14c>)
 8010a3e:	4845      	ldr	r0, [pc, #276]	@ (8010b54 <__multiply+0x150>)
 8010a40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010a44:	f001 fac2 	bl	8011fcc <__assert_func>
 8010a48:	f100 0514 	add.w	r5, r0, #20
 8010a4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010a50:	462b      	mov	r3, r5
 8010a52:	2200      	movs	r2, #0
 8010a54:	4543      	cmp	r3, r8
 8010a56:	d321      	bcc.n	8010a9c <__multiply+0x98>
 8010a58:	f107 0114 	add.w	r1, r7, #20
 8010a5c:	f104 0214 	add.w	r2, r4, #20
 8010a60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010a64:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010a68:	9302      	str	r3, [sp, #8]
 8010a6a:	1b13      	subs	r3, r2, r4
 8010a6c:	3b15      	subs	r3, #21
 8010a6e:	f023 0303 	bic.w	r3, r3, #3
 8010a72:	3304      	adds	r3, #4
 8010a74:	f104 0715 	add.w	r7, r4, #21
 8010a78:	42ba      	cmp	r2, r7
 8010a7a:	bf38      	it	cc
 8010a7c:	2304      	movcc	r3, #4
 8010a7e:	9301      	str	r3, [sp, #4]
 8010a80:	9b02      	ldr	r3, [sp, #8]
 8010a82:	9103      	str	r1, [sp, #12]
 8010a84:	428b      	cmp	r3, r1
 8010a86:	d80c      	bhi.n	8010aa2 <__multiply+0x9e>
 8010a88:	2e00      	cmp	r6, #0
 8010a8a:	dd03      	ble.n	8010a94 <__multiply+0x90>
 8010a8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d05b      	beq.n	8010b4c <__multiply+0x148>
 8010a94:	6106      	str	r6, [r0, #16]
 8010a96:	b005      	add	sp, #20
 8010a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a9c:	f843 2b04 	str.w	r2, [r3], #4
 8010aa0:	e7d8      	b.n	8010a54 <__multiply+0x50>
 8010aa2:	f8b1 a000 	ldrh.w	sl, [r1]
 8010aa6:	f1ba 0f00 	cmp.w	sl, #0
 8010aaa:	d024      	beq.n	8010af6 <__multiply+0xf2>
 8010aac:	f104 0e14 	add.w	lr, r4, #20
 8010ab0:	46a9      	mov	r9, r5
 8010ab2:	f04f 0c00 	mov.w	ip, #0
 8010ab6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010aba:	f8d9 3000 	ldr.w	r3, [r9]
 8010abe:	fa1f fb87 	uxth.w	fp, r7
 8010ac2:	b29b      	uxth	r3, r3
 8010ac4:	fb0a 330b 	mla	r3, sl, fp, r3
 8010ac8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010acc:	f8d9 7000 	ldr.w	r7, [r9]
 8010ad0:	4463      	add	r3, ip
 8010ad2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010ad6:	fb0a c70b 	mla	r7, sl, fp, ip
 8010ada:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010ae4:	4572      	cmp	r2, lr
 8010ae6:	f849 3b04 	str.w	r3, [r9], #4
 8010aea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010aee:	d8e2      	bhi.n	8010ab6 <__multiply+0xb2>
 8010af0:	9b01      	ldr	r3, [sp, #4]
 8010af2:	f845 c003 	str.w	ip, [r5, r3]
 8010af6:	9b03      	ldr	r3, [sp, #12]
 8010af8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010afc:	3104      	adds	r1, #4
 8010afe:	f1b9 0f00 	cmp.w	r9, #0
 8010b02:	d021      	beq.n	8010b48 <__multiply+0x144>
 8010b04:	682b      	ldr	r3, [r5, #0]
 8010b06:	f104 0c14 	add.w	ip, r4, #20
 8010b0a:	46ae      	mov	lr, r5
 8010b0c:	f04f 0a00 	mov.w	sl, #0
 8010b10:	f8bc b000 	ldrh.w	fp, [ip]
 8010b14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010b18:	fb09 770b 	mla	r7, r9, fp, r7
 8010b1c:	4457      	add	r7, sl
 8010b1e:	b29b      	uxth	r3, r3
 8010b20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010b24:	f84e 3b04 	str.w	r3, [lr], #4
 8010b28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010b2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010b30:	f8be 3000 	ldrh.w	r3, [lr]
 8010b34:	fb09 330a 	mla	r3, r9, sl, r3
 8010b38:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010b3c:	4562      	cmp	r2, ip
 8010b3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010b42:	d8e5      	bhi.n	8010b10 <__multiply+0x10c>
 8010b44:	9f01      	ldr	r7, [sp, #4]
 8010b46:	51eb      	str	r3, [r5, r7]
 8010b48:	3504      	adds	r5, #4
 8010b4a:	e799      	b.n	8010a80 <__multiply+0x7c>
 8010b4c:	3e01      	subs	r6, #1
 8010b4e:	e79b      	b.n	8010a88 <__multiply+0x84>
 8010b50:	0801397f 	.word	0x0801397f
 8010b54:	080139f0 	.word	0x080139f0

08010b58 <__pow5mult>:
 8010b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b5c:	4615      	mov	r5, r2
 8010b5e:	f012 0203 	ands.w	r2, r2, #3
 8010b62:	4607      	mov	r7, r0
 8010b64:	460e      	mov	r6, r1
 8010b66:	d007      	beq.n	8010b78 <__pow5mult+0x20>
 8010b68:	4c25      	ldr	r4, [pc, #148]	@ (8010c00 <__pow5mult+0xa8>)
 8010b6a:	3a01      	subs	r2, #1
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010b72:	f7ff fe55 	bl	8010820 <__multadd>
 8010b76:	4606      	mov	r6, r0
 8010b78:	10ad      	asrs	r5, r5, #2
 8010b7a:	d03d      	beq.n	8010bf8 <__pow5mult+0xa0>
 8010b7c:	69fc      	ldr	r4, [r7, #28]
 8010b7e:	b97c      	cbnz	r4, 8010ba0 <__pow5mult+0x48>
 8010b80:	2010      	movs	r0, #16
 8010b82:	f7fc fd49 	bl	800d618 <malloc>
 8010b86:	4602      	mov	r2, r0
 8010b88:	61f8      	str	r0, [r7, #28]
 8010b8a:	b928      	cbnz	r0, 8010b98 <__pow5mult+0x40>
 8010b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8010c04 <__pow5mult+0xac>)
 8010b8e:	481e      	ldr	r0, [pc, #120]	@ (8010c08 <__pow5mult+0xb0>)
 8010b90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010b94:	f001 fa1a 	bl	8011fcc <__assert_func>
 8010b98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010b9c:	6004      	str	r4, [r0, #0]
 8010b9e:	60c4      	str	r4, [r0, #12]
 8010ba0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010ba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010ba8:	b94c      	cbnz	r4, 8010bbe <__pow5mult+0x66>
 8010baa:	f240 2171 	movw	r1, #625	@ 0x271
 8010bae:	4638      	mov	r0, r7
 8010bb0:	f7ff ff12 	bl	80109d8 <__i2b>
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8010bba:	4604      	mov	r4, r0
 8010bbc:	6003      	str	r3, [r0, #0]
 8010bbe:	f04f 0900 	mov.w	r9, #0
 8010bc2:	07eb      	lsls	r3, r5, #31
 8010bc4:	d50a      	bpl.n	8010bdc <__pow5mult+0x84>
 8010bc6:	4631      	mov	r1, r6
 8010bc8:	4622      	mov	r2, r4
 8010bca:	4638      	mov	r0, r7
 8010bcc:	f7ff ff1a 	bl	8010a04 <__multiply>
 8010bd0:	4631      	mov	r1, r6
 8010bd2:	4680      	mov	r8, r0
 8010bd4:	4638      	mov	r0, r7
 8010bd6:	f7ff fe01 	bl	80107dc <_Bfree>
 8010bda:	4646      	mov	r6, r8
 8010bdc:	106d      	asrs	r5, r5, #1
 8010bde:	d00b      	beq.n	8010bf8 <__pow5mult+0xa0>
 8010be0:	6820      	ldr	r0, [r4, #0]
 8010be2:	b938      	cbnz	r0, 8010bf4 <__pow5mult+0x9c>
 8010be4:	4622      	mov	r2, r4
 8010be6:	4621      	mov	r1, r4
 8010be8:	4638      	mov	r0, r7
 8010bea:	f7ff ff0b 	bl	8010a04 <__multiply>
 8010bee:	6020      	str	r0, [r4, #0]
 8010bf0:	f8c0 9000 	str.w	r9, [r0]
 8010bf4:	4604      	mov	r4, r0
 8010bf6:	e7e4      	b.n	8010bc2 <__pow5mult+0x6a>
 8010bf8:	4630      	mov	r0, r6
 8010bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bfe:	bf00      	nop
 8010c00:	08013a4c 	.word	0x08013a4c
 8010c04:	08013910 	.word	0x08013910
 8010c08:	080139f0 	.word	0x080139f0

08010c0c <__lshift>:
 8010c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c10:	460c      	mov	r4, r1
 8010c12:	6849      	ldr	r1, [r1, #4]
 8010c14:	6923      	ldr	r3, [r4, #16]
 8010c16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010c1a:	68a3      	ldr	r3, [r4, #8]
 8010c1c:	4607      	mov	r7, r0
 8010c1e:	4691      	mov	r9, r2
 8010c20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010c24:	f108 0601 	add.w	r6, r8, #1
 8010c28:	42b3      	cmp	r3, r6
 8010c2a:	db0b      	blt.n	8010c44 <__lshift+0x38>
 8010c2c:	4638      	mov	r0, r7
 8010c2e:	f7ff fd95 	bl	801075c <_Balloc>
 8010c32:	4605      	mov	r5, r0
 8010c34:	b948      	cbnz	r0, 8010c4a <__lshift+0x3e>
 8010c36:	4602      	mov	r2, r0
 8010c38:	4b28      	ldr	r3, [pc, #160]	@ (8010cdc <__lshift+0xd0>)
 8010c3a:	4829      	ldr	r0, [pc, #164]	@ (8010ce0 <__lshift+0xd4>)
 8010c3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010c40:	f001 f9c4 	bl	8011fcc <__assert_func>
 8010c44:	3101      	adds	r1, #1
 8010c46:	005b      	lsls	r3, r3, #1
 8010c48:	e7ee      	b.n	8010c28 <__lshift+0x1c>
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	f100 0114 	add.w	r1, r0, #20
 8010c50:	f100 0210 	add.w	r2, r0, #16
 8010c54:	4618      	mov	r0, r3
 8010c56:	4553      	cmp	r3, sl
 8010c58:	db33      	blt.n	8010cc2 <__lshift+0xb6>
 8010c5a:	6920      	ldr	r0, [r4, #16]
 8010c5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010c60:	f104 0314 	add.w	r3, r4, #20
 8010c64:	f019 091f 	ands.w	r9, r9, #31
 8010c68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010c6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010c70:	d02b      	beq.n	8010cca <__lshift+0xbe>
 8010c72:	f1c9 0e20 	rsb	lr, r9, #32
 8010c76:	468a      	mov	sl, r1
 8010c78:	2200      	movs	r2, #0
 8010c7a:	6818      	ldr	r0, [r3, #0]
 8010c7c:	fa00 f009 	lsl.w	r0, r0, r9
 8010c80:	4310      	orrs	r0, r2
 8010c82:	f84a 0b04 	str.w	r0, [sl], #4
 8010c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c8a:	459c      	cmp	ip, r3
 8010c8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010c90:	d8f3      	bhi.n	8010c7a <__lshift+0x6e>
 8010c92:	ebac 0304 	sub.w	r3, ip, r4
 8010c96:	3b15      	subs	r3, #21
 8010c98:	f023 0303 	bic.w	r3, r3, #3
 8010c9c:	3304      	adds	r3, #4
 8010c9e:	f104 0015 	add.w	r0, r4, #21
 8010ca2:	4584      	cmp	ip, r0
 8010ca4:	bf38      	it	cc
 8010ca6:	2304      	movcc	r3, #4
 8010ca8:	50ca      	str	r2, [r1, r3]
 8010caa:	b10a      	cbz	r2, 8010cb0 <__lshift+0xa4>
 8010cac:	f108 0602 	add.w	r6, r8, #2
 8010cb0:	3e01      	subs	r6, #1
 8010cb2:	4638      	mov	r0, r7
 8010cb4:	612e      	str	r6, [r5, #16]
 8010cb6:	4621      	mov	r1, r4
 8010cb8:	f7ff fd90 	bl	80107dc <_Bfree>
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	e7c5      	b.n	8010c56 <__lshift+0x4a>
 8010cca:	3904      	subs	r1, #4
 8010ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8010cd4:	459c      	cmp	ip, r3
 8010cd6:	d8f9      	bhi.n	8010ccc <__lshift+0xc0>
 8010cd8:	e7ea      	b.n	8010cb0 <__lshift+0xa4>
 8010cda:	bf00      	nop
 8010cdc:	0801397f 	.word	0x0801397f
 8010ce0:	080139f0 	.word	0x080139f0

08010ce4 <__mcmp>:
 8010ce4:	690a      	ldr	r2, [r1, #16]
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	6900      	ldr	r0, [r0, #16]
 8010cea:	1a80      	subs	r0, r0, r2
 8010cec:	b530      	push	{r4, r5, lr}
 8010cee:	d10e      	bne.n	8010d0e <__mcmp+0x2a>
 8010cf0:	3314      	adds	r3, #20
 8010cf2:	3114      	adds	r1, #20
 8010cf4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010cf8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010cfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010d00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010d04:	4295      	cmp	r5, r2
 8010d06:	d003      	beq.n	8010d10 <__mcmp+0x2c>
 8010d08:	d205      	bcs.n	8010d16 <__mcmp+0x32>
 8010d0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d0e:	bd30      	pop	{r4, r5, pc}
 8010d10:	42a3      	cmp	r3, r4
 8010d12:	d3f3      	bcc.n	8010cfc <__mcmp+0x18>
 8010d14:	e7fb      	b.n	8010d0e <__mcmp+0x2a>
 8010d16:	2001      	movs	r0, #1
 8010d18:	e7f9      	b.n	8010d0e <__mcmp+0x2a>
	...

08010d1c <__mdiff>:
 8010d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d20:	4689      	mov	r9, r1
 8010d22:	4606      	mov	r6, r0
 8010d24:	4611      	mov	r1, r2
 8010d26:	4648      	mov	r0, r9
 8010d28:	4614      	mov	r4, r2
 8010d2a:	f7ff ffdb 	bl	8010ce4 <__mcmp>
 8010d2e:	1e05      	subs	r5, r0, #0
 8010d30:	d112      	bne.n	8010d58 <__mdiff+0x3c>
 8010d32:	4629      	mov	r1, r5
 8010d34:	4630      	mov	r0, r6
 8010d36:	f7ff fd11 	bl	801075c <_Balloc>
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	b928      	cbnz	r0, 8010d4a <__mdiff+0x2e>
 8010d3e:	4b3f      	ldr	r3, [pc, #252]	@ (8010e3c <__mdiff+0x120>)
 8010d40:	f240 2137 	movw	r1, #567	@ 0x237
 8010d44:	483e      	ldr	r0, [pc, #248]	@ (8010e40 <__mdiff+0x124>)
 8010d46:	f001 f941 	bl	8011fcc <__assert_func>
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010d50:	4610      	mov	r0, r2
 8010d52:	b003      	add	sp, #12
 8010d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d58:	bfbc      	itt	lt
 8010d5a:	464b      	movlt	r3, r9
 8010d5c:	46a1      	movlt	r9, r4
 8010d5e:	4630      	mov	r0, r6
 8010d60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010d64:	bfba      	itte	lt
 8010d66:	461c      	movlt	r4, r3
 8010d68:	2501      	movlt	r5, #1
 8010d6a:	2500      	movge	r5, #0
 8010d6c:	f7ff fcf6 	bl	801075c <_Balloc>
 8010d70:	4602      	mov	r2, r0
 8010d72:	b918      	cbnz	r0, 8010d7c <__mdiff+0x60>
 8010d74:	4b31      	ldr	r3, [pc, #196]	@ (8010e3c <__mdiff+0x120>)
 8010d76:	f240 2145 	movw	r1, #581	@ 0x245
 8010d7a:	e7e3      	b.n	8010d44 <__mdiff+0x28>
 8010d7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010d80:	6926      	ldr	r6, [r4, #16]
 8010d82:	60c5      	str	r5, [r0, #12]
 8010d84:	f109 0310 	add.w	r3, r9, #16
 8010d88:	f109 0514 	add.w	r5, r9, #20
 8010d8c:	f104 0e14 	add.w	lr, r4, #20
 8010d90:	f100 0b14 	add.w	fp, r0, #20
 8010d94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010d98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010d9c:	9301      	str	r3, [sp, #4]
 8010d9e:	46d9      	mov	r9, fp
 8010da0:	f04f 0c00 	mov.w	ip, #0
 8010da4:	9b01      	ldr	r3, [sp, #4]
 8010da6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010daa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010dae:	9301      	str	r3, [sp, #4]
 8010db0:	fa1f f38a 	uxth.w	r3, sl
 8010db4:	4619      	mov	r1, r3
 8010db6:	b283      	uxth	r3, r0
 8010db8:	1acb      	subs	r3, r1, r3
 8010dba:	0c00      	lsrs	r0, r0, #16
 8010dbc:	4463      	add	r3, ip
 8010dbe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010dc2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010dcc:	4576      	cmp	r6, lr
 8010dce:	f849 3b04 	str.w	r3, [r9], #4
 8010dd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010dd6:	d8e5      	bhi.n	8010da4 <__mdiff+0x88>
 8010dd8:	1b33      	subs	r3, r6, r4
 8010dda:	3b15      	subs	r3, #21
 8010ddc:	f023 0303 	bic.w	r3, r3, #3
 8010de0:	3415      	adds	r4, #21
 8010de2:	3304      	adds	r3, #4
 8010de4:	42a6      	cmp	r6, r4
 8010de6:	bf38      	it	cc
 8010de8:	2304      	movcc	r3, #4
 8010dea:	441d      	add	r5, r3
 8010dec:	445b      	add	r3, fp
 8010dee:	461e      	mov	r6, r3
 8010df0:	462c      	mov	r4, r5
 8010df2:	4544      	cmp	r4, r8
 8010df4:	d30e      	bcc.n	8010e14 <__mdiff+0xf8>
 8010df6:	f108 0103 	add.w	r1, r8, #3
 8010dfa:	1b49      	subs	r1, r1, r5
 8010dfc:	f021 0103 	bic.w	r1, r1, #3
 8010e00:	3d03      	subs	r5, #3
 8010e02:	45a8      	cmp	r8, r5
 8010e04:	bf38      	it	cc
 8010e06:	2100      	movcc	r1, #0
 8010e08:	440b      	add	r3, r1
 8010e0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010e0e:	b191      	cbz	r1, 8010e36 <__mdiff+0x11a>
 8010e10:	6117      	str	r7, [r2, #16]
 8010e12:	e79d      	b.n	8010d50 <__mdiff+0x34>
 8010e14:	f854 1b04 	ldr.w	r1, [r4], #4
 8010e18:	46e6      	mov	lr, ip
 8010e1a:	0c08      	lsrs	r0, r1, #16
 8010e1c:	fa1c fc81 	uxtah	ip, ip, r1
 8010e20:	4471      	add	r1, lr
 8010e22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010e26:	b289      	uxth	r1, r1
 8010e28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010e2c:	f846 1b04 	str.w	r1, [r6], #4
 8010e30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010e34:	e7dd      	b.n	8010df2 <__mdiff+0xd6>
 8010e36:	3f01      	subs	r7, #1
 8010e38:	e7e7      	b.n	8010e0a <__mdiff+0xee>
 8010e3a:	bf00      	nop
 8010e3c:	0801397f 	.word	0x0801397f
 8010e40:	080139f0 	.word	0x080139f0

08010e44 <__ulp>:
 8010e44:	b082      	sub	sp, #8
 8010e46:	ed8d 0b00 	vstr	d0, [sp]
 8010e4a:	9a01      	ldr	r2, [sp, #4]
 8010e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8010e8c <__ulp+0x48>)
 8010e4e:	4013      	ands	r3, r2
 8010e50:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	dc08      	bgt.n	8010e6a <__ulp+0x26>
 8010e58:	425b      	negs	r3, r3
 8010e5a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010e5e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010e62:	da04      	bge.n	8010e6e <__ulp+0x2a>
 8010e64:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010e68:	4113      	asrs	r3, r2
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	e008      	b.n	8010e80 <__ulp+0x3c>
 8010e6e:	f1a2 0314 	sub.w	r3, r2, #20
 8010e72:	2b1e      	cmp	r3, #30
 8010e74:	bfda      	itte	le
 8010e76:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010e7a:	40da      	lsrle	r2, r3
 8010e7c:	2201      	movgt	r2, #1
 8010e7e:	2300      	movs	r3, #0
 8010e80:	4619      	mov	r1, r3
 8010e82:	4610      	mov	r0, r2
 8010e84:	ec41 0b10 	vmov	d0, r0, r1
 8010e88:	b002      	add	sp, #8
 8010e8a:	4770      	bx	lr
 8010e8c:	7ff00000 	.word	0x7ff00000

08010e90 <__b2d>:
 8010e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e94:	6906      	ldr	r6, [r0, #16]
 8010e96:	f100 0814 	add.w	r8, r0, #20
 8010e9a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010e9e:	1f37      	subs	r7, r6, #4
 8010ea0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010ea4:	4610      	mov	r0, r2
 8010ea6:	f7ff fd4b 	bl	8010940 <__hi0bits>
 8010eaa:	f1c0 0320 	rsb	r3, r0, #32
 8010eae:	280a      	cmp	r0, #10
 8010eb0:	600b      	str	r3, [r1, #0]
 8010eb2:	491b      	ldr	r1, [pc, #108]	@ (8010f20 <__b2d+0x90>)
 8010eb4:	dc15      	bgt.n	8010ee2 <__b2d+0x52>
 8010eb6:	f1c0 0c0b 	rsb	ip, r0, #11
 8010eba:	fa22 f30c 	lsr.w	r3, r2, ip
 8010ebe:	45b8      	cmp	r8, r7
 8010ec0:	ea43 0501 	orr.w	r5, r3, r1
 8010ec4:	bf34      	ite	cc
 8010ec6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010eca:	2300      	movcs	r3, #0
 8010ecc:	3015      	adds	r0, #21
 8010ece:	fa02 f000 	lsl.w	r0, r2, r0
 8010ed2:	fa23 f30c 	lsr.w	r3, r3, ip
 8010ed6:	4303      	orrs	r3, r0
 8010ed8:	461c      	mov	r4, r3
 8010eda:	ec45 4b10 	vmov	d0, r4, r5
 8010ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ee2:	45b8      	cmp	r8, r7
 8010ee4:	bf3a      	itte	cc
 8010ee6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010eea:	f1a6 0708 	subcc.w	r7, r6, #8
 8010eee:	2300      	movcs	r3, #0
 8010ef0:	380b      	subs	r0, #11
 8010ef2:	d012      	beq.n	8010f1a <__b2d+0x8a>
 8010ef4:	f1c0 0120 	rsb	r1, r0, #32
 8010ef8:	fa23 f401 	lsr.w	r4, r3, r1
 8010efc:	4082      	lsls	r2, r0
 8010efe:	4322      	orrs	r2, r4
 8010f00:	4547      	cmp	r7, r8
 8010f02:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010f06:	bf8c      	ite	hi
 8010f08:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010f0c:	2200      	movls	r2, #0
 8010f0e:	4083      	lsls	r3, r0
 8010f10:	40ca      	lsrs	r2, r1
 8010f12:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010f16:	4313      	orrs	r3, r2
 8010f18:	e7de      	b.n	8010ed8 <__b2d+0x48>
 8010f1a:	ea42 0501 	orr.w	r5, r2, r1
 8010f1e:	e7db      	b.n	8010ed8 <__b2d+0x48>
 8010f20:	3ff00000 	.word	0x3ff00000

08010f24 <__d2b>:
 8010f24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010f28:	460f      	mov	r7, r1
 8010f2a:	2101      	movs	r1, #1
 8010f2c:	ec59 8b10 	vmov	r8, r9, d0
 8010f30:	4616      	mov	r6, r2
 8010f32:	f7ff fc13 	bl	801075c <_Balloc>
 8010f36:	4604      	mov	r4, r0
 8010f38:	b930      	cbnz	r0, 8010f48 <__d2b+0x24>
 8010f3a:	4602      	mov	r2, r0
 8010f3c:	4b23      	ldr	r3, [pc, #140]	@ (8010fcc <__d2b+0xa8>)
 8010f3e:	4824      	ldr	r0, [pc, #144]	@ (8010fd0 <__d2b+0xac>)
 8010f40:	f240 310f 	movw	r1, #783	@ 0x30f
 8010f44:	f001 f842 	bl	8011fcc <__assert_func>
 8010f48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010f4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010f50:	b10d      	cbz	r5, 8010f56 <__d2b+0x32>
 8010f52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010f56:	9301      	str	r3, [sp, #4]
 8010f58:	f1b8 0300 	subs.w	r3, r8, #0
 8010f5c:	d023      	beq.n	8010fa6 <__d2b+0x82>
 8010f5e:	4668      	mov	r0, sp
 8010f60:	9300      	str	r3, [sp, #0]
 8010f62:	f7ff fd0c 	bl	801097e <__lo0bits>
 8010f66:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010f6a:	b1d0      	cbz	r0, 8010fa2 <__d2b+0x7e>
 8010f6c:	f1c0 0320 	rsb	r3, r0, #32
 8010f70:	fa02 f303 	lsl.w	r3, r2, r3
 8010f74:	430b      	orrs	r3, r1
 8010f76:	40c2      	lsrs	r2, r0
 8010f78:	6163      	str	r3, [r4, #20]
 8010f7a:	9201      	str	r2, [sp, #4]
 8010f7c:	9b01      	ldr	r3, [sp, #4]
 8010f7e:	61a3      	str	r3, [r4, #24]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	bf0c      	ite	eq
 8010f84:	2201      	moveq	r2, #1
 8010f86:	2202      	movne	r2, #2
 8010f88:	6122      	str	r2, [r4, #16]
 8010f8a:	b1a5      	cbz	r5, 8010fb6 <__d2b+0x92>
 8010f8c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010f90:	4405      	add	r5, r0
 8010f92:	603d      	str	r5, [r7, #0]
 8010f94:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010f98:	6030      	str	r0, [r6, #0]
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	b003      	add	sp, #12
 8010f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fa2:	6161      	str	r1, [r4, #20]
 8010fa4:	e7ea      	b.n	8010f7c <__d2b+0x58>
 8010fa6:	a801      	add	r0, sp, #4
 8010fa8:	f7ff fce9 	bl	801097e <__lo0bits>
 8010fac:	9b01      	ldr	r3, [sp, #4]
 8010fae:	6163      	str	r3, [r4, #20]
 8010fb0:	3020      	adds	r0, #32
 8010fb2:	2201      	movs	r2, #1
 8010fb4:	e7e8      	b.n	8010f88 <__d2b+0x64>
 8010fb6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010fba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010fbe:	6038      	str	r0, [r7, #0]
 8010fc0:	6918      	ldr	r0, [r3, #16]
 8010fc2:	f7ff fcbd 	bl	8010940 <__hi0bits>
 8010fc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010fca:	e7e5      	b.n	8010f98 <__d2b+0x74>
 8010fcc:	0801397f 	.word	0x0801397f
 8010fd0:	080139f0 	.word	0x080139f0

08010fd4 <__ratio>:
 8010fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd8:	b085      	sub	sp, #20
 8010fda:	e9cd 1000 	strd	r1, r0, [sp]
 8010fde:	a902      	add	r1, sp, #8
 8010fe0:	f7ff ff56 	bl	8010e90 <__b2d>
 8010fe4:	9800      	ldr	r0, [sp, #0]
 8010fe6:	a903      	add	r1, sp, #12
 8010fe8:	ec55 4b10 	vmov	r4, r5, d0
 8010fec:	f7ff ff50 	bl	8010e90 <__b2d>
 8010ff0:	9b01      	ldr	r3, [sp, #4]
 8010ff2:	6919      	ldr	r1, [r3, #16]
 8010ff4:	9b00      	ldr	r3, [sp, #0]
 8010ff6:	691b      	ldr	r3, [r3, #16]
 8010ff8:	1ac9      	subs	r1, r1, r3
 8010ffa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010ffe:	1a9b      	subs	r3, r3, r2
 8011000:	ec5b ab10 	vmov	sl, fp, d0
 8011004:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011008:	2b00      	cmp	r3, #0
 801100a:	bfce      	itee	gt
 801100c:	462a      	movgt	r2, r5
 801100e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011012:	465a      	movle	r2, fp
 8011014:	462f      	mov	r7, r5
 8011016:	46d9      	mov	r9, fp
 8011018:	bfcc      	ite	gt
 801101a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801101e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011022:	464b      	mov	r3, r9
 8011024:	4652      	mov	r2, sl
 8011026:	4620      	mov	r0, r4
 8011028:	4639      	mov	r1, r7
 801102a:	f7ef fc27 	bl	800087c <__aeabi_ddiv>
 801102e:	ec41 0b10 	vmov	d0, r0, r1
 8011032:	b005      	add	sp, #20
 8011034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011038 <__copybits>:
 8011038:	3901      	subs	r1, #1
 801103a:	b570      	push	{r4, r5, r6, lr}
 801103c:	1149      	asrs	r1, r1, #5
 801103e:	6914      	ldr	r4, [r2, #16]
 8011040:	3101      	adds	r1, #1
 8011042:	f102 0314 	add.w	r3, r2, #20
 8011046:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801104a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801104e:	1f05      	subs	r5, r0, #4
 8011050:	42a3      	cmp	r3, r4
 8011052:	d30c      	bcc.n	801106e <__copybits+0x36>
 8011054:	1aa3      	subs	r3, r4, r2
 8011056:	3b11      	subs	r3, #17
 8011058:	f023 0303 	bic.w	r3, r3, #3
 801105c:	3211      	adds	r2, #17
 801105e:	42a2      	cmp	r2, r4
 8011060:	bf88      	it	hi
 8011062:	2300      	movhi	r3, #0
 8011064:	4418      	add	r0, r3
 8011066:	2300      	movs	r3, #0
 8011068:	4288      	cmp	r0, r1
 801106a:	d305      	bcc.n	8011078 <__copybits+0x40>
 801106c:	bd70      	pop	{r4, r5, r6, pc}
 801106e:	f853 6b04 	ldr.w	r6, [r3], #4
 8011072:	f845 6f04 	str.w	r6, [r5, #4]!
 8011076:	e7eb      	b.n	8011050 <__copybits+0x18>
 8011078:	f840 3b04 	str.w	r3, [r0], #4
 801107c:	e7f4      	b.n	8011068 <__copybits+0x30>

0801107e <__any_on>:
 801107e:	f100 0214 	add.w	r2, r0, #20
 8011082:	6900      	ldr	r0, [r0, #16]
 8011084:	114b      	asrs	r3, r1, #5
 8011086:	4298      	cmp	r0, r3
 8011088:	b510      	push	{r4, lr}
 801108a:	db11      	blt.n	80110b0 <__any_on+0x32>
 801108c:	dd0a      	ble.n	80110a4 <__any_on+0x26>
 801108e:	f011 011f 	ands.w	r1, r1, #31
 8011092:	d007      	beq.n	80110a4 <__any_on+0x26>
 8011094:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011098:	fa24 f001 	lsr.w	r0, r4, r1
 801109c:	fa00 f101 	lsl.w	r1, r0, r1
 80110a0:	428c      	cmp	r4, r1
 80110a2:	d10b      	bne.n	80110bc <__any_on+0x3e>
 80110a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80110a8:	4293      	cmp	r3, r2
 80110aa:	d803      	bhi.n	80110b4 <__any_on+0x36>
 80110ac:	2000      	movs	r0, #0
 80110ae:	bd10      	pop	{r4, pc}
 80110b0:	4603      	mov	r3, r0
 80110b2:	e7f7      	b.n	80110a4 <__any_on+0x26>
 80110b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80110b8:	2900      	cmp	r1, #0
 80110ba:	d0f5      	beq.n	80110a8 <__any_on+0x2a>
 80110bc:	2001      	movs	r0, #1
 80110be:	e7f6      	b.n	80110ae <__any_on+0x30>

080110c0 <_malloc_usable_size_r>:
 80110c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110c4:	1f18      	subs	r0, r3, #4
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	bfbc      	itt	lt
 80110ca:	580b      	ldrlt	r3, [r1, r0]
 80110cc:	18c0      	addlt	r0, r0, r3
 80110ce:	4770      	bx	lr

080110d0 <__ascii_wctomb>:
 80110d0:	4603      	mov	r3, r0
 80110d2:	4608      	mov	r0, r1
 80110d4:	b141      	cbz	r1, 80110e8 <__ascii_wctomb+0x18>
 80110d6:	2aff      	cmp	r2, #255	@ 0xff
 80110d8:	d904      	bls.n	80110e4 <__ascii_wctomb+0x14>
 80110da:	228a      	movs	r2, #138	@ 0x8a
 80110dc:	601a      	str	r2, [r3, #0]
 80110de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110e2:	4770      	bx	lr
 80110e4:	700a      	strb	r2, [r1, #0]
 80110e6:	2001      	movs	r0, #1
 80110e8:	4770      	bx	lr

080110ea <__ssputs_r>:
 80110ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110ee:	688e      	ldr	r6, [r1, #8]
 80110f0:	461f      	mov	r7, r3
 80110f2:	42be      	cmp	r6, r7
 80110f4:	680b      	ldr	r3, [r1, #0]
 80110f6:	4682      	mov	sl, r0
 80110f8:	460c      	mov	r4, r1
 80110fa:	4690      	mov	r8, r2
 80110fc:	d82d      	bhi.n	801115a <__ssputs_r+0x70>
 80110fe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011102:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011106:	d026      	beq.n	8011156 <__ssputs_r+0x6c>
 8011108:	6965      	ldr	r5, [r4, #20]
 801110a:	6909      	ldr	r1, [r1, #16]
 801110c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011110:	eba3 0901 	sub.w	r9, r3, r1
 8011114:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011118:	1c7b      	adds	r3, r7, #1
 801111a:	444b      	add	r3, r9
 801111c:	106d      	asrs	r5, r5, #1
 801111e:	429d      	cmp	r5, r3
 8011120:	bf38      	it	cc
 8011122:	461d      	movcc	r5, r3
 8011124:	0553      	lsls	r3, r2, #21
 8011126:	d527      	bpl.n	8011178 <__ssputs_r+0x8e>
 8011128:	4629      	mov	r1, r5
 801112a:	f7fc faa7 	bl	800d67c <_malloc_r>
 801112e:	4606      	mov	r6, r0
 8011130:	b360      	cbz	r0, 801118c <__ssputs_r+0xa2>
 8011132:	6921      	ldr	r1, [r4, #16]
 8011134:	464a      	mov	r2, r9
 8011136:	f7fe f918 	bl	800f36a <memcpy>
 801113a:	89a3      	ldrh	r3, [r4, #12]
 801113c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011144:	81a3      	strh	r3, [r4, #12]
 8011146:	6126      	str	r6, [r4, #16]
 8011148:	6165      	str	r5, [r4, #20]
 801114a:	444e      	add	r6, r9
 801114c:	eba5 0509 	sub.w	r5, r5, r9
 8011150:	6026      	str	r6, [r4, #0]
 8011152:	60a5      	str	r5, [r4, #8]
 8011154:	463e      	mov	r6, r7
 8011156:	42be      	cmp	r6, r7
 8011158:	d900      	bls.n	801115c <__ssputs_r+0x72>
 801115a:	463e      	mov	r6, r7
 801115c:	6820      	ldr	r0, [r4, #0]
 801115e:	4632      	mov	r2, r6
 8011160:	4641      	mov	r1, r8
 8011162:	f000 fef6 	bl	8011f52 <memmove>
 8011166:	68a3      	ldr	r3, [r4, #8]
 8011168:	1b9b      	subs	r3, r3, r6
 801116a:	60a3      	str	r3, [r4, #8]
 801116c:	6823      	ldr	r3, [r4, #0]
 801116e:	4433      	add	r3, r6
 8011170:	6023      	str	r3, [r4, #0]
 8011172:	2000      	movs	r0, #0
 8011174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011178:	462a      	mov	r2, r5
 801117a:	f7fc fb13 	bl	800d7a4 <_realloc_r>
 801117e:	4606      	mov	r6, r0
 8011180:	2800      	cmp	r0, #0
 8011182:	d1e0      	bne.n	8011146 <__ssputs_r+0x5c>
 8011184:	6921      	ldr	r1, [r4, #16]
 8011186:	4650      	mov	r0, sl
 8011188:	f7fe ff52 	bl	8010030 <_free_r>
 801118c:	230c      	movs	r3, #12
 801118e:	f8ca 3000 	str.w	r3, [sl]
 8011192:	89a3      	ldrh	r3, [r4, #12]
 8011194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011198:	81a3      	strh	r3, [r4, #12]
 801119a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801119e:	e7e9      	b.n	8011174 <__ssputs_r+0x8a>

080111a0 <_svfiprintf_r>:
 80111a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111a4:	4698      	mov	r8, r3
 80111a6:	898b      	ldrh	r3, [r1, #12]
 80111a8:	061b      	lsls	r3, r3, #24
 80111aa:	b09d      	sub	sp, #116	@ 0x74
 80111ac:	4607      	mov	r7, r0
 80111ae:	460d      	mov	r5, r1
 80111b0:	4614      	mov	r4, r2
 80111b2:	d510      	bpl.n	80111d6 <_svfiprintf_r+0x36>
 80111b4:	690b      	ldr	r3, [r1, #16]
 80111b6:	b973      	cbnz	r3, 80111d6 <_svfiprintf_r+0x36>
 80111b8:	2140      	movs	r1, #64	@ 0x40
 80111ba:	f7fc fa5f 	bl	800d67c <_malloc_r>
 80111be:	6028      	str	r0, [r5, #0]
 80111c0:	6128      	str	r0, [r5, #16]
 80111c2:	b930      	cbnz	r0, 80111d2 <_svfiprintf_r+0x32>
 80111c4:	230c      	movs	r3, #12
 80111c6:	603b      	str	r3, [r7, #0]
 80111c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80111cc:	b01d      	add	sp, #116	@ 0x74
 80111ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111d2:	2340      	movs	r3, #64	@ 0x40
 80111d4:	616b      	str	r3, [r5, #20]
 80111d6:	2300      	movs	r3, #0
 80111d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80111da:	2320      	movs	r3, #32
 80111dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80111e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80111e4:	2330      	movs	r3, #48	@ 0x30
 80111e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011384 <_svfiprintf_r+0x1e4>
 80111ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80111ee:	f04f 0901 	mov.w	r9, #1
 80111f2:	4623      	mov	r3, r4
 80111f4:	469a      	mov	sl, r3
 80111f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111fa:	b10a      	cbz	r2, 8011200 <_svfiprintf_r+0x60>
 80111fc:	2a25      	cmp	r2, #37	@ 0x25
 80111fe:	d1f9      	bne.n	80111f4 <_svfiprintf_r+0x54>
 8011200:	ebba 0b04 	subs.w	fp, sl, r4
 8011204:	d00b      	beq.n	801121e <_svfiprintf_r+0x7e>
 8011206:	465b      	mov	r3, fp
 8011208:	4622      	mov	r2, r4
 801120a:	4629      	mov	r1, r5
 801120c:	4638      	mov	r0, r7
 801120e:	f7ff ff6c 	bl	80110ea <__ssputs_r>
 8011212:	3001      	adds	r0, #1
 8011214:	f000 80a7 	beq.w	8011366 <_svfiprintf_r+0x1c6>
 8011218:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801121a:	445a      	add	r2, fp
 801121c:	9209      	str	r2, [sp, #36]	@ 0x24
 801121e:	f89a 3000 	ldrb.w	r3, [sl]
 8011222:	2b00      	cmp	r3, #0
 8011224:	f000 809f 	beq.w	8011366 <_svfiprintf_r+0x1c6>
 8011228:	2300      	movs	r3, #0
 801122a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801122e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011232:	f10a 0a01 	add.w	sl, sl, #1
 8011236:	9304      	str	r3, [sp, #16]
 8011238:	9307      	str	r3, [sp, #28]
 801123a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801123e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011240:	4654      	mov	r4, sl
 8011242:	2205      	movs	r2, #5
 8011244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011248:	484e      	ldr	r0, [pc, #312]	@ (8011384 <_svfiprintf_r+0x1e4>)
 801124a:	f7ee ffd9 	bl	8000200 <memchr>
 801124e:	9a04      	ldr	r2, [sp, #16]
 8011250:	b9d8      	cbnz	r0, 801128a <_svfiprintf_r+0xea>
 8011252:	06d0      	lsls	r0, r2, #27
 8011254:	bf44      	itt	mi
 8011256:	2320      	movmi	r3, #32
 8011258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801125c:	0711      	lsls	r1, r2, #28
 801125e:	bf44      	itt	mi
 8011260:	232b      	movmi	r3, #43	@ 0x2b
 8011262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011266:	f89a 3000 	ldrb.w	r3, [sl]
 801126a:	2b2a      	cmp	r3, #42	@ 0x2a
 801126c:	d015      	beq.n	801129a <_svfiprintf_r+0xfa>
 801126e:	9a07      	ldr	r2, [sp, #28]
 8011270:	4654      	mov	r4, sl
 8011272:	2000      	movs	r0, #0
 8011274:	f04f 0c0a 	mov.w	ip, #10
 8011278:	4621      	mov	r1, r4
 801127a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801127e:	3b30      	subs	r3, #48	@ 0x30
 8011280:	2b09      	cmp	r3, #9
 8011282:	d94b      	bls.n	801131c <_svfiprintf_r+0x17c>
 8011284:	b1b0      	cbz	r0, 80112b4 <_svfiprintf_r+0x114>
 8011286:	9207      	str	r2, [sp, #28]
 8011288:	e014      	b.n	80112b4 <_svfiprintf_r+0x114>
 801128a:	eba0 0308 	sub.w	r3, r0, r8
 801128e:	fa09 f303 	lsl.w	r3, r9, r3
 8011292:	4313      	orrs	r3, r2
 8011294:	9304      	str	r3, [sp, #16]
 8011296:	46a2      	mov	sl, r4
 8011298:	e7d2      	b.n	8011240 <_svfiprintf_r+0xa0>
 801129a:	9b03      	ldr	r3, [sp, #12]
 801129c:	1d19      	adds	r1, r3, #4
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	9103      	str	r1, [sp, #12]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	bfbb      	ittet	lt
 80112a6:	425b      	neglt	r3, r3
 80112a8:	f042 0202 	orrlt.w	r2, r2, #2
 80112ac:	9307      	strge	r3, [sp, #28]
 80112ae:	9307      	strlt	r3, [sp, #28]
 80112b0:	bfb8      	it	lt
 80112b2:	9204      	strlt	r2, [sp, #16]
 80112b4:	7823      	ldrb	r3, [r4, #0]
 80112b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80112b8:	d10a      	bne.n	80112d0 <_svfiprintf_r+0x130>
 80112ba:	7863      	ldrb	r3, [r4, #1]
 80112bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80112be:	d132      	bne.n	8011326 <_svfiprintf_r+0x186>
 80112c0:	9b03      	ldr	r3, [sp, #12]
 80112c2:	1d1a      	adds	r2, r3, #4
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	9203      	str	r2, [sp, #12]
 80112c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80112cc:	3402      	adds	r4, #2
 80112ce:	9305      	str	r3, [sp, #20]
 80112d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011394 <_svfiprintf_r+0x1f4>
 80112d4:	7821      	ldrb	r1, [r4, #0]
 80112d6:	2203      	movs	r2, #3
 80112d8:	4650      	mov	r0, sl
 80112da:	f7ee ff91 	bl	8000200 <memchr>
 80112de:	b138      	cbz	r0, 80112f0 <_svfiprintf_r+0x150>
 80112e0:	9b04      	ldr	r3, [sp, #16]
 80112e2:	eba0 000a 	sub.w	r0, r0, sl
 80112e6:	2240      	movs	r2, #64	@ 0x40
 80112e8:	4082      	lsls	r2, r0
 80112ea:	4313      	orrs	r3, r2
 80112ec:	3401      	adds	r4, #1
 80112ee:	9304      	str	r3, [sp, #16]
 80112f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112f4:	4824      	ldr	r0, [pc, #144]	@ (8011388 <_svfiprintf_r+0x1e8>)
 80112f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80112fa:	2206      	movs	r2, #6
 80112fc:	f7ee ff80 	bl	8000200 <memchr>
 8011300:	2800      	cmp	r0, #0
 8011302:	d036      	beq.n	8011372 <_svfiprintf_r+0x1d2>
 8011304:	4b21      	ldr	r3, [pc, #132]	@ (801138c <_svfiprintf_r+0x1ec>)
 8011306:	bb1b      	cbnz	r3, 8011350 <_svfiprintf_r+0x1b0>
 8011308:	9b03      	ldr	r3, [sp, #12]
 801130a:	3307      	adds	r3, #7
 801130c:	f023 0307 	bic.w	r3, r3, #7
 8011310:	3308      	adds	r3, #8
 8011312:	9303      	str	r3, [sp, #12]
 8011314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011316:	4433      	add	r3, r6
 8011318:	9309      	str	r3, [sp, #36]	@ 0x24
 801131a:	e76a      	b.n	80111f2 <_svfiprintf_r+0x52>
 801131c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011320:	460c      	mov	r4, r1
 8011322:	2001      	movs	r0, #1
 8011324:	e7a8      	b.n	8011278 <_svfiprintf_r+0xd8>
 8011326:	2300      	movs	r3, #0
 8011328:	3401      	adds	r4, #1
 801132a:	9305      	str	r3, [sp, #20]
 801132c:	4619      	mov	r1, r3
 801132e:	f04f 0c0a 	mov.w	ip, #10
 8011332:	4620      	mov	r0, r4
 8011334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011338:	3a30      	subs	r2, #48	@ 0x30
 801133a:	2a09      	cmp	r2, #9
 801133c:	d903      	bls.n	8011346 <_svfiprintf_r+0x1a6>
 801133e:	2b00      	cmp	r3, #0
 8011340:	d0c6      	beq.n	80112d0 <_svfiprintf_r+0x130>
 8011342:	9105      	str	r1, [sp, #20]
 8011344:	e7c4      	b.n	80112d0 <_svfiprintf_r+0x130>
 8011346:	fb0c 2101 	mla	r1, ip, r1, r2
 801134a:	4604      	mov	r4, r0
 801134c:	2301      	movs	r3, #1
 801134e:	e7f0      	b.n	8011332 <_svfiprintf_r+0x192>
 8011350:	ab03      	add	r3, sp, #12
 8011352:	9300      	str	r3, [sp, #0]
 8011354:	462a      	mov	r2, r5
 8011356:	4b0e      	ldr	r3, [pc, #56]	@ (8011390 <_svfiprintf_r+0x1f0>)
 8011358:	a904      	add	r1, sp, #16
 801135a:	4638      	mov	r0, r7
 801135c:	f7fd f900 	bl	800e560 <_printf_float>
 8011360:	1c42      	adds	r2, r0, #1
 8011362:	4606      	mov	r6, r0
 8011364:	d1d6      	bne.n	8011314 <_svfiprintf_r+0x174>
 8011366:	89ab      	ldrh	r3, [r5, #12]
 8011368:	065b      	lsls	r3, r3, #25
 801136a:	f53f af2d 	bmi.w	80111c8 <_svfiprintf_r+0x28>
 801136e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011370:	e72c      	b.n	80111cc <_svfiprintf_r+0x2c>
 8011372:	ab03      	add	r3, sp, #12
 8011374:	9300      	str	r3, [sp, #0]
 8011376:	462a      	mov	r2, r5
 8011378:	4b05      	ldr	r3, [pc, #20]	@ (8011390 <_svfiprintf_r+0x1f0>)
 801137a:	a904      	add	r1, sp, #16
 801137c:	4638      	mov	r0, r7
 801137e:	f7fd fb87 	bl	800ea90 <_printf_i>
 8011382:	e7ed      	b.n	8011360 <_svfiprintf_r+0x1c0>
 8011384:	08013b48 	.word	0x08013b48
 8011388:	08013b52 	.word	0x08013b52
 801138c:	0800e561 	.word	0x0800e561
 8011390:	080110eb 	.word	0x080110eb
 8011394:	08013b4e 	.word	0x08013b4e

08011398 <_sungetc_r>:
 8011398:	b538      	push	{r3, r4, r5, lr}
 801139a:	1c4b      	adds	r3, r1, #1
 801139c:	4614      	mov	r4, r2
 801139e:	d103      	bne.n	80113a8 <_sungetc_r+0x10>
 80113a0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80113a4:	4628      	mov	r0, r5
 80113a6:	bd38      	pop	{r3, r4, r5, pc}
 80113a8:	8993      	ldrh	r3, [r2, #12]
 80113aa:	f023 0320 	bic.w	r3, r3, #32
 80113ae:	8193      	strh	r3, [r2, #12]
 80113b0:	6853      	ldr	r3, [r2, #4]
 80113b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80113b4:	b2cd      	uxtb	r5, r1
 80113b6:	b18a      	cbz	r2, 80113dc <_sungetc_r+0x44>
 80113b8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80113ba:	429a      	cmp	r2, r3
 80113bc:	dd08      	ble.n	80113d0 <_sungetc_r+0x38>
 80113be:	6823      	ldr	r3, [r4, #0]
 80113c0:	1e5a      	subs	r2, r3, #1
 80113c2:	6022      	str	r2, [r4, #0]
 80113c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80113c8:	6863      	ldr	r3, [r4, #4]
 80113ca:	3301      	adds	r3, #1
 80113cc:	6063      	str	r3, [r4, #4]
 80113ce:	e7e9      	b.n	80113a4 <_sungetc_r+0xc>
 80113d0:	4621      	mov	r1, r4
 80113d2:	f000 fd84 	bl	8011ede <__submore>
 80113d6:	2800      	cmp	r0, #0
 80113d8:	d0f1      	beq.n	80113be <_sungetc_r+0x26>
 80113da:	e7e1      	b.n	80113a0 <_sungetc_r+0x8>
 80113dc:	6921      	ldr	r1, [r4, #16]
 80113de:	6822      	ldr	r2, [r4, #0]
 80113e0:	b141      	cbz	r1, 80113f4 <_sungetc_r+0x5c>
 80113e2:	4291      	cmp	r1, r2
 80113e4:	d206      	bcs.n	80113f4 <_sungetc_r+0x5c>
 80113e6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80113ea:	42a9      	cmp	r1, r5
 80113ec:	d102      	bne.n	80113f4 <_sungetc_r+0x5c>
 80113ee:	3a01      	subs	r2, #1
 80113f0:	6022      	str	r2, [r4, #0]
 80113f2:	e7ea      	b.n	80113ca <_sungetc_r+0x32>
 80113f4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80113f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80113fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80113fe:	2303      	movs	r3, #3
 8011400:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011402:	4623      	mov	r3, r4
 8011404:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011408:	6023      	str	r3, [r4, #0]
 801140a:	2301      	movs	r3, #1
 801140c:	e7de      	b.n	80113cc <_sungetc_r+0x34>

0801140e <__ssrefill_r>:
 801140e:	b510      	push	{r4, lr}
 8011410:	460c      	mov	r4, r1
 8011412:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011414:	b169      	cbz	r1, 8011432 <__ssrefill_r+0x24>
 8011416:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801141a:	4299      	cmp	r1, r3
 801141c:	d001      	beq.n	8011422 <__ssrefill_r+0x14>
 801141e:	f7fe fe07 	bl	8010030 <_free_r>
 8011422:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011424:	6063      	str	r3, [r4, #4]
 8011426:	2000      	movs	r0, #0
 8011428:	6360      	str	r0, [r4, #52]	@ 0x34
 801142a:	b113      	cbz	r3, 8011432 <__ssrefill_r+0x24>
 801142c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801142e:	6023      	str	r3, [r4, #0]
 8011430:	bd10      	pop	{r4, pc}
 8011432:	6923      	ldr	r3, [r4, #16]
 8011434:	6023      	str	r3, [r4, #0]
 8011436:	2300      	movs	r3, #0
 8011438:	6063      	str	r3, [r4, #4]
 801143a:	89a3      	ldrh	r3, [r4, #12]
 801143c:	f043 0320 	orr.w	r3, r3, #32
 8011440:	81a3      	strh	r3, [r4, #12]
 8011442:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011446:	e7f3      	b.n	8011430 <__ssrefill_r+0x22>

08011448 <__ssvfiscanf_r>:
 8011448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801144c:	460c      	mov	r4, r1
 801144e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8011452:	2100      	movs	r1, #0
 8011454:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011458:	49a5      	ldr	r1, [pc, #660]	@ (80116f0 <__ssvfiscanf_r+0x2a8>)
 801145a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801145c:	f10d 0804 	add.w	r8, sp, #4
 8011460:	49a4      	ldr	r1, [pc, #656]	@ (80116f4 <__ssvfiscanf_r+0x2ac>)
 8011462:	4fa5      	ldr	r7, [pc, #660]	@ (80116f8 <__ssvfiscanf_r+0x2b0>)
 8011464:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011468:	4606      	mov	r6, r0
 801146a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801146c:	9300      	str	r3, [sp, #0]
 801146e:	7813      	ldrb	r3, [r2, #0]
 8011470:	2b00      	cmp	r3, #0
 8011472:	f000 8158 	beq.w	8011726 <__ssvfiscanf_r+0x2de>
 8011476:	5cf9      	ldrb	r1, [r7, r3]
 8011478:	f011 0108 	ands.w	r1, r1, #8
 801147c:	f102 0501 	add.w	r5, r2, #1
 8011480:	d019      	beq.n	80114b6 <__ssvfiscanf_r+0x6e>
 8011482:	6863      	ldr	r3, [r4, #4]
 8011484:	2b00      	cmp	r3, #0
 8011486:	dd0f      	ble.n	80114a8 <__ssvfiscanf_r+0x60>
 8011488:	6823      	ldr	r3, [r4, #0]
 801148a:	781a      	ldrb	r2, [r3, #0]
 801148c:	5cba      	ldrb	r2, [r7, r2]
 801148e:	0712      	lsls	r2, r2, #28
 8011490:	d401      	bmi.n	8011496 <__ssvfiscanf_r+0x4e>
 8011492:	462a      	mov	r2, r5
 8011494:	e7eb      	b.n	801146e <__ssvfiscanf_r+0x26>
 8011496:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8011498:	3201      	adds	r2, #1
 801149a:	9245      	str	r2, [sp, #276]	@ 0x114
 801149c:	6862      	ldr	r2, [r4, #4]
 801149e:	3301      	adds	r3, #1
 80114a0:	3a01      	subs	r2, #1
 80114a2:	6062      	str	r2, [r4, #4]
 80114a4:	6023      	str	r3, [r4, #0]
 80114a6:	e7ec      	b.n	8011482 <__ssvfiscanf_r+0x3a>
 80114a8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80114aa:	4621      	mov	r1, r4
 80114ac:	4630      	mov	r0, r6
 80114ae:	4798      	blx	r3
 80114b0:	2800      	cmp	r0, #0
 80114b2:	d0e9      	beq.n	8011488 <__ssvfiscanf_r+0x40>
 80114b4:	e7ed      	b.n	8011492 <__ssvfiscanf_r+0x4a>
 80114b6:	2b25      	cmp	r3, #37	@ 0x25
 80114b8:	d012      	beq.n	80114e0 <__ssvfiscanf_r+0x98>
 80114ba:	4699      	mov	r9, r3
 80114bc:	6863      	ldr	r3, [r4, #4]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	f340 8093 	ble.w	80115ea <__ssvfiscanf_r+0x1a2>
 80114c4:	6822      	ldr	r2, [r4, #0]
 80114c6:	7813      	ldrb	r3, [r2, #0]
 80114c8:	454b      	cmp	r3, r9
 80114ca:	f040 812c 	bne.w	8011726 <__ssvfiscanf_r+0x2de>
 80114ce:	6863      	ldr	r3, [r4, #4]
 80114d0:	3b01      	subs	r3, #1
 80114d2:	6063      	str	r3, [r4, #4]
 80114d4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80114d6:	3201      	adds	r2, #1
 80114d8:	3301      	adds	r3, #1
 80114da:	6022      	str	r2, [r4, #0]
 80114dc:	9345      	str	r3, [sp, #276]	@ 0x114
 80114de:	e7d8      	b.n	8011492 <__ssvfiscanf_r+0x4a>
 80114e0:	9141      	str	r1, [sp, #260]	@ 0x104
 80114e2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80114e4:	7853      	ldrb	r3, [r2, #1]
 80114e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80114e8:	bf02      	ittt	eq
 80114ea:	2310      	moveq	r3, #16
 80114ec:	1c95      	addeq	r5, r2, #2
 80114ee:	9341      	streq	r3, [sp, #260]	@ 0x104
 80114f0:	220a      	movs	r2, #10
 80114f2:	46a9      	mov	r9, r5
 80114f4:	f819 1b01 	ldrb.w	r1, [r9], #1
 80114f8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80114fc:	2b09      	cmp	r3, #9
 80114fe:	d91e      	bls.n	801153e <__ssvfiscanf_r+0xf6>
 8011500:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80116fc <__ssvfiscanf_r+0x2b4>
 8011504:	2203      	movs	r2, #3
 8011506:	4650      	mov	r0, sl
 8011508:	f7ee fe7a 	bl	8000200 <memchr>
 801150c:	b138      	cbz	r0, 801151e <__ssvfiscanf_r+0xd6>
 801150e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011510:	eba0 000a 	sub.w	r0, r0, sl
 8011514:	2301      	movs	r3, #1
 8011516:	4083      	lsls	r3, r0
 8011518:	4313      	orrs	r3, r2
 801151a:	9341      	str	r3, [sp, #260]	@ 0x104
 801151c:	464d      	mov	r5, r9
 801151e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011522:	2b78      	cmp	r3, #120	@ 0x78
 8011524:	d806      	bhi.n	8011534 <__ssvfiscanf_r+0xec>
 8011526:	2b57      	cmp	r3, #87	@ 0x57
 8011528:	d810      	bhi.n	801154c <__ssvfiscanf_r+0x104>
 801152a:	2b25      	cmp	r3, #37	@ 0x25
 801152c:	d0c5      	beq.n	80114ba <__ssvfiscanf_r+0x72>
 801152e:	d857      	bhi.n	80115e0 <__ssvfiscanf_r+0x198>
 8011530:	2b00      	cmp	r3, #0
 8011532:	d065      	beq.n	8011600 <__ssvfiscanf_r+0x1b8>
 8011534:	2303      	movs	r3, #3
 8011536:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011538:	230a      	movs	r3, #10
 801153a:	9342      	str	r3, [sp, #264]	@ 0x108
 801153c:	e078      	b.n	8011630 <__ssvfiscanf_r+0x1e8>
 801153e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011540:	fb02 1103 	mla	r1, r2, r3, r1
 8011544:	3930      	subs	r1, #48	@ 0x30
 8011546:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011548:	464d      	mov	r5, r9
 801154a:	e7d2      	b.n	80114f2 <__ssvfiscanf_r+0xaa>
 801154c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8011550:	2a20      	cmp	r2, #32
 8011552:	d8ef      	bhi.n	8011534 <__ssvfiscanf_r+0xec>
 8011554:	a101      	add	r1, pc, #4	@ (adr r1, 801155c <__ssvfiscanf_r+0x114>)
 8011556:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801155a:	bf00      	nop
 801155c:	0801160f 	.word	0x0801160f
 8011560:	08011535 	.word	0x08011535
 8011564:	08011535 	.word	0x08011535
 8011568:	08011669 	.word	0x08011669
 801156c:	08011535 	.word	0x08011535
 8011570:	08011535 	.word	0x08011535
 8011574:	08011535 	.word	0x08011535
 8011578:	08011535 	.word	0x08011535
 801157c:	08011535 	.word	0x08011535
 8011580:	08011535 	.word	0x08011535
 8011584:	08011535 	.word	0x08011535
 8011588:	0801167f 	.word	0x0801167f
 801158c:	08011665 	.word	0x08011665
 8011590:	080115e7 	.word	0x080115e7
 8011594:	080115e7 	.word	0x080115e7
 8011598:	080115e7 	.word	0x080115e7
 801159c:	08011535 	.word	0x08011535
 80115a0:	08011621 	.word	0x08011621
 80115a4:	08011535 	.word	0x08011535
 80115a8:	08011535 	.word	0x08011535
 80115ac:	08011535 	.word	0x08011535
 80115b0:	08011535 	.word	0x08011535
 80115b4:	0801168f 	.word	0x0801168f
 80115b8:	08011629 	.word	0x08011629
 80115bc:	08011607 	.word	0x08011607
 80115c0:	08011535 	.word	0x08011535
 80115c4:	08011535 	.word	0x08011535
 80115c8:	0801168b 	.word	0x0801168b
 80115cc:	08011535 	.word	0x08011535
 80115d0:	08011665 	.word	0x08011665
 80115d4:	08011535 	.word	0x08011535
 80115d8:	08011535 	.word	0x08011535
 80115dc:	0801160f 	.word	0x0801160f
 80115e0:	3b45      	subs	r3, #69	@ 0x45
 80115e2:	2b02      	cmp	r3, #2
 80115e4:	d8a6      	bhi.n	8011534 <__ssvfiscanf_r+0xec>
 80115e6:	2305      	movs	r3, #5
 80115e8:	e021      	b.n	801162e <__ssvfiscanf_r+0x1e6>
 80115ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80115ec:	4621      	mov	r1, r4
 80115ee:	4630      	mov	r0, r6
 80115f0:	4798      	blx	r3
 80115f2:	2800      	cmp	r0, #0
 80115f4:	f43f af66 	beq.w	80114c4 <__ssvfiscanf_r+0x7c>
 80115f8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80115fa:	2800      	cmp	r0, #0
 80115fc:	f040 808b 	bne.w	8011716 <__ssvfiscanf_r+0x2ce>
 8011600:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011604:	e08b      	b.n	801171e <__ssvfiscanf_r+0x2d6>
 8011606:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011608:	f042 0220 	orr.w	r2, r2, #32
 801160c:	9241      	str	r2, [sp, #260]	@ 0x104
 801160e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011610:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011614:	9241      	str	r2, [sp, #260]	@ 0x104
 8011616:	2210      	movs	r2, #16
 8011618:	2b6e      	cmp	r3, #110	@ 0x6e
 801161a:	9242      	str	r2, [sp, #264]	@ 0x108
 801161c:	d902      	bls.n	8011624 <__ssvfiscanf_r+0x1dc>
 801161e:	e005      	b.n	801162c <__ssvfiscanf_r+0x1e4>
 8011620:	2300      	movs	r3, #0
 8011622:	9342      	str	r3, [sp, #264]	@ 0x108
 8011624:	2303      	movs	r3, #3
 8011626:	e002      	b.n	801162e <__ssvfiscanf_r+0x1e6>
 8011628:	2308      	movs	r3, #8
 801162a:	9342      	str	r3, [sp, #264]	@ 0x108
 801162c:	2304      	movs	r3, #4
 801162e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8011630:	6863      	ldr	r3, [r4, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	dd39      	ble.n	80116aa <__ssvfiscanf_r+0x262>
 8011636:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011638:	0659      	lsls	r1, r3, #25
 801163a:	d404      	bmi.n	8011646 <__ssvfiscanf_r+0x1fe>
 801163c:	6823      	ldr	r3, [r4, #0]
 801163e:	781a      	ldrb	r2, [r3, #0]
 8011640:	5cba      	ldrb	r2, [r7, r2]
 8011642:	0712      	lsls	r2, r2, #28
 8011644:	d438      	bmi.n	80116b8 <__ssvfiscanf_r+0x270>
 8011646:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8011648:	2b02      	cmp	r3, #2
 801164a:	dc47      	bgt.n	80116dc <__ssvfiscanf_r+0x294>
 801164c:	466b      	mov	r3, sp
 801164e:	4622      	mov	r2, r4
 8011650:	a941      	add	r1, sp, #260	@ 0x104
 8011652:	4630      	mov	r0, r6
 8011654:	f000 f9ae 	bl	80119b4 <_scanf_chars>
 8011658:	2801      	cmp	r0, #1
 801165a:	d064      	beq.n	8011726 <__ssvfiscanf_r+0x2de>
 801165c:	2802      	cmp	r0, #2
 801165e:	f47f af18 	bne.w	8011492 <__ssvfiscanf_r+0x4a>
 8011662:	e7c9      	b.n	80115f8 <__ssvfiscanf_r+0x1b0>
 8011664:	220a      	movs	r2, #10
 8011666:	e7d7      	b.n	8011618 <__ssvfiscanf_r+0x1d0>
 8011668:	4629      	mov	r1, r5
 801166a:	4640      	mov	r0, r8
 801166c:	f000 fbfe 	bl	8011e6c <__sccl>
 8011670:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011676:	9341      	str	r3, [sp, #260]	@ 0x104
 8011678:	4605      	mov	r5, r0
 801167a:	2301      	movs	r3, #1
 801167c:	e7d7      	b.n	801162e <__ssvfiscanf_r+0x1e6>
 801167e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011684:	9341      	str	r3, [sp, #260]	@ 0x104
 8011686:	2300      	movs	r3, #0
 8011688:	e7d1      	b.n	801162e <__ssvfiscanf_r+0x1e6>
 801168a:	2302      	movs	r3, #2
 801168c:	e7cf      	b.n	801162e <__ssvfiscanf_r+0x1e6>
 801168e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011690:	06c3      	lsls	r3, r0, #27
 8011692:	f53f aefe 	bmi.w	8011492 <__ssvfiscanf_r+0x4a>
 8011696:	9b00      	ldr	r3, [sp, #0]
 8011698:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801169a:	1d19      	adds	r1, r3, #4
 801169c:	9100      	str	r1, [sp, #0]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	07c0      	lsls	r0, r0, #31
 80116a2:	bf4c      	ite	mi
 80116a4:	801a      	strhmi	r2, [r3, #0]
 80116a6:	601a      	strpl	r2, [r3, #0]
 80116a8:	e6f3      	b.n	8011492 <__ssvfiscanf_r+0x4a>
 80116aa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80116ac:	4621      	mov	r1, r4
 80116ae:	4630      	mov	r0, r6
 80116b0:	4798      	blx	r3
 80116b2:	2800      	cmp	r0, #0
 80116b4:	d0bf      	beq.n	8011636 <__ssvfiscanf_r+0x1ee>
 80116b6:	e79f      	b.n	80115f8 <__ssvfiscanf_r+0x1b0>
 80116b8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80116ba:	3201      	adds	r2, #1
 80116bc:	9245      	str	r2, [sp, #276]	@ 0x114
 80116be:	6862      	ldr	r2, [r4, #4]
 80116c0:	3a01      	subs	r2, #1
 80116c2:	2a00      	cmp	r2, #0
 80116c4:	6062      	str	r2, [r4, #4]
 80116c6:	dd02      	ble.n	80116ce <__ssvfiscanf_r+0x286>
 80116c8:	3301      	adds	r3, #1
 80116ca:	6023      	str	r3, [r4, #0]
 80116cc:	e7b6      	b.n	801163c <__ssvfiscanf_r+0x1f4>
 80116ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80116d0:	4621      	mov	r1, r4
 80116d2:	4630      	mov	r0, r6
 80116d4:	4798      	blx	r3
 80116d6:	2800      	cmp	r0, #0
 80116d8:	d0b0      	beq.n	801163c <__ssvfiscanf_r+0x1f4>
 80116da:	e78d      	b.n	80115f8 <__ssvfiscanf_r+0x1b0>
 80116dc:	2b04      	cmp	r3, #4
 80116de:	dc0f      	bgt.n	8011700 <__ssvfiscanf_r+0x2b8>
 80116e0:	466b      	mov	r3, sp
 80116e2:	4622      	mov	r2, r4
 80116e4:	a941      	add	r1, sp, #260	@ 0x104
 80116e6:	4630      	mov	r0, r6
 80116e8:	f000 f9be 	bl	8011a68 <_scanf_i>
 80116ec:	e7b4      	b.n	8011658 <__ssvfiscanf_r+0x210>
 80116ee:	bf00      	nop
 80116f0:	08011399 	.word	0x08011399
 80116f4:	0801140f 	.word	0x0801140f
 80116f8:	080137c9 	.word	0x080137c9
 80116fc:	08013b4e 	.word	0x08013b4e
 8011700:	4b0a      	ldr	r3, [pc, #40]	@ (801172c <__ssvfiscanf_r+0x2e4>)
 8011702:	2b00      	cmp	r3, #0
 8011704:	f43f aec5 	beq.w	8011492 <__ssvfiscanf_r+0x4a>
 8011708:	466b      	mov	r3, sp
 801170a:	4622      	mov	r2, r4
 801170c:	a941      	add	r1, sp, #260	@ 0x104
 801170e:	4630      	mov	r0, r6
 8011710:	f3af 8000 	nop.w
 8011714:	e7a0      	b.n	8011658 <__ssvfiscanf_r+0x210>
 8011716:	89a3      	ldrh	r3, [r4, #12]
 8011718:	065b      	lsls	r3, r3, #25
 801171a:	f53f af71 	bmi.w	8011600 <__ssvfiscanf_r+0x1b8>
 801171e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8011722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011726:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8011728:	e7f9      	b.n	801171e <__ssvfiscanf_r+0x2d6>
 801172a:	bf00      	nop
 801172c:	00000000 	.word	0x00000000

08011730 <__sfputc_r>:
 8011730:	6893      	ldr	r3, [r2, #8]
 8011732:	3b01      	subs	r3, #1
 8011734:	2b00      	cmp	r3, #0
 8011736:	b410      	push	{r4}
 8011738:	6093      	str	r3, [r2, #8]
 801173a:	da08      	bge.n	801174e <__sfputc_r+0x1e>
 801173c:	6994      	ldr	r4, [r2, #24]
 801173e:	42a3      	cmp	r3, r4
 8011740:	db01      	blt.n	8011746 <__sfputc_r+0x16>
 8011742:	290a      	cmp	r1, #10
 8011744:	d103      	bne.n	801174e <__sfputc_r+0x1e>
 8011746:	f85d 4b04 	ldr.w	r4, [sp], #4
 801174a:	f7fd bc82 	b.w	800f052 <__swbuf_r>
 801174e:	6813      	ldr	r3, [r2, #0]
 8011750:	1c58      	adds	r0, r3, #1
 8011752:	6010      	str	r0, [r2, #0]
 8011754:	7019      	strb	r1, [r3, #0]
 8011756:	4608      	mov	r0, r1
 8011758:	f85d 4b04 	ldr.w	r4, [sp], #4
 801175c:	4770      	bx	lr

0801175e <__sfputs_r>:
 801175e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011760:	4606      	mov	r6, r0
 8011762:	460f      	mov	r7, r1
 8011764:	4614      	mov	r4, r2
 8011766:	18d5      	adds	r5, r2, r3
 8011768:	42ac      	cmp	r4, r5
 801176a:	d101      	bne.n	8011770 <__sfputs_r+0x12>
 801176c:	2000      	movs	r0, #0
 801176e:	e007      	b.n	8011780 <__sfputs_r+0x22>
 8011770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011774:	463a      	mov	r2, r7
 8011776:	4630      	mov	r0, r6
 8011778:	f7ff ffda 	bl	8011730 <__sfputc_r>
 801177c:	1c43      	adds	r3, r0, #1
 801177e:	d1f3      	bne.n	8011768 <__sfputs_r+0xa>
 8011780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011784 <_vfiprintf_r>:
 8011784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011788:	460d      	mov	r5, r1
 801178a:	b09d      	sub	sp, #116	@ 0x74
 801178c:	4614      	mov	r4, r2
 801178e:	4698      	mov	r8, r3
 8011790:	4606      	mov	r6, r0
 8011792:	b118      	cbz	r0, 801179c <_vfiprintf_r+0x18>
 8011794:	6a03      	ldr	r3, [r0, #32]
 8011796:	b90b      	cbnz	r3, 801179c <_vfiprintf_r+0x18>
 8011798:	f7fd fb26 	bl	800ede8 <__sinit>
 801179c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801179e:	07d9      	lsls	r1, r3, #31
 80117a0:	d405      	bmi.n	80117ae <_vfiprintf_r+0x2a>
 80117a2:	89ab      	ldrh	r3, [r5, #12]
 80117a4:	059a      	lsls	r2, r3, #22
 80117a6:	d402      	bmi.n	80117ae <_vfiprintf_r+0x2a>
 80117a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117aa:	f7fd fddc 	bl	800f366 <__retarget_lock_acquire_recursive>
 80117ae:	89ab      	ldrh	r3, [r5, #12]
 80117b0:	071b      	lsls	r3, r3, #28
 80117b2:	d501      	bpl.n	80117b8 <_vfiprintf_r+0x34>
 80117b4:	692b      	ldr	r3, [r5, #16]
 80117b6:	b99b      	cbnz	r3, 80117e0 <_vfiprintf_r+0x5c>
 80117b8:	4629      	mov	r1, r5
 80117ba:	4630      	mov	r0, r6
 80117bc:	f7fd fc88 	bl	800f0d0 <__swsetup_r>
 80117c0:	b170      	cbz	r0, 80117e0 <_vfiprintf_r+0x5c>
 80117c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80117c4:	07dc      	lsls	r4, r3, #31
 80117c6:	d504      	bpl.n	80117d2 <_vfiprintf_r+0x4e>
 80117c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80117cc:	b01d      	add	sp, #116	@ 0x74
 80117ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117d2:	89ab      	ldrh	r3, [r5, #12]
 80117d4:	0598      	lsls	r0, r3, #22
 80117d6:	d4f7      	bmi.n	80117c8 <_vfiprintf_r+0x44>
 80117d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117da:	f7fd fdc5 	bl	800f368 <__retarget_lock_release_recursive>
 80117de:	e7f3      	b.n	80117c8 <_vfiprintf_r+0x44>
 80117e0:	2300      	movs	r3, #0
 80117e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80117e4:	2320      	movs	r3, #32
 80117e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80117ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80117ee:	2330      	movs	r3, #48	@ 0x30
 80117f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80119a0 <_vfiprintf_r+0x21c>
 80117f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80117f8:	f04f 0901 	mov.w	r9, #1
 80117fc:	4623      	mov	r3, r4
 80117fe:	469a      	mov	sl, r3
 8011800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011804:	b10a      	cbz	r2, 801180a <_vfiprintf_r+0x86>
 8011806:	2a25      	cmp	r2, #37	@ 0x25
 8011808:	d1f9      	bne.n	80117fe <_vfiprintf_r+0x7a>
 801180a:	ebba 0b04 	subs.w	fp, sl, r4
 801180e:	d00b      	beq.n	8011828 <_vfiprintf_r+0xa4>
 8011810:	465b      	mov	r3, fp
 8011812:	4622      	mov	r2, r4
 8011814:	4629      	mov	r1, r5
 8011816:	4630      	mov	r0, r6
 8011818:	f7ff ffa1 	bl	801175e <__sfputs_r>
 801181c:	3001      	adds	r0, #1
 801181e:	f000 80a7 	beq.w	8011970 <_vfiprintf_r+0x1ec>
 8011822:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011824:	445a      	add	r2, fp
 8011826:	9209      	str	r2, [sp, #36]	@ 0x24
 8011828:	f89a 3000 	ldrb.w	r3, [sl]
 801182c:	2b00      	cmp	r3, #0
 801182e:	f000 809f 	beq.w	8011970 <_vfiprintf_r+0x1ec>
 8011832:	2300      	movs	r3, #0
 8011834:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801183c:	f10a 0a01 	add.w	sl, sl, #1
 8011840:	9304      	str	r3, [sp, #16]
 8011842:	9307      	str	r3, [sp, #28]
 8011844:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011848:	931a      	str	r3, [sp, #104]	@ 0x68
 801184a:	4654      	mov	r4, sl
 801184c:	2205      	movs	r2, #5
 801184e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011852:	4853      	ldr	r0, [pc, #332]	@ (80119a0 <_vfiprintf_r+0x21c>)
 8011854:	f7ee fcd4 	bl	8000200 <memchr>
 8011858:	9a04      	ldr	r2, [sp, #16]
 801185a:	b9d8      	cbnz	r0, 8011894 <_vfiprintf_r+0x110>
 801185c:	06d1      	lsls	r1, r2, #27
 801185e:	bf44      	itt	mi
 8011860:	2320      	movmi	r3, #32
 8011862:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011866:	0713      	lsls	r3, r2, #28
 8011868:	bf44      	itt	mi
 801186a:	232b      	movmi	r3, #43	@ 0x2b
 801186c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011870:	f89a 3000 	ldrb.w	r3, [sl]
 8011874:	2b2a      	cmp	r3, #42	@ 0x2a
 8011876:	d015      	beq.n	80118a4 <_vfiprintf_r+0x120>
 8011878:	9a07      	ldr	r2, [sp, #28]
 801187a:	4654      	mov	r4, sl
 801187c:	2000      	movs	r0, #0
 801187e:	f04f 0c0a 	mov.w	ip, #10
 8011882:	4621      	mov	r1, r4
 8011884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011888:	3b30      	subs	r3, #48	@ 0x30
 801188a:	2b09      	cmp	r3, #9
 801188c:	d94b      	bls.n	8011926 <_vfiprintf_r+0x1a2>
 801188e:	b1b0      	cbz	r0, 80118be <_vfiprintf_r+0x13a>
 8011890:	9207      	str	r2, [sp, #28]
 8011892:	e014      	b.n	80118be <_vfiprintf_r+0x13a>
 8011894:	eba0 0308 	sub.w	r3, r0, r8
 8011898:	fa09 f303 	lsl.w	r3, r9, r3
 801189c:	4313      	orrs	r3, r2
 801189e:	9304      	str	r3, [sp, #16]
 80118a0:	46a2      	mov	sl, r4
 80118a2:	e7d2      	b.n	801184a <_vfiprintf_r+0xc6>
 80118a4:	9b03      	ldr	r3, [sp, #12]
 80118a6:	1d19      	adds	r1, r3, #4
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	9103      	str	r1, [sp, #12]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	bfbb      	ittet	lt
 80118b0:	425b      	neglt	r3, r3
 80118b2:	f042 0202 	orrlt.w	r2, r2, #2
 80118b6:	9307      	strge	r3, [sp, #28]
 80118b8:	9307      	strlt	r3, [sp, #28]
 80118ba:	bfb8      	it	lt
 80118bc:	9204      	strlt	r2, [sp, #16]
 80118be:	7823      	ldrb	r3, [r4, #0]
 80118c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80118c2:	d10a      	bne.n	80118da <_vfiprintf_r+0x156>
 80118c4:	7863      	ldrb	r3, [r4, #1]
 80118c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80118c8:	d132      	bne.n	8011930 <_vfiprintf_r+0x1ac>
 80118ca:	9b03      	ldr	r3, [sp, #12]
 80118cc:	1d1a      	adds	r2, r3, #4
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	9203      	str	r2, [sp, #12]
 80118d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80118d6:	3402      	adds	r4, #2
 80118d8:	9305      	str	r3, [sp, #20]
 80118da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80119b0 <_vfiprintf_r+0x22c>
 80118de:	7821      	ldrb	r1, [r4, #0]
 80118e0:	2203      	movs	r2, #3
 80118e2:	4650      	mov	r0, sl
 80118e4:	f7ee fc8c 	bl	8000200 <memchr>
 80118e8:	b138      	cbz	r0, 80118fa <_vfiprintf_r+0x176>
 80118ea:	9b04      	ldr	r3, [sp, #16]
 80118ec:	eba0 000a 	sub.w	r0, r0, sl
 80118f0:	2240      	movs	r2, #64	@ 0x40
 80118f2:	4082      	lsls	r2, r0
 80118f4:	4313      	orrs	r3, r2
 80118f6:	3401      	adds	r4, #1
 80118f8:	9304      	str	r3, [sp, #16]
 80118fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118fe:	4829      	ldr	r0, [pc, #164]	@ (80119a4 <_vfiprintf_r+0x220>)
 8011900:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011904:	2206      	movs	r2, #6
 8011906:	f7ee fc7b 	bl	8000200 <memchr>
 801190a:	2800      	cmp	r0, #0
 801190c:	d03f      	beq.n	801198e <_vfiprintf_r+0x20a>
 801190e:	4b26      	ldr	r3, [pc, #152]	@ (80119a8 <_vfiprintf_r+0x224>)
 8011910:	bb1b      	cbnz	r3, 801195a <_vfiprintf_r+0x1d6>
 8011912:	9b03      	ldr	r3, [sp, #12]
 8011914:	3307      	adds	r3, #7
 8011916:	f023 0307 	bic.w	r3, r3, #7
 801191a:	3308      	adds	r3, #8
 801191c:	9303      	str	r3, [sp, #12]
 801191e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011920:	443b      	add	r3, r7
 8011922:	9309      	str	r3, [sp, #36]	@ 0x24
 8011924:	e76a      	b.n	80117fc <_vfiprintf_r+0x78>
 8011926:	fb0c 3202 	mla	r2, ip, r2, r3
 801192a:	460c      	mov	r4, r1
 801192c:	2001      	movs	r0, #1
 801192e:	e7a8      	b.n	8011882 <_vfiprintf_r+0xfe>
 8011930:	2300      	movs	r3, #0
 8011932:	3401      	adds	r4, #1
 8011934:	9305      	str	r3, [sp, #20]
 8011936:	4619      	mov	r1, r3
 8011938:	f04f 0c0a 	mov.w	ip, #10
 801193c:	4620      	mov	r0, r4
 801193e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011942:	3a30      	subs	r2, #48	@ 0x30
 8011944:	2a09      	cmp	r2, #9
 8011946:	d903      	bls.n	8011950 <_vfiprintf_r+0x1cc>
 8011948:	2b00      	cmp	r3, #0
 801194a:	d0c6      	beq.n	80118da <_vfiprintf_r+0x156>
 801194c:	9105      	str	r1, [sp, #20]
 801194e:	e7c4      	b.n	80118da <_vfiprintf_r+0x156>
 8011950:	fb0c 2101 	mla	r1, ip, r1, r2
 8011954:	4604      	mov	r4, r0
 8011956:	2301      	movs	r3, #1
 8011958:	e7f0      	b.n	801193c <_vfiprintf_r+0x1b8>
 801195a:	ab03      	add	r3, sp, #12
 801195c:	9300      	str	r3, [sp, #0]
 801195e:	462a      	mov	r2, r5
 8011960:	4b12      	ldr	r3, [pc, #72]	@ (80119ac <_vfiprintf_r+0x228>)
 8011962:	a904      	add	r1, sp, #16
 8011964:	4630      	mov	r0, r6
 8011966:	f7fc fdfb 	bl	800e560 <_printf_float>
 801196a:	4607      	mov	r7, r0
 801196c:	1c78      	adds	r0, r7, #1
 801196e:	d1d6      	bne.n	801191e <_vfiprintf_r+0x19a>
 8011970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011972:	07d9      	lsls	r1, r3, #31
 8011974:	d405      	bmi.n	8011982 <_vfiprintf_r+0x1fe>
 8011976:	89ab      	ldrh	r3, [r5, #12]
 8011978:	059a      	lsls	r2, r3, #22
 801197a:	d402      	bmi.n	8011982 <_vfiprintf_r+0x1fe>
 801197c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801197e:	f7fd fcf3 	bl	800f368 <__retarget_lock_release_recursive>
 8011982:	89ab      	ldrh	r3, [r5, #12]
 8011984:	065b      	lsls	r3, r3, #25
 8011986:	f53f af1f 	bmi.w	80117c8 <_vfiprintf_r+0x44>
 801198a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801198c:	e71e      	b.n	80117cc <_vfiprintf_r+0x48>
 801198e:	ab03      	add	r3, sp, #12
 8011990:	9300      	str	r3, [sp, #0]
 8011992:	462a      	mov	r2, r5
 8011994:	4b05      	ldr	r3, [pc, #20]	@ (80119ac <_vfiprintf_r+0x228>)
 8011996:	a904      	add	r1, sp, #16
 8011998:	4630      	mov	r0, r6
 801199a:	f7fd f879 	bl	800ea90 <_printf_i>
 801199e:	e7e4      	b.n	801196a <_vfiprintf_r+0x1e6>
 80119a0:	08013b48 	.word	0x08013b48
 80119a4:	08013b52 	.word	0x08013b52
 80119a8:	0800e561 	.word	0x0800e561
 80119ac:	0801175f 	.word	0x0801175f
 80119b0:	08013b4e 	.word	0x08013b4e

080119b4 <_scanf_chars>:
 80119b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119b8:	4615      	mov	r5, r2
 80119ba:	688a      	ldr	r2, [r1, #8]
 80119bc:	4680      	mov	r8, r0
 80119be:	460c      	mov	r4, r1
 80119c0:	b932      	cbnz	r2, 80119d0 <_scanf_chars+0x1c>
 80119c2:	698a      	ldr	r2, [r1, #24]
 80119c4:	2a00      	cmp	r2, #0
 80119c6:	bf14      	ite	ne
 80119c8:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80119cc:	2201      	moveq	r2, #1
 80119ce:	608a      	str	r2, [r1, #8]
 80119d0:	6822      	ldr	r2, [r4, #0]
 80119d2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011a64 <_scanf_chars+0xb0>
 80119d6:	06d1      	lsls	r1, r2, #27
 80119d8:	bf5f      	itttt	pl
 80119da:	681a      	ldrpl	r2, [r3, #0]
 80119dc:	1d11      	addpl	r1, r2, #4
 80119de:	6019      	strpl	r1, [r3, #0]
 80119e0:	6816      	ldrpl	r6, [r2, #0]
 80119e2:	2700      	movs	r7, #0
 80119e4:	69a0      	ldr	r0, [r4, #24]
 80119e6:	b188      	cbz	r0, 8011a0c <_scanf_chars+0x58>
 80119e8:	2801      	cmp	r0, #1
 80119ea:	d107      	bne.n	80119fc <_scanf_chars+0x48>
 80119ec:	682b      	ldr	r3, [r5, #0]
 80119ee:	781a      	ldrb	r2, [r3, #0]
 80119f0:	6963      	ldr	r3, [r4, #20]
 80119f2:	5c9b      	ldrb	r3, [r3, r2]
 80119f4:	b953      	cbnz	r3, 8011a0c <_scanf_chars+0x58>
 80119f6:	2f00      	cmp	r7, #0
 80119f8:	d031      	beq.n	8011a5e <_scanf_chars+0xaa>
 80119fa:	e022      	b.n	8011a42 <_scanf_chars+0x8e>
 80119fc:	2802      	cmp	r0, #2
 80119fe:	d120      	bne.n	8011a42 <_scanf_chars+0x8e>
 8011a00:	682b      	ldr	r3, [r5, #0]
 8011a02:	781b      	ldrb	r3, [r3, #0]
 8011a04:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011a08:	071b      	lsls	r3, r3, #28
 8011a0a:	d41a      	bmi.n	8011a42 <_scanf_chars+0x8e>
 8011a0c:	6823      	ldr	r3, [r4, #0]
 8011a0e:	06da      	lsls	r2, r3, #27
 8011a10:	bf5e      	ittt	pl
 8011a12:	682b      	ldrpl	r3, [r5, #0]
 8011a14:	781b      	ldrbpl	r3, [r3, #0]
 8011a16:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011a1a:	682a      	ldr	r2, [r5, #0]
 8011a1c:	686b      	ldr	r3, [r5, #4]
 8011a1e:	3201      	adds	r2, #1
 8011a20:	602a      	str	r2, [r5, #0]
 8011a22:	68a2      	ldr	r2, [r4, #8]
 8011a24:	3b01      	subs	r3, #1
 8011a26:	3a01      	subs	r2, #1
 8011a28:	606b      	str	r3, [r5, #4]
 8011a2a:	3701      	adds	r7, #1
 8011a2c:	60a2      	str	r2, [r4, #8]
 8011a2e:	b142      	cbz	r2, 8011a42 <_scanf_chars+0x8e>
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	dcd7      	bgt.n	80119e4 <_scanf_chars+0x30>
 8011a34:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011a38:	4629      	mov	r1, r5
 8011a3a:	4640      	mov	r0, r8
 8011a3c:	4798      	blx	r3
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	d0d0      	beq.n	80119e4 <_scanf_chars+0x30>
 8011a42:	6823      	ldr	r3, [r4, #0]
 8011a44:	f013 0310 	ands.w	r3, r3, #16
 8011a48:	d105      	bne.n	8011a56 <_scanf_chars+0xa2>
 8011a4a:	68e2      	ldr	r2, [r4, #12]
 8011a4c:	3201      	adds	r2, #1
 8011a4e:	60e2      	str	r2, [r4, #12]
 8011a50:	69a2      	ldr	r2, [r4, #24]
 8011a52:	b102      	cbz	r2, 8011a56 <_scanf_chars+0xa2>
 8011a54:	7033      	strb	r3, [r6, #0]
 8011a56:	6923      	ldr	r3, [r4, #16]
 8011a58:	443b      	add	r3, r7
 8011a5a:	6123      	str	r3, [r4, #16]
 8011a5c:	2000      	movs	r0, #0
 8011a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a62:	bf00      	nop
 8011a64:	080137c9 	.word	0x080137c9

08011a68 <_scanf_i>:
 8011a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a6c:	4698      	mov	r8, r3
 8011a6e:	4b74      	ldr	r3, [pc, #464]	@ (8011c40 <_scanf_i+0x1d8>)
 8011a70:	460c      	mov	r4, r1
 8011a72:	4682      	mov	sl, r0
 8011a74:	4616      	mov	r6, r2
 8011a76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011a7a:	b087      	sub	sp, #28
 8011a7c:	ab03      	add	r3, sp, #12
 8011a7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011a82:	4b70      	ldr	r3, [pc, #448]	@ (8011c44 <_scanf_i+0x1dc>)
 8011a84:	69a1      	ldr	r1, [r4, #24]
 8011a86:	4a70      	ldr	r2, [pc, #448]	@ (8011c48 <_scanf_i+0x1e0>)
 8011a88:	2903      	cmp	r1, #3
 8011a8a:	bf08      	it	eq
 8011a8c:	461a      	moveq	r2, r3
 8011a8e:	68a3      	ldr	r3, [r4, #8]
 8011a90:	9201      	str	r2, [sp, #4]
 8011a92:	1e5a      	subs	r2, r3, #1
 8011a94:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011a98:	bf88      	it	hi
 8011a9a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011a9e:	4627      	mov	r7, r4
 8011aa0:	bf82      	ittt	hi
 8011aa2:	eb03 0905 	addhi.w	r9, r3, r5
 8011aa6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011aaa:	60a3      	strhi	r3, [r4, #8]
 8011aac:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011ab0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011ab4:	bf98      	it	ls
 8011ab6:	f04f 0900 	movls.w	r9, #0
 8011aba:	6023      	str	r3, [r4, #0]
 8011abc:	463d      	mov	r5, r7
 8011abe:	f04f 0b00 	mov.w	fp, #0
 8011ac2:	6831      	ldr	r1, [r6, #0]
 8011ac4:	ab03      	add	r3, sp, #12
 8011ac6:	7809      	ldrb	r1, [r1, #0]
 8011ac8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011acc:	2202      	movs	r2, #2
 8011ace:	f7ee fb97 	bl	8000200 <memchr>
 8011ad2:	b328      	cbz	r0, 8011b20 <_scanf_i+0xb8>
 8011ad4:	f1bb 0f01 	cmp.w	fp, #1
 8011ad8:	d159      	bne.n	8011b8e <_scanf_i+0x126>
 8011ada:	6862      	ldr	r2, [r4, #4]
 8011adc:	b92a      	cbnz	r2, 8011aea <_scanf_i+0x82>
 8011ade:	6822      	ldr	r2, [r4, #0]
 8011ae0:	2108      	movs	r1, #8
 8011ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011ae6:	6061      	str	r1, [r4, #4]
 8011ae8:	6022      	str	r2, [r4, #0]
 8011aea:	6822      	ldr	r2, [r4, #0]
 8011aec:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8011af0:	6022      	str	r2, [r4, #0]
 8011af2:	68a2      	ldr	r2, [r4, #8]
 8011af4:	1e51      	subs	r1, r2, #1
 8011af6:	60a1      	str	r1, [r4, #8]
 8011af8:	b192      	cbz	r2, 8011b20 <_scanf_i+0xb8>
 8011afa:	6832      	ldr	r2, [r6, #0]
 8011afc:	1c51      	adds	r1, r2, #1
 8011afe:	6031      	str	r1, [r6, #0]
 8011b00:	7812      	ldrb	r2, [r2, #0]
 8011b02:	f805 2b01 	strb.w	r2, [r5], #1
 8011b06:	6872      	ldr	r2, [r6, #4]
 8011b08:	3a01      	subs	r2, #1
 8011b0a:	2a00      	cmp	r2, #0
 8011b0c:	6072      	str	r2, [r6, #4]
 8011b0e:	dc07      	bgt.n	8011b20 <_scanf_i+0xb8>
 8011b10:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011b14:	4631      	mov	r1, r6
 8011b16:	4650      	mov	r0, sl
 8011b18:	4790      	blx	r2
 8011b1a:	2800      	cmp	r0, #0
 8011b1c:	f040 8085 	bne.w	8011c2a <_scanf_i+0x1c2>
 8011b20:	f10b 0b01 	add.w	fp, fp, #1
 8011b24:	f1bb 0f03 	cmp.w	fp, #3
 8011b28:	d1cb      	bne.n	8011ac2 <_scanf_i+0x5a>
 8011b2a:	6863      	ldr	r3, [r4, #4]
 8011b2c:	b90b      	cbnz	r3, 8011b32 <_scanf_i+0xca>
 8011b2e:	230a      	movs	r3, #10
 8011b30:	6063      	str	r3, [r4, #4]
 8011b32:	6863      	ldr	r3, [r4, #4]
 8011b34:	4945      	ldr	r1, [pc, #276]	@ (8011c4c <_scanf_i+0x1e4>)
 8011b36:	6960      	ldr	r0, [r4, #20]
 8011b38:	1ac9      	subs	r1, r1, r3
 8011b3a:	f000 f997 	bl	8011e6c <__sccl>
 8011b3e:	f04f 0b00 	mov.w	fp, #0
 8011b42:	68a3      	ldr	r3, [r4, #8]
 8011b44:	6822      	ldr	r2, [r4, #0]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d03d      	beq.n	8011bc6 <_scanf_i+0x15e>
 8011b4a:	6831      	ldr	r1, [r6, #0]
 8011b4c:	6960      	ldr	r0, [r4, #20]
 8011b4e:	f891 c000 	ldrb.w	ip, [r1]
 8011b52:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011b56:	2800      	cmp	r0, #0
 8011b58:	d035      	beq.n	8011bc6 <_scanf_i+0x15e>
 8011b5a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011b5e:	d124      	bne.n	8011baa <_scanf_i+0x142>
 8011b60:	0510      	lsls	r0, r2, #20
 8011b62:	d522      	bpl.n	8011baa <_scanf_i+0x142>
 8011b64:	f10b 0b01 	add.w	fp, fp, #1
 8011b68:	f1b9 0f00 	cmp.w	r9, #0
 8011b6c:	d003      	beq.n	8011b76 <_scanf_i+0x10e>
 8011b6e:	3301      	adds	r3, #1
 8011b70:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8011b74:	60a3      	str	r3, [r4, #8]
 8011b76:	6873      	ldr	r3, [r6, #4]
 8011b78:	3b01      	subs	r3, #1
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	6073      	str	r3, [r6, #4]
 8011b7e:	dd1b      	ble.n	8011bb8 <_scanf_i+0x150>
 8011b80:	6833      	ldr	r3, [r6, #0]
 8011b82:	3301      	adds	r3, #1
 8011b84:	6033      	str	r3, [r6, #0]
 8011b86:	68a3      	ldr	r3, [r4, #8]
 8011b88:	3b01      	subs	r3, #1
 8011b8a:	60a3      	str	r3, [r4, #8]
 8011b8c:	e7d9      	b.n	8011b42 <_scanf_i+0xda>
 8011b8e:	f1bb 0f02 	cmp.w	fp, #2
 8011b92:	d1ae      	bne.n	8011af2 <_scanf_i+0x8a>
 8011b94:	6822      	ldr	r2, [r4, #0]
 8011b96:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8011b9a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011b9e:	d1bf      	bne.n	8011b20 <_scanf_i+0xb8>
 8011ba0:	2110      	movs	r1, #16
 8011ba2:	6061      	str	r1, [r4, #4]
 8011ba4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011ba8:	e7a2      	b.n	8011af0 <_scanf_i+0x88>
 8011baa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011bae:	6022      	str	r2, [r4, #0]
 8011bb0:	780b      	ldrb	r3, [r1, #0]
 8011bb2:	f805 3b01 	strb.w	r3, [r5], #1
 8011bb6:	e7de      	b.n	8011b76 <_scanf_i+0x10e>
 8011bb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011bbc:	4631      	mov	r1, r6
 8011bbe:	4650      	mov	r0, sl
 8011bc0:	4798      	blx	r3
 8011bc2:	2800      	cmp	r0, #0
 8011bc4:	d0df      	beq.n	8011b86 <_scanf_i+0x11e>
 8011bc6:	6823      	ldr	r3, [r4, #0]
 8011bc8:	05d9      	lsls	r1, r3, #23
 8011bca:	d50d      	bpl.n	8011be8 <_scanf_i+0x180>
 8011bcc:	42bd      	cmp	r5, r7
 8011bce:	d909      	bls.n	8011be4 <_scanf_i+0x17c>
 8011bd0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011bd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011bd8:	4632      	mov	r2, r6
 8011bda:	4650      	mov	r0, sl
 8011bdc:	4798      	blx	r3
 8011bde:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8011be2:	464d      	mov	r5, r9
 8011be4:	42bd      	cmp	r5, r7
 8011be6:	d028      	beq.n	8011c3a <_scanf_i+0x1d2>
 8011be8:	6822      	ldr	r2, [r4, #0]
 8011bea:	f012 0210 	ands.w	r2, r2, #16
 8011bee:	d113      	bne.n	8011c18 <_scanf_i+0x1b0>
 8011bf0:	702a      	strb	r2, [r5, #0]
 8011bf2:	6863      	ldr	r3, [r4, #4]
 8011bf4:	9e01      	ldr	r6, [sp, #4]
 8011bf6:	4639      	mov	r1, r7
 8011bf8:	4650      	mov	r0, sl
 8011bfa:	47b0      	blx	r6
 8011bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8011c00:	6821      	ldr	r1, [r4, #0]
 8011c02:	1d1a      	adds	r2, r3, #4
 8011c04:	f8c8 2000 	str.w	r2, [r8]
 8011c08:	f011 0f20 	tst.w	r1, #32
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	d00f      	beq.n	8011c30 <_scanf_i+0x1c8>
 8011c10:	6018      	str	r0, [r3, #0]
 8011c12:	68e3      	ldr	r3, [r4, #12]
 8011c14:	3301      	adds	r3, #1
 8011c16:	60e3      	str	r3, [r4, #12]
 8011c18:	6923      	ldr	r3, [r4, #16]
 8011c1a:	1bed      	subs	r5, r5, r7
 8011c1c:	445d      	add	r5, fp
 8011c1e:	442b      	add	r3, r5
 8011c20:	6123      	str	r3, [r4, #16]
 8011c22:	2000      	movs	r0, #0
 8011c24:	b007      	add	sp, #28
 8011c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c2a:	f04f 0b00 	mov.w	fp, #0
 8011c2e:	e7ca      	b.n	8011bc6 <_scanf_i+0x15e>
 8011c30:	07ca      	lsls	r2, r1, #31
 8011c32:	bf4c      	ite	mi
 8011c34:	8018      	strhmi	r0, [r3, #0]
 8011c36:	6018      	strpl	r0, [r3, #0]
 8011c38:	e7eb      	b.n	8011c12 <_scanf_i+0x1aa>
 8011c3a:	2001      	movs	r0, #1
 8011c3c:	e7f2      	b.n	8011c24 <_scanf_i+0x1bc>
 8011c3e:	bf00      	nop
 8011c40:	0801369c 	.word	0x0801369c
 8011c44:	08012125 	.word	0x08012125
 8011c48:	08012205 	.word	0x08012205
 8011c4c:	08013b69 	.word	0x08013b69

08011c50 <__sflush_r>:
 8011c50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c58:	0716      	lsls	r6, r2, #28
 8011c5a:	4605      	mov	r5, r0
 8011c5c:	460c      	mov	r4, r1
 8011c5e:	d454      	bmi.n	8011d0a <__sflush_r+0xba>
 8011c60:	684b      	ldr	r3, [r1, #4]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	dc02      	bgt.n	8011c6c <__sflush_r+0x1c>
 8011c66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	dd48      	ble.n	8011cfe <__sflush_r+0xae>
 8011c6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011c6e:	2e00      	cmp	r6, #0
 8011c70:	d045      	beq.n	8011cfe <__sflush_r+0xae>
 8011c72:	2300      	movs	r3, #0
 8011c74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011c78:	682f      	ldr	r7, [r5, #0]
 8011c7a:	6a21      	ldr	r1, [r4, #32]
 8011c7c:	602b      	str	r3, [r5, #0]
 8011c7e:	d030      	beq.n	8011ce2 <__sflush_r+0x92>
 8011c80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011c82:	89a3      	ldrh	r3, [r4, #12]
 8011c84:	0759      	lsls	r1, r3, #29
 8011c86:	d505      	bpl.n	8011c94 <__sflush_r+0x44>
 8011c88:	6863      	ldr	r3, [r4, #4]
 8011c8a:	1ad2      	subs	r2, r2, r3
 8011c8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011c8e:	b10b      	cbz	r3, 8011c94 <__sflush_r+0x44>
 8011c90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011c92:	1ad2      	subs	r2, r2, r3
 8011c94:	2300      	movs	r3, #0
 8011c96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011c98:	6a21      	ldr	r1, [r4, #32]
 8011c9a:	4628      	mov	r0, r5
 8011c9c:	47b0      	blx	r6
 8011c9e:	1c43      	adds	r3, r0, #1
 8011ca0:	89a3      	ldrh	r3, [r4, #12]
 8011ca2:	d106      	bne.n	8011cb2 <__sflush_r+0x62>
 8011ca4:	6829      	ldr	r1, [r5, #0]
 8011ca6:	291d      	cmp	r1, #29
 8011ca8:	d82b      	bhi.n	8011d02 <__sflush_r+0xb2>
 8011caa:	4a2a      	ldr	r2, [pc, #168]	@ (8011d54 <__sflush_r+0x104>)
 8011cac:	410a      	asrs	r2, r1
 8011cae:	07d6      	lsls	r6, r2, #31
 8011cb0:	d427      	bmi.n	8011d02 <__sflush_r+0xb2>
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	6062      	str	r2, [r4, #4]
 8011cb6:	04d9      	lsls	r1, r3, #19
 8011cb8:	6922      	ldr	r2, [r4, #16]
 8011cba:	6022      	str	r2, [r4, #0]
 8011cbc:	d504      	bpl.n	8011cc8 <__sflush_r+0x78>
 8011cbe:	1c42      	adds	r2, r0, #1
 8011cc0:	d101      	bne.n	8011cc6 <__sflush_r+0x76>
 8011cc2:	682b      	ldr	r3, [r5, #0]
 8011cc4:	b903      	cbnz	r3, 8011cc8 <__sflush_r+0x78>
 8011cc6:	6560      	str	r0, [r4, #84]	@ 0x54
 8011cc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011cca:	602f      	str	r7, [r5, #0]
 8011ccc:	b1b9      	cbz	r1, 8011cfe <__sflush_r+0xae>
 8011cce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011cd2:	4299      	cmp	r1, r3
 8011cd4:	d002      	beq.n	8011cdc <__sflush_r+0x8c>
 8011cd6:	4628      	mov	r0, r5
 8011cd8:	f7fe f9aa 	bl	8010030 <_free_r>
 8011cdc:	2300      	movs	r3, #0
 8011cde:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ce0:	e00d      	b.n	8011cfe <__sflush_r+0xae>
 8011ce2:	2301      	movs	r3, #1
 8011ce4:	4628      	mov	r0, r5
 8011ce6:	47b0      	blx	r6
 8011ce8:	4602      	mov	r2, r0
 8011cea:	1c50      	adds	r0, r2, #1
 8011cec:	d1c9      	bne.n	8011c82 <__sflush_r+0x32>
 8011cee:	682b      	ldr	r3, [r5, #0]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d0c6      	beq.n	8011c82 <__sflush_r+0x32>
 8011cf4:	2b1d      	cmp	r3, #29
 8011cf6:	d001      	beq.n	8011cfc <__sflush_r+0xac>
 8011cf8:	2b16      	cmp	r3, #22
 8011cfa:	d11e      	bne.n	8011d3a <__sflush_r+0xea>
 8011cfc:	602f      	str	r7, [r5, #0]
 8011cfe:	2000      	movs	r0, #0
 8011d00:	e022      	b.n	8011d48 <__sflush_r+0xf8>
 8011d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d06:	b21b      	sxth	r3, r3
 8011d08:	e01b      	b.n	8011d42 <__sflush_r+0xf2>
 8011d0a:	690f      	ldr	r7, [r1, #16]
 8011d0c:	2f00      	cmp	r7, #0
 8011d0e:	d0f6      	beq.n	8011cfe <__sflush_r+0xae>
 8011d10:	0793      	lsls	r3, r2, #30
 8011d12:	680e      	ldr	r6, [r1, #0]
 8011d14:	bf08      	it	eq
 8011d16:	694b      	ldreq	r3, [r1, #20]
 8011d18:	600f      	str	r7, [r1, #0]
 8011d1a:	bf18      	it	ne
 8011d1c:	2300      	movne	r3, #0
 8011d1e:	eba6 0807 	sub.w	r8, r6, r7
 8011d22:	608b      	str	r3, [r1, #8]
 8011d24:	f1b8 0f00 	cmp.w	r8, #0
 8011d28:	dde9      	ble.n	8011cfe <__sflush_r+0xae>
 8011d2a:	6a21      	ldr	r1, [r4, #32]
 8011d2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011d2e:	4643      	mov	r3, r8
 8011d30:	463a      	mov	r2, r7
 8011d32:	4628      	mov	r0, r5
 8011d34:	47b0      	blx	r6
 8011d36:	2800      	cmp	r0, #0
 8011d38:	dc08      	bgt.n	8011d4c <__sflush_r+0xfc>
 8011d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d42:	81a3      	strh	r3, [r4, #12]
 8011d44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d4c:	4407      	add	r7, r0
 8011d4e:	eba8 0800 	sub.w	r8, r8, r0
 8011d52:	e7e7      	b.n	8011d24 <__sflush_r+0xd4>
 8011d54:	dfbffffe 	.word	0xdfbffffe

08011d58 <_fflush_r>:
 8011d58:	b538      	push	{r3, r4, r5, lr}
 8011d5a:	690b      	ldr	r3, [r1, #16]
 8011d5c:	4605      	mov	r5, r0
 8011d5e:	460c      	mov	r4, r1
 8011d60:	b913      	cbnz	r3, 8011d68 <_fflush_r+0x10>
 8011d62:	2500      	movs	r5, #0
 8011d64:	4628      	mov	r0, r5
 8011d66:	bd38      	pop	{r3, r4, r5, pc}
 8011d68:	b118      	cbz	r0, 8011d72 <_fflush_r+0x1a>
 8011d6a:	6a03      	ldr	r3, [r0, #32]
 8011d6c:	b90b      	cbnz	r3, 8011d72 <_fflush_r+0x1a>
 8011d6e:	f7fd f83b 	bl	800ede8 <__sinit>
 8011d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d0f3      	beq.n	8011d62 <_fflush_r+0xa>
 8011d7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011d7c:	07d0      	lsls	r0, r2, #31
 8011d7e:	d404      	bmi.n	8011d8a <_fflush_r+0x32>
 8011d80:	0599      	lsls	r1, r3, #22
 8011d82:	d402      	bmi.n	8011d8a <_fflush_r+0x32>
 8011d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d86:	f7fd faee 	bl	800f366 <__retarget_lock_acquire_recursive>
 8011d8a:	4628      	mov	r0, r5
 8011d8c:	4621      	mov	r1, r4
 8011d8e:	f7ff ff5f 	bl	8011c50 <__sflush_r>
 8011d92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011d94:	07da      	lsls	r2, r3, #31
 8011d96:	4605      	mov	r5, r0
 8011d98:	d4e4      	bmi.n	8011d64 <_fflush_r+0xc>
 8011d9a:	89a3      	ldrh	r3, [r4, #12]
 8011d9c:	059b      	lsls	r3, r3, #22
 8011d9e:	d4e1      	bmi.n	8011d64 <_fflush_r+0xc>
 8011da0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011da2:	f7fd fae1 	bl	800f368 <__retarget_lock_release_recursive>
 8011da6:	e7dd      	b.n	8011d64 <_fflush_r+0xc>

08011da8 <__swhatbuf_r>:
 8011da8:	b570      	push	{r4, r5, r6, lr}
 8011daa:	460c      	mov	r4, r1
 8011dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011db0:	2900      	cmp	r1, #0
 8011db2:	b096      	sub	sp, #88	@ 0x58
 8011db4:	4615      	mov	r5, r2
 8011db6:	461e      	mov	r6, r3
 8011db8:	da0d      	bge.n	8011dd6 <__swhatbuf_r+0x2e>
 8011dba:	89a3      	ldrh	r3, [r4, #12]
 8011dbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011dc0:	f04f 0100 	mov.w	r1, #0
 8011dc4:	bf14      	ite	ne
 8011dc6:	2340      	movne	r3, #64	@ 0x40
 8011dc8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011dcc:	2000      	movs	r0, #0
 8011dce:	6031      	str	r1, [r6, #0]
 8011dd0:	602b      	str	r3, [r5, #0]
 8011dd2:	b016      	add	sp, #88	@ 0x58
 8011dd4:	bd70      	pop	{r4, r5, r6, pc}
 8011dd6:	466a      	mov	r2, sp
 8011dd8:	f000 f8d6 	bl	8011f88 <_fstat_r>
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	dbec      	blt.n	8011dba <__swhatbuf_r+0x12>
 8011de0:	9901      	ldr	r1, [sp, #4]
 8011de2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011de6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011dea:	4259      	negs	r1, r3
 8011dec:	4159      	adcs	r1, r3
 8011dee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011df2:	e7eb      	b.n	8011dcc <__swhatbuf_r+0x24>

08011df4 <__smakebuf_r>:
 8011df4:	898b      	ldrh	r3, [r1, #12]
 8011df6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011df8:	079d      	lsls	r5, r3, #30
 8011dfa:	4606      	mov	r6, r0
 8011dfc:	460c      	mov	r4, r1
 8011dfe:	d507      	bpl.n	8011e10 <__smakebuf_r+0x1c>
 8011e00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011e04:	6023      	str	r3, [r4, #0]
 8011e06:	6123      	str	r3, [r4, #16]
 8011e08:	2301      	movs	r3, #1
 8011e0a:	6163      	str	r3, [r4, #20]
 8011e0c:	b003      	add	sp, #12
 8011e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e10:	ab01      	add	r3, sp, #4
 8011e12:	466a      	mov	r2, sp
 8011e14:	f7ff ffc8 	bl	8011da8 <__swhatbuf_r>
 8011e18:	9f00      	ldr	r7, [sp, #0]
 8011e1a:	4605      	mov	r5, r0
 8011e1c:	4639      	mov	r1, r7
 8011e1e:	4630      	mov	r0, r6
 8011e20:	f7fb fc2c 	bl	800d67c <_malloc_r>
 8011e24:	b948      	cbnz	r0, 8011e3a <__smakebuf_r+0x46>
 8011e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e2a:	059a      	lsls	r2, r3, #22
 8011e2c:	d4ee      	bmi.n	8011e0c <__smakebuf_r+0x18>
 8011e2e:	f023 0303 	bic.w	r3, r3, #3
 8011e32:	f043 0302 	orr.w	r3, r3, #2
 8011e36:	81a3      	strh	r3, [r4, #12]
 8011e38:	e7e2      	b.n	8011e00 <__smakebuf_r+0xc>
 8011e3a:	89a3      	ldrh	r3, [r4, #12]
 8011e3c:	6020      	str	r0, [r4, #0]
 8011e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e42:	81a3      	strh	r3, [r4, #12]
 8011e44:	9b01      	ldr	r3, [sp, #4]
 8011e46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011e4a:	b15b      	cbz	r3, 8011e64 <__smakebuf_r+0x70>
 8011e4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e50:	4630      	mov	r0, r6
 8011e52:	f000 f8ab 	bl	8011fac <_isatty_r>
 8011e56:	b128      	cbz	r0, 8011e64 <__smakebuf_r+0x70>
 8011e58:	89a3      	ldrh	r3, [r4, #12]
 8011e5a:	f023 0303 	bic.w	r3, r3, #3
 8011e5e:	f043 0301 	orr.w	r3, r3, #1
 8011e62:	81a3      	strh	r3, [r4, #12]
 8011e64:	89a3      	ldrh	r3, [r4, #12]
 8011e66:	431d      	orrs	r5, r3
 8011e68:	81a5      	strh	r5, [r4, #12]
 8011e6a:	e7cf      	b.n	8011e0c <__smakebuf_r+0x18>

08011e6c <__sccl>:
 8011e6c:	b570      	push	{r4, r5, r6, lr}
 8011e6e:	780b      	ldrb	r3, [r1, #0]
 8011e70:	4604      	mov	r4, r0
 8011e72:	2b5e      	cmp	r3, #94	@ 0x5e
 8011e74:	bf0b      	itete	eq
 8011e76:	784b      	ldrbeq	r3, [r1, #1]
 8011e78:	1c4a      	addne	r2, r1, #1
 8011e7a:	1c8a      	addeq	r2, r1, #2
 8011e7c:	2100      	movne	r1, #0
 8011e7e:	bf08      	it	eq
 8011e80:	2101      	moveq	r1, #1
 8011e82:	3801      	subs	r0, #1
 8011e84:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8011e88:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011e8c:	42a8      	cmp	r0, r5
 8011e8e:	d1fb      	bne.n	8011e88 <__sccl+0x1c>
 8011e90:	b90b      	cbnz	r3, 8011e96 <__sccl+0x2a>
 8011e92:	1e50      	subs	r0, r2, #1
 8011e94:	bd70      	pop	{r4, r5, r6, pc}
 8011e96:	f081 0101 	eor.w	r1, r1, #1
 8011e9a:	54e1      	strb	r1, [r4, r3]
 8011e9c:	4610      	mov	r0, r2
 8011e9e:	4602      	mov	r2, r0
 8011ea0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011ea4:	2d2d      	cmp	r5, #45	@ 0x2d
 8011ea6:	d005      	beq.n	8011eb4 <__sccl+0x48>
 8011ea8:	2d5d      	cmp	r5, #93	@ 0x5d
 8011eaa:	d016      	beq.n	8011eda <__sccl+0x6e>
 8011eac:	2d00      	cmp	r5, #0
 8011eae:	d0f1      	beq.n	8011e94 <__sccl+0x28>
 8011eb0:	462b      	mov	r3, r5
 8011eb2:	e7f2      	b.n	8011e9a <__sccl+0x2e>
 8011eb4:	7846      	ldrb	r6, [r0, #1]
 8011eb6:	2e5d      	cmp	r6, #93	@ 0x5d
 8011eb8:	d0fa      	beq.n	8011eb0 <__sccl+0x44>
 8011eba:	42b3      	cmp	r3, r6
 8011ebc:	dcf8      	bgt.n	8011eb0 <__sccl+0x44>
 8011ebe:	3002      	adds	r0, #2
 8011ec0:	461a      	mov	r2, r3
 8011ec2:	3201      	adds	r2, #1
 8011ec4:	4296      	cmp	r6, r2
 8011ec6:	54a1      	strb	r1, [r4, r2]
 8011ec8:	dcfb      	bgt.n	8011ec2 <__sccl+0x56>
 8011eca:	1af2      	subs	r2, r6, r3
 8011ecc:	3a01      	subs	r2, #1
 8011ece:	1c5d      	adds	r5, r3, #1
 8011ed0:	42b3      	cmp	r3, r6
 8011ed2:	bfa8      	it	ge
 8011ed4:	2200      	movge	r2, #0
 8011ed6:	18ab      	adds	r3, r5, r2
 8011ed8:	e7e1      	b.n	8011e9e <__sccl+0x32>
 8011eda:	4610      	mov	r0, r2
 8011edc:	e7da      	b.n	8011e94 <__sccl+0x28>

08011ede <__submore>:
 8011ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ee2:	460c      	mov	r4, r1
 8011ee4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011ee6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011eea:	4299      	cmp	r1, r3
 8011eec:	d11d      	bne.n	8011f2a <__submore+0x4c>
 8011eee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011ef2:	f7fb fbc3 	bl	800d67c <_malloc_r>
 8011ef6:	b918      	cbnz	r0, 8011f00 <__submore+0x22>
 8011ef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011f04:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011f06:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8011f0a:	6360      	str	r0, [r4, #52]	@ 0x34
 8011f0c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8011f10:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011f14:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8011f18:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011f1c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8011f20:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8011f24:	6020      	str	r0, [r4, #0]
 8011f26:	2000      	movs	r0, #0
 8011f28:	e7e8      	b.n	8011efc <__submore+0x1e>
 8011f2a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8011f2c:	0077      	lsls	r7, r6, #1
 8011f2e:	463a      	mov	r2, r7
 8011f30:	f7fb fc38 	bl	800d7a4 <_realloc_r>
 8011f34:	4605      	mov	r5, r0
 8011f36:	2800      	cmp	r0, #0
 8011f38:	d0de      	beq.n	8011ef8 <__submore+0x1a>
 8011f3a:	eb00 0806 	add.w	r8, r0, r6
 8011f3e:	4601      	mov	r1, r0
 8011f40:	4632      	mov	r2, r6
 8011f42:	4640      	mov	r0, r8
 8011f44:	f7fd fa11 	bl	800f36a <memcpy>
 8011f48:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8011f4c:	f8c4 8000 	str.w	r8, [r4]
 8011f50:	e7e9      	b.n	8011f26 <__submore+0x48>

08011f52 <memmove>:
 8011f52:	4288      	cmp	r0, r1
 8011f54:	b510      	push	{r4, lr}
 8011f56:	eb01 0402 	add.w	r4, r1, r2
 8011f5a:	d902      	bls.n	8011f62 <memmove+0x10>
 8011f5c:	4284      	cmp	r4, r0
 8011f5e:	4623      	mov	r3, r4
 8011f60:	d807      	bhi.n	8011f72 <memmove+0x20>
 8011f62:	1e43      	subs	r3, r0, #1
 8011f64:	42a1      	cmp	r1, r4
 8011f66:	d008      	beq.n	8011f7a <memmove+0x28>
 8011f68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f6c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011f70:	e7f8      	b.n	8011f64 <memmove+0x12>
 8011f72:	4402      	add	r2, r0
 8011f74:	4601      	mov	r1, r0
 8011f76:	428a      	cmp	r2, r1
 8011f78:	d100      	bne.n	8011f7c <memmove+0x2a>
 8011f7a:	bd10      	pop	{r4, pc}
 8011f7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011f80:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011f84:	e7f7      	b.n	8011f76 <memmove+0x24>
	...

08011f88 <_fstat_r>:
 8011f88:	b538      	push	{r3, r4, r5, lr}
 8011f8a:	4d07      	ldr	r5, [pc, #28]	@ (8011fa8 <_fstat_r+0x20>)
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	4604      	mov	r4, r0
 8011f90:	4608      	mov	r0, r1
 8011f92:	4611      	mov	r1, r2
 8011f94:	602b      	str	r3, [r5, #0]
 8011f96:	f7f0 fb9d 	bl	80026d4 <_fstat>
 8011f9a:	1c43      	adds	r3, r0, #1
 8011f9c:	d102      	bne.n	8011fa4 <_fstat_r+0x1c>
 8011f9e:	682b      	ldr	r3, [r5, #0]
 8011fa0:	b103      	cbz	r3, 8011fa4 <_fstat_r+0x1c>
 8011fa2:	6023      	str	r3, [r4, #0]
 8011fa4:	bd38      	pop	{r3, r4, r5, pc}
 8011fa6:	bf00      	nop
 8011fa8:	20005758 	.word	0x20005758

08011fac <_isatty_r>:
 8011fac:	b538      	push	{r3, r4, r5, lr}
 8011fae:	4d06      	ldr	r5, [pc, #24]	@ (8011fc8 <_isatty_r+0x1c>)
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	4604      	mov	r4, r0
 8011fb4:	4608      	mov	r0, r1
 8011fb6:	602b      	str	r3, [r5, #0]
 8011fb8:	f7f0 fb9c 	bl	80026f4 <_isatty>
 8011fbc:	1c43      	adds	r3, r0, #1
 8011fbe:	d102      	bne.n	8011fc6 <_isatty_r+0x1a>
 8011fc0:	682b      	ldr	r3, [r5, #0]
 8011fc2:	b103      	cbz	r3, 8011fc6 <_isatty_r+0x1a>
 8011fc4:	6023      	str	r3, [r4, #0]
 8011fc6:	bd38      	pop	{r3, r4, r5, pc}
 8011fc8:	20005758 	.word	0x20005758

08011fcc <__assert_func>:
 8011fcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011fce:	4614      	mov	r4, r2
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	4b09      	ldr	r3, [pc, #36]	@ (8011ff8 <__assert_func+0x2c>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	4605      	mov	r5, r0
 8011fd8:	68d8      	ldr	r0, [r3, #12]
 8011fda:	b954      	cbnz	r4, 8011ff2 <__assert_func+0x26>
 8011fdc:	4b07      	ldr	r3, [pc, #28]	@ (8011ffc <__assert_func+0x30>)
 8011fde:	461c      	mov	r4, r3
 8011fe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011fe4:	9100      	str	r1, [sp, #0]
 8011fe6:	462b      	mov	r3, r5
 8011fe8:	4905      	ldr	r1, [pc, #20]	@ (8012000 <__assert_func+0x34>)
 8011fea:	f000 f90d 	bl	8012208 <fiprintf>
 8011fee:	f000 f91d 	bl	801222c <abort>
 8011ff2:	4b04      	ldr	r3, [pc, #16]	@ (8012004 <__assert_func+0x38>)
 8011ff4:	e7f4      	b.n	8011fe0 <__assert_func+0x14>
 8011ff6:	bf00      	nop
 8011ff8:	20000264 	.word	0x20000264
 8011ffc:	08013baf 	.word	0x08013baf
 8012000:	08013b81 	.word	0x08013b81
 8012004:	08013b74 	.word	0x08013b74

08012008 <_calloc_r>:
 8012008:	b570      	push	{r4, r5, r6, lr}
 801200a:	fba1 5402 	umull	r5, r4, r1, r2
 801200e:	b93c      	cbnz	r4, 8012020 <_calloc_r+0x18>
 8012010:	4629      	mov	r1, r5
 8012012:	f7fb fb33 	bl	800d67c <_malloc_r>
 8012016:	4606      	mov	r6, r0
 8012018:	b928      	cbnz	r0, 8012026 <_calloc_r+0x1e>
 801201a:	2600      	movs	r6, #0
 801201c:	4630      	mov	r0, r6
 801201e:	bd70      	pop	{r4, r5, r6, pc}
 8012020:	220c      	movs	r2, #12
 8012022:	6002      	str	r2, [r0, #0]
 8012024:	e7f9      	b.n	801201a <_calloc_r+0x12>
 8012026:	462a      	mov	r2, r5
 8012028:	4621      	mov	r1, r4
 801202a:	f7fd f8a7 	bl	800f17c <memset>
 801202e:	e7f5      	b.n	801201c <_calloc_r+0x14>

08012030 <_strtol_l.constprop.0>:
 8012030:	2b24      	cmp	r3, #36	@ 0x24
 8012032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012036:	4686      	mov	lr, r0
 8012038:	4690      	mov	r8, r2
 801203a:	d801      	bhi.n	8012040 <_strtol_l.constprop.0+0x10>
 801203c:	2b01      	cmp	r3, #1
 801203e:	d106      	bne.n	801204e <_strtol_l.constprop.0+0x1e>
 8012040:	f7fd f966 	bl	800f310 <__errno>
 8012044:	2316      	movs	r3, #22
 8012046:	6003      	str	r3, [r0, #0]
 8012048:	2000      	movs	r0, #0
 801204a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801204e:	4834      	ldr	r0, [pc, #208]	@ (8012120 <_strtol_l.constprop.0+0xf0>)
 8012050:	460d      	mov	r5, r1
 8012052:	462a      	mov	r2, r5
 8012054:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012058:	5d06      	ldrb	r6, [r0, r4]
 801205a:	f016 0608 	ands.w	r6, r6, #8
 801205e:	d1f8      	bne.n	8012052 <_strtol_l.constprop.0+0x22>
 8012060:	2c2d      	cmp	r4, #45	@ 0x2d
 8012062:	d12d      	bne.n	80120c0 <_strtol_l.constprop.0+0x90>
 8012064:	782c      	ldrb	r4, [r5, #0]
 8012066:	2601      	movs	r6, #1
 8012068:	1c95      	adds	r5, r2, #2
 801206a:	f033 0210 	bics.w	r2, r3, #16
 801206e:	d109      	bne.n	8012084 <_strtol_l.constprop.0+0x54>
 8012070:	2c30      	cmp	r4, #48	@ 0x30
 8012072:	d12a      	bne.n	80120ca <_strtol_l.constprop.0+0x9a>
 8012074:	782a      	ldrb	r2, [r5, #0]
 8012076:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801207a:	2a58      	cmp	r2, #88	@ 0x58
 801207c:	d125      	bne.n	80120ca <_strtol_l.constprop.0+0x9a>
 801207e:	786c      	ldrb	r4, [r5, #1]
 8012080:	2310      	movs	r3, #16
 8012082:	3502      	adds	r5, #2
 8012084:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012088:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801208c:	2200      	movs	r2, #0
 801208e:	fbbc f9f3 	udiv	r9, ip, r3
 8012092:	4610      	mov	r0, r2
 8012094:	fb03 ca19 	mls	sl, r3, r9, ip
 8012098:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801209c:	2f09      	cmp	r7, #9
 801209e:	d81b      	bhi.n	80120d8 <_strtol_l.constprop.0+0xa8>
 80120a0:	463c      	mov	r4, r7
 80120a2:	42a3      	cmp	r3, r4
 80120a4:	dd27      	ble.n	80120f6 <_strtol_l.constprop.0+0xc6>
 80120a6:	1c57      	adds	r7, r2, #1
 80120a8:	d007      	beq.n	80120ba <_strtol_l.constprop.0+0x8a>
 80120aa:	4581      	cmp	r9, r0
 80120ac:	d320      	bcc.n	80120f0 <_strtol_l.constprop.0+0xc0>
 80120ae:	d101      	bne.n	80120b4 <_strtol_l.constprop.0+0x84>
 80120b0:	45a2      	cmp	sl, r4
 80120b2:	db1d      	blt.n	80120f0 <_strtol_l.constprop.0+0xc0>
 80120b4:	fb00 4003 	mla	r0, r0, r3, r4
 80120b8:	2201      	movs	r2, #1
 80120ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80120be:	e7eb      	b.n	8012098 <_strtol_l.constprop.0+0x68>
 80120c0:	2c2b      	cmp	r4, #43	@ 0x2b
 80120c2:	bf04      	itt	eq
 80120c4:	782c      	ldrbeq	r4, [r5, #0]
 80120c6:	1c95      	addeq	r5, r2, #2
 80120c8:	e7cf      	b.n	801206a <_strtol_l.constprop.0+0x3a>
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d1da      	bne.n	8012084 <_strtol_l.constprop.0+0x54>
 80120ce:	2c30      	cmp	r4, #48	@ 0x30
 80120d0:	bf0c      	ite	eq
 80120d2:	2308      	moveq	r3, #8
 80120d4:	230a      	movne	r3, #10
 80120d6:	e7d5      	b.n	8012084 <_strtol_l.constprop.0+0x54>
 80120d8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80120dc:	2f19      	cmp	r7, #25
 80120de:	d801      	bhi.n	80120e4 <_strtol_l.constprop.0+0xb4>
 80120e0:	3c37      	subs	r4, #55	@ 0x37
 80120e2:	e7de      	b.n	80120a2 <_strtol_l.constprop.0+0x72>
 80120e4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80120e8:	2f19      	cmp	r7, #25
 80120ea:	d804      	bhi.n	80120f6 <_strtol_l.constprop.0+0xc6>
 80120ec:	3c57      	subs	r4, #87	@ 0x57
 80120ee:	e7d8      	b.n	80120a2 <_strtol_l.constprop.0+0x72>
 80120f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80120f4:	e7e1      	b.n	80120ba <_strtol_l.constprop.0+0x8a>
 80120f6:	1c53      	adds	r3, r2, #1
 80120f8:	d108      	bne.n	801210c <_strtol_l.constprop.0+0xdc>
 80120fa:	2322      	movs	r3, #34	@ 0x22
 80120fc:	f8ce 3000 	str.w	r3, [lr]
 8012100:	4660      	mov	r0, ip
 8012102:	f1b8 0f00 	cmp.w	r8, #0
 8012106:	d0a0      	beq.n	801204a <_strtol_l.constprop.0+0x1a>
 8012108:	1e69      	subs	r1, r5, #1
 801210a:	e006      	b.n	801211a <_strtol_l.constprop.0+0xea>
 801210c:	b106      	cbz	r6, 8012110 <_strtol_l.constprop.0+0xe0>
 801210e:	4240      	negs	r0, r0
 8012110:	f1b8 0f00 	cmp.w	r8, #0
 8012114:	d099      	beq.n	801204a <_strtol_l.constprop.0+0x1a>
 8012116:	2a00      	cmp	r2, #0
 8012118:	d1f6      	bne.n	8012108 <_strtol_l.constprop.0+0xd8>
 801211a:	f8c8 1000 	str.w	r1, [r8]
 801211e:	e794      	b.n	801204a <_strtol_l.constprop.0+0x1a>
 8012120:	080137c9 	.word	0x080137c9

08012124 <_strtol_r>:
 8012124:	f7ff bf84 	b.w	8012030 <_strtol_l.constprop.0>

08012128 <_strtoul_l.constprop.0>:
 8012128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801212c:	4e34      	ldr	r6, [pc, #208]	@ (8012200 <_strtoul_l.constprop.0+0xd8>)
 801212e:	4686      	mov	lr, r0
 8012130:	460d      	mov	r5, r1
 8012132:	4628      	mov	r0, r5
 8012134:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012138:	5d37      	ldrb	r7, [r6, r4]
 801213a:	f017 0708 	ands.w	r7, r7, #8
 801213e:	d1f8      	bne.n	8012132 <_strtoul_l.constprop.0+0xa>
 8012140:	2c2d      	cmp	r4, #45	@ 0x2d
 8012142:	d12f      	bne.n	80121a4 <_strtoul_l.constprop.0+0x7c>
 8012144:	782c      	ldrb	r4, [r5, #0]
 8012146:	2701      	movs	r7, #1
 8012148:	1c85      	adds	r5, r0, #2
 801214a:	f033 0010 	bics.w	r0, r3, #16
 801214e:	d109      	bne.n	8012164 <_strtoul_l.constprop.0+0x3c>
 8012150:	2c30      	cmp	r4, #48	@ 0x30
 8012152:	d12c      	bne.n	80121ae <_strtoul_l.constprop.0+0x86>
 8012154:	7828      	ldrb	r0, [r5, #0]
 8012156:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801215a:	2858      	cmp	r0, #88	@ 0x58
 801215c:	d127      	bne.n	80121ae <_strtoul_l.constprop.0+0x86>
 801215e:	786c      	ldrb	r4, [r5, #1]
 8012160:	2310      	movs	r3, #16
 8012162:	3502      	adds	r5, #2
 8012164:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8012168:	2600      	movs	r6, #0
 801216a:	fbb8 f8f3 	udiv	r8, r8, r3
 801216e:	fb03 f908 	mul.w	r9, r3, r8
 8012172:	ea6f 0909 	mvn.w	r9, r9
 8012176:	4630      	mov	r0, r6
 8012178:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801217c:	f1bc 0f09 	cmp.w	ip, #9
 8012180:	d81c      	bhi.n	80121bc <_strtoul_l.constprop.0+0x94>
 8012182:	4664      	mov	r4, ip
 8012184:	42a3      	cmp	r3, r4
 8012186:	dd2a      	ble.n	80121de <_strtoul_l.constprop.0+0xb6>
 8012188:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801218c:	d007      	beq.n	801219e <_strtoul_l.constprop.0+0x76>
 801218e:	4580      	cmp	r8, r0
 8012190:	d322      	bcc.n	80121d8 <_strtoul_l.constprop.0+0xb0>
 8012192:	d101      	bne.n	8012198 <_strtoul_l.constprop.0+0x70>
 8012194:	45a1      	cmp	r9, r4
 8012196:	db1f      	blt.n	80121d8 <_strtoul_l.constprop.0+0xb0>
 8012198:	fb00 4003 	mla	r0, r0, r3, r4
 801219c:	2601      	movs	r6, #1
 801219e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80121a2:	e7e9      	b.n	8012178 <_strtoul_l.constprop.0+0x50>
 80121a4:	2c2b      	cmp	r4, #43	@ 0x2b
 80121a6:	bf04      	itt	eq
 80121a8:	782c      	ldrbeq	r4, [r5, #0]
 80121aa:	1c85      	addeq	r5, r0, #2
 80121ac:	e7cd      	b.n	801214a <_strtoul_l.constprop.0+0x22>
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d1d8      	bne.n	8012164 <_strtoul_l.constprop.0+0x3c>
 80121b2:	2c30      	cmp	r4, #48	@ 0x30
 80121b4:	bf0c      	ite	eq
 80121b6:	2308      	moveq	r3, #8
 80121b8:	230a      	movne	r3, #10
 80121ba:	e7d3      	b.n	8012164 <_strtoul_l.constprop.0+0x3c>
 80121bc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80121c0:	f1bc 0f19 	cmp.w	ip, #25
 80121c4:	d801      	bhi.n	80121ca <_strtoul_l.constprop.0+0xa2>
 80121c6:	3c37      	subs	r4, #55	@ 0x37
 80121c8:	e7dc      	b.n	8012184 <_strtoul_l.constprop.0+0x5c>
 80121ca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80121ce:	f1bc 0f19 	cmp.w	ip, #25
 80121d2:	d804      	bhi.n	80121de <_strtoul_l.constprop.0+0xb6>
 80121d4:	3c57      	subs	r4, #87	@ 0x57
 80121d6:	e7d5      	b.n	8012184 <_strtoul_l.constprop.0+0x5c>
 80121d8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80121dc:	e7df      	b.n	801219e <_strtoul_l.constprop.0+0x76>
 80121de:	1c73      	adds	r3, r6, #1
 80121e0:	d106      	bne.n	80121f0 <_strtoul_l.constprop.0+0xc8>
 80121e2:	2322      	movs	r3, #34	@ 0x22
 80121e4:	f8ce 3000 	str.w	r3, [lr]
 80121e8:	4630      	mov	r0, r6
 80121ea:	b932      	cbnz	r2, 80121fa <_strtoul_l.constprop.0+0xd2>
 80121ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121f0:	b107      	cbz	r7, 80121f4 <_strtoul_l.constprop.0+0xcc>
 80121f2:	4240      	negs	r0, r0
 80121f4:	2a00      	cmp	r2, #0
 80121f6:	d0f9      	beq.n	80121ec <_strtoul_l.constprop.0+0xc4>
 80121f8:	b106      	cbz	r6, 80121fc <_strtoul_l.constprop.0+0xd4>
 80121fa:	1e69      	subs	r1, r5, #1
 80121fc:	6011      	str	r1, [r2, #0]
 80121fe:	e7f5      	b.n	80121ec <_strtoul_l.constprop.0+0xc4>
 8012200:	080137c9 	.word	0x080137c9

08012204 <_strtoul_r>:
 8012204:	f7ff bf90 	b.w	8012128 <_strtoul_l.constprop.0>

08012208 <fiprintf>:
 8012208:	b40e      	push	{r1, r2, r3}
 801220a:	b503      	push	{r0, r1, lr}
 801220c:	4601      	mov	r1, r0
 801220e:	ab03      	add	r3, sp, #12
 8012210:	4805      	ldr	r0, [pc, #20]	@ (8012228 <fiprintf+0x20>)
 8012212:	f853 2b04 	ldr.w	r2, [r3], #4
 8012216:	6800      	ldr	r0, [r0, #0]
 8012218:	9301      	str	r3, [sp, #4]
 801221a:	f7ff fab3 	bl	8011784 <_vfiprintf_r>
 801221e:	b002      	add	sp, #8
 8012220:	f85d eb04 	ldr.w	lr, [sp], #4
 8012224:	b003      	add	sp, #12
 8012226:	4770      	bx	lr
 8012228:	20000264 	.word	0x20000264

0801222c <abort>:
 801222c:	b508      	push	{r3, lr}
 801222e:	2006      	movs	r0, #6
 8012230:	f000 f82c 	bl	801228c <raise>
 8012234:	2001      	movs	r0, #1
 8012236:	f7f0 fa19 	bl	800266c <_exit>

0801223a <_raise_r>:
 801223a:	291f      	cmp	r1, #31
 801223c:	b538      	push	{r3, r4, r5, lr}
 801223e:	4605      	mov	r5, r0
 8012240:	460c      	mov	r4, r1
 8012242:	d904      	bls.n	801224e <_raise_r+0x14>
 8012244:	2316      	movs	r3, #22
 8012246:	6003      	str	r3, [r0, #0]
 8012248:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801224c:	bd38      	pop	{r3, r4, r5, pc}
 801224e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012250:	b112      	cbz	r2, 8012258 <_raise_r+0x1e>
 8012252:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012256:	b94b      	cbnz	r3, 801226c <_raise_r+0x32>
 8012258:	4628      	mov	r0, r5
 801225a:	f000 f831 	bl	80122c0 <_getpid_r>
 801225e:	4622      	mov	r2, r4
 8012260:	4601      	mov	r1, r0
 8012262:	4628      	mov	r0, r5
 8012264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012268:	f000 b818 	b.w	801229c <_kill_r>
 801226c:	2b01      	cmp	r3, #1
 801226e:	d00a      	beq.n	8012286 <_raise_r+0x4c>
 8012270:	1c59      	adds	r1, r3, #1
 8012272:	d103      	bne.n	801227c <_raise_r+0x42>
 8012274:	2316      	movs	r3, #22
 8012276:	6003      	str	r3, [r0, #0]
 8012278:	2001      	movs	r0, #1
 801227a:	e7e7      	b.n	801224c <_raise_r+0x12>
 801227c:	2100      	movs	r1, #0
 801227e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012282:	4620      	mov	r0, r4
 8012284:	4798      	blx	r3
 8012286:	2000      	movs	r0, #0
 8012288:	e7e0      	b.n	801224c <_raise_r+0x12>
	...

0801228c <raise>:
 801228c:	4b02      	ldr	r3, [pc, #8]	@ (8012298 <raise+0xc>)
 801228e:	4601      	mov	r1, r0
 8012290:	6818      	ldr	r0, [r3, #0]
 8012292:	f7ff bfd2 	b.w	801223a <_raise_r>
 8012296:	bf00      	nop
 8012298:	20000264 	.word	0x20000264

0801229c <_kill_r>:
 801229c:	b538      	push	{r3, r4, r5, lr}
 801229e:	4d07      	ldr	r5, [pc, #28]	@ (80122bc <_kill_r+0x20>)
 80122a0:	2300      	movs	r3, #0
 80122a2:	4604      	mov	r4, r0
 80122a4:	4608      	mov	r0, r1
 80122a6:	4611      	mov	r1, r2
 80122a8:	602b      	str	r3, [r5, #0]
 80122aa:	f7f0 f9cf 	bl	800264c <_kill>
 80122ae:	1c43      	adds	r3, r0, #1
 80122b0:	d102      	bne.n	80122b8 <_kill_r+0x1c>
 80122b2:	682b      	ldr	r3, [r5, #0]
 80122b4:	b103      	cbz	r3, 80122b8 <_kill_r+0x1c>
 80122b6:	6023      	str	r3, [r4, #0]
 80122b8:	bd38      	pop	{r3, r4, r5, pc}
 80122ba:	bf00      	nop
 80122bc:	20005758 	.word	0x20005758

080122c0 <_getpid_r>:
 80122c0:	f7f0 b9bc 	b.w	800263c <_getpid>
 80122c4:	0000      	movs	r0, r0
	...

080122c8 <cos>:
 80122c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80122ca:	ec53 2b10 	vmov	r2, r3, d0
 80122ce:	4826      	ldr	r0, [pc, #152]	@ (8012368 <cos+0xa0>)
 80122d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80122d4:	4281      	cmp	r1, r0
 80122d6:	d806      	bhi.n	80122e6 <cos+0x1e>
 80122d8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012360 <cos+0x98>
 80122dc:	b005      	add	sp, #20
 80122de:	f85d eb04 	ldr.w	lr, [sp], #4
 80122e2:	f000 b8f1 	b.w	80124c8 <__kernel_cos>
 80122e6:	4821      	ldr	r0, [pc, #132]	@ (801236c <cos+0xa4>)
 80122e8:	4281      	cmp	r1, r0
 80122ea:	d908      	bls.n	80122fe <cos+0x36>
 80122ec:	4610      	mov	r0, r2
 80122ee:	4619      	mov	r1, r3
 80122f0:	f7ed ffe2 	bl	80002b8 <__aeabi_dsub>
 80122f4:	ec41 0b10 	vmov	d0, r0, r1
 80122f8:	b005      	add	sp, #20
 80122fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80122fe:	4668      	mov	r0, sp
 8012300:	f000 fa66 	bl	80127d0 <__ieee754_rem_pio2>
 8012304:	f000 0003 	and.w	r0, r0, #3
 8012308:	2801      	cmp	r0, #1
 801230a:	d00b      	beq.n	8012324 <cos+0x5c>
 801230c:	2802      	cmp	r0, #2
 801230e:	d015      	beq.n	801233c <cos+0x74>
 8012310:	b9d8      	cbnz	r0, 801234a <cos+0x82>
 8012312:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012316:	ed9d 0b00 	vldr	d0, [sp]
 801231a:	f000 f8d5 	bl	80124c8 <__kernel_cos>
 801231e:	ec51 0b10 	vmov	r0, r1, d0
 8012322:	e7e7      	b.n	80122f4 <cos+0x2c>
 8012324:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012328:	ed9d 0b00 	vldr	d0, [sp]
 801232c:	f000 f994 	bl	8012658 <__kernel_sin>
 8012330:	ec53 2b10 	vmov	r2, r3, d0
 8012334:	4610      	mov	r0, r2
 8012336:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801233a:	e7db      	b.n	80122f4 <cos+0x2c>
 801233c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012340:	ed9d 0b00 	vldr	d0, [sp]
 8012344:	f000 f8c0 	bl	80124c8 <__kernel_cos>
 8012348:	e7f2      	b.n	8012330 <cos+0x68>
 801234a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801234e:	ed9d 0b00 	vldr	d0, [sp]
 8012352:	2001      	movs	r0, #1
 8012354:	f000 f980 	bl	8012658 <__kernel_sin>
 8012358:	e7e1      	b.n	801231e <cos+0x56>
 801235a:	bf00      	nop
 801235c:	f3af 8000 	nop.w
	...
 8012368:	3fe921fb 	.word	0x3fe921fb
 801236c:	7fefffff 	.word	0x7fefffff

08012370 <sin>:
 8012370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012372:	ec53 2b10 	vmov	r2, r3, d0
 8012376:	4826      	ldr	r0, [pc, #152]	@ (8012410 <sin+0xa0>)
 8012378:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801237c:	4281      	cmp	r1, r0
 801237e:	d807      	bhi.n	8012390 <sin+0x20>
 8012380:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012408 <sin+0x98>
 8012384:	2000      	movs	r0, #0
 8012386:	b005      	add	sp, #20
 8012388:	f85d eb04 	ldr.w	lr, [sp], #4
 801238c:	f000 b964 	b.w	8012658 <__kernel_sin>
 8012390:	4820      	ldr	r0, [pc, #128]	@ (8012414 <sin+0xa4>)
 8012392:	4281      	cmp	r1, r0
 8012394:	d908      	bls.n	80123a8 <sin+0x38>
 8012396:	4610      	mov	r0, r2
 8012398:	4619      	mov	r1, r3
 801239a:	f7ed ff8d 	bl	80002b8 <__aeabi_dsub>
 801239e:	ec41 0b10 	vmov	d0, r0, r1
 80123a2:	b005      	add	sp, #20
 80123a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80123a8:	4668      	mov	r0, sp
 80123aa:	f000 fa11 	bl	80127d0 <__ieee754_rem_pio2>
 80123ae:	f000 0003 	and.w	r0, r0, #3
 80123b2:	2801      	cmp	r0, #1
 80123b4:	d00c      	beq.n	80123d0 <sin+0x60>
 80123b6:	2802      	cmp	r0, #2
 80123b8:	d011      	beq.n	80123de <sin+0x6e>
 80123ba:	b9e8      	cbnz	r0, 80123f8 <sin+0x88>
 80123bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80123c0:	ed9d 0b00 	vldr	d0, [sp]
 80123c4:	2001      	movs	r0, #1
 80123c6:	f000 f947 	bl	8012658 <__kernel_sin>
 80123ca:	ec51 0b10 	vmov	r0, r1, d0
 80123ce:	e7e6      	b.n	801239e <sin+0x2e>
 80123d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80123d4:	ed9d 0b00 	vldr	d0, [sp]
 80123d8:	f000 f876 	bl	80124c8 <__kernel_cos>
 80123dc:	e7f5      	b.n	80123ca <sin+0x5a>
 80123de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80123e2:	ed9d 0b00 	vldr	d0, [sp]
 80123e6:	2001      	movs	r0, #1
 80123e8:	f000 f936 	bl	8012658 <__kernel_sin>
 80123ec:	ec53 2b10 	vmov	r2, r3, d0
 80123f0:	4610      	mov	r0, r2
 80123f2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80123f6:	e7d2      	b.n	801239e <sin+0x2e>
 80123f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80123fc:	ed9d 0b00 	vldr	d0, [sp]
 8012400:	f000 f862 	bl	80124c8 <__kernel_cos>
 8012404:	e7f2      	b.n	80123ec <sin+0x7c>
 8012406:	bf00      	nop
	...
 8012410:	3fe921fb 	.word	0x3fe921fb
 8012414:	7fefffff 	.word	0x7fefffff

08012418 <fmaxf>:
 8012418:	b508      	push	{r3, lr}
 801241a:	ed2d 8b02 	vpush	{d8}
 801241e:	eeb0 8a40 	vmov.f32	s16, s0
 8012422:	eef0 8a60 	vmov.f32	s17, s1
 8012426:	f000 f831 	bl	801248c <__fpclassifyf>
 801242a:	b930      	cbnz	r0, 801243a <fmaxf+0x22>
 801242c:	eeb0 8a68 	vmov.f32	s16, s17
 8012430:	eeb0 0a48 	vmov.f32	s0, s16
 8012434:	ecbd 8b02 	vpop	{d8}
 8012438:	bd08      	pop	{r3, pc}
 801243a:	eeb0 0a68 	vmov.f32	s0, s17
 801243e:	f000 f825 	bl	801248c <__fpclassifyf>
 8012442:	2800      	cmp	r0, #0
 8012444:	d0f4      	beq.n	8012430 <fmaxf+0x18>
 8012446:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801244e:	dded      	ble.n	801242c <fmaxf+0x14>
 8012450:	e7ee      	b.n	8012430 <fmaxf+0x18>

08012452 <fminf>:
 8012452:	b508      	push	{r3, lr}
 8012454:	ed2d 8b02 	vpush	{d8}
 8012458:	eeb0 8a40 	vmov.f32	s16, s0
 801245c:	eef0 8a60 	vmov.f32	s17, s1
 8012460:	f000 f814 	bl	801248c <__fpclassifyf>
 8012464:	b930      	cbnz	r0, 8012474 <fminf+0x22>
 8012466:	eeb0 8a68 	vmov.f32	s16, s17
 801246a:	eeb0 0a48 	vmov.f32	s0, s16
 801246e:	ecbd 8b02 	vpop	{d8}
 8012472:	bd08      	pop	{r3, pc}
 8012474:	eeb0 0a68 	vmov.f32	s0, s17
 8012478:	f000 f808 	bl	801248c <__fpclassifyf>
 801247c:	2800      	cmp	r0, #0
 801247e:	d0f4      	beq.n	801246a <fminf+0x18>
 8012480:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012488:	d5ed      	bpl.n	8012466 <fminf+0x14>
 801248a:	e7ee      	b.n	801246a <fminf+0x18>

0801248c <__fpclassifyf>:
 801248c:	ee10 3a10 	vmov	r3, s0
 8012490:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8012494:	d00d      	beq.n	80124b2 <__fpclassifyf+0x26>
 8012496:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 801249a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801249e:	d30a      	bcc.n	80124b6 <__fpclassifyf+0x2a>
 80124a0:	4b07      	ldr	r3, [pc, #28]	@ (80124c0 <__fpclassifyf+0x34>)
 80124a2:	1e42      	subs	r2, r0, #1
 80124a4:	429a      	cmp	r2, r3
 80124a6:	d908      	bls.n	80124ba <__fpclassifyf+0x2e>
 80124a8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80124ac:	4258      	negs	r0, r3
 80124ae:	4158      	adcs	r0, r3
 80124b0:	4770      	bx	lr
 80124b2:	2002      	movs	r0, #2
 80124b4:	4770      	bx	lr
 80124b6:	2004      	movs	r0, #4
 80124b8:	4770      	bx	lr
 80124ba:	2003      	movs	r0, #3
 80124bc:	4770      	bx	lr
 80124be:	bf00      	nop
 80124c0:	007ffffe 	.word	0x007ffffe
 80124c4:	00000000 	.word	0x00000000

080124c8 <__kernel_cos>:
 80124c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124cc:	ec57 6b10 	vmov	r6, r7, d0
 80124d0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80124d4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80124d8:	ed8d 1b00 	vstr	d1, [sp]
 80124dc:	d206      	bcs.n	80124ec <__kernel_cos+0x24>
 80124de:	4630      	mov	r0, r6
 80124e0:	4639      	mov	r1, r7
 80124e2:	f7ee fb51 	bl	8000b88 <__aeabi_d2iz>
 80124e6:	2800      	cmp	r0, #0
 80124e8:	f000 8088 	beq.w	80125fc <__kernel_cos+0x134>
 80124ec:	4632      	mov	r2, r6
 80124ee:	463b      	mov	r3, r7
 80124f0:	4630      	mov	r0, r6
 80124f2:	4639      	mov	r1, r7
 80124f4:	f7ee f898 	bl	8000628 <__aeabi_dmul>
 80124f8:	4b51      	ldr	r3, [pc, #324]	@ (8012640 <__kernel_cos+0x178>)
 80124fa:	2200      	movs	r2, #0
 80124fc:	4604      	mov	r4, r0
 80124fe:	460d      	mov	r5, r1
 8012500:	f7ee f892 	bl	8000628 <__aeabi_dmul>
 8012504:	a340      	add	r3, pc, #256	@ (adr r3, 8012608 <__kernel_cos+0x140>)
 8012506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801250a:	4682      	mov	sl, r0
 801250c:	468b      	mov	fp, r1
 801250e:	4620      	mov	r0, r4
 8012510:	4629      	mov	r1, r5
 8012512:	f7ee f889 	bl	8000628 <__aeabi_dmul>
 8012516:	a33e      	add	r3, pc, #248	@ (adr r3, 8012610 <__kernel_cos+0x148>)
 8012518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801251c:	f7ed fece 	bl	80002bc <__adddf3>
 8012520:	4622      	mov	r2, r4
 8012522:	462b      	mov	r3, r5
 8012524:	f7ee f880 	bl	8000628 <__aeabi_dmul>
 8012528:	a33b      	add	r3, pc, #236	@ (adr r3, 8012618 <__kernel_cos+0x150>)
 801252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801252e:	f7ed fec3 	bl	80002b8 <__aeabi_dsub>
 8012532:	4622      	mov	r2, r4
 8012534:	462b      	mov	r3, r5
 8012536:	f7ee f877 	bl	8000628 <__aeabi_dmul>
 801253a:	a339      	add	r3, pc, #228	@ (adr r3, 8012620 <__kernel_cos+0x158>)
 801253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012540:	f7ed febc 	bl	80002bc <__adddf3>
 8012544:	4622      	mov	r2, r4
 8012546:	462b      	mov	r3, r5
 8012548:	f7ee f86e 	bl	8000628 <__aeabi_dmul>
 801254c:	a336      	add	r3, pc, #216	@ (adr r3, 8012628 <__kernel_cos+0x160>)
 801254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012552:	f7ed feb1 	bl	80002b8 <__aeabi_dsub>
 8012556:	4622      	mov	r2, r4
 8012558:	462b      	mov	r3, r5
 801255a:	f7ee f865 	bl	8000628 <__aeabi_dmul>
 801255e:	a334      	add	r3, pc, #208	@ (adr r3, 8012630 <__kernel_cos+0x168>)
 8012560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012564:	f7ed feaa 	bl	80002bc <__adddf3>
 8012568:	4622      	mov	r2, r4
 801256a:	462b      	mov	r3, r5
 801256c:	f7ee f85c 	bl	8000628 <__aeabi_dmul>
 8012570:	4622      	mov	r2, r4
 8012572:	462b      	mov	r3, r5
 8012574:	f7ee f858 	bl	8000628 <__aeabi_dmul>
 8012578:	e9dd 2300 	ldrd	r2, r3, [sp]
 801257c:	4604      	mov	r4, r0
 801257e:	460d      	mov	r5, r1
 8012580:	4630      	mov	r0, r6
 8012582:	4639      	mov	r1, r7
 8012584:	f7ee f850 	bl	8000628 <__aeabi_dmul>
 8012588:	460b      	mov	r3, r1
 801258a:	4602      	mov	r2, r0
 801258c:	4629      	mov	r1, r5
 801258e:	4620      	mov	r0, r4
 8012590:	f7ed fe92 	bl	80002b8 <__aeabi_dsub>
 8012594:	4b2b      	ldr	r3, [pc, #172]	@ (8012644 <__kernel_cos+0x17c>)
 8012596:	4598      	cmp	r8, r3
 8012598:	4606      	mov	r6, r0
 801259a:	460f      	mov	r7, r1
 801259c:	d810      	bhi.n	80125c0 <__kernel_cos+0xf8>
 801259e:	4602      	mov	r2, r0
 80125a0:	460b      	mov	r3, r1
 80125a2:	4650      	mov	r0, sl
 80125a4:	4659      	mov	r1, fp
 80125a6:	f7ed fe87 	bl	80002b8 <__aeabi_dsub>
 80125aa:	460b      	mov	r3, r1
 80125ac:	4926      	ldr	r1, [pc, #152]	@ (8012648 <__kernel_cos+0x180>)
 80125ae:	4602      	mov	r2, r0
 80125b0:	2000      	movs	r0, #0
 80125b2:	f7ed fe81 	bl	80002b8 <__aeabi_dsub>
 80125b6:	ec41 0b10 	vmov	d0, r0, r1
 80125ba:	b003      	add	sp, #12
 80125bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125c0:	4b22      	ldr	r3, [pc, #136]	@ (801264c <__kernel_cos+0x184>)
 80125c2:	4921      	ldr	r1, [pc, #132]	@ (8012648 <__kernel_cos+0x180>)
 80125c4:	4598      	cmp	r8, r3
 80125c6:	bf8c      	ite	hi
 80125c8:	4d21      	ldrhi	r5, [pc, #132]	@ (8012650 <__kernel_cos+0x188>)
 80125ca:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80125ce:	2400      	movs	r4, #0
 80125d0:	4622      	mov	r2, r4
 80125d2:	462b      	mov	r3, r5
 80125d4:	2000      	movs	r0, #0
 80125d6:	f7ed fe6f 	bl	80002b8 <__aeabi_dsub>
 80125da:	4622      	mov	r2, r4
 80125dc:	4680      	mov	r8, r0
 80125de:	4689      	mov	r9, r1
 80125e0:	462b      	mov	r3, r5
 80125e2:	4650      	mov	r0, sl
 80125e4:	4659      	mov	r1, fp
 80125e6:	f7ed fe67 	bl	80002b8 <__aeabi_dsub>
 80125ea:	4632      	mov	r2, r6
 80125ec:	463b      	mov	r3, r7
 80125ee:	f7ed fe63 	bl	80002b8 <__aeabi_dsub>
 80125f2:	4602      	mov	r2, r0
 80125f4:	460b      	mov	r3, r1
 80125f6:	4640      	mov	r0, r8
 80125f8:	4649      	mov	r1, r9
 80125fa:	e7da      	b.n	80125b2 <__kernel_cos+0xea>
 80125fc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8012638 <__kernel_cos+0x170>
 8012600:	e7db      	b.n	80125ba <__kernel_cos+0xf2>
 8012602:	bf00      	nop
 8012604:	f3af 8000 	nop.w
 8012608:	be8838d4 	.word	0xbe8838d4
 801260c:	bda8fae9 	.word	0xbda8fae9
 8012610:	bdb4b1c4 	.word	0xbdb4b1c4
 8012614:	3e21ee9e 	.word	0x3e21ee9e
 8012618:	809c52ad 	.word	0x809c52ad
 801261c:	3e927e4f 	.word	0x3e927e4f
 8012620:	19cb1590 	.word	0x19cb1590
 8012624:	3efa01a0 	.word	0x3efa01a0
 8012628:	16c15177 	.word	0x16c15177
 801262c:	3f56c16c 	.word	0x3f56c16c
 8012630:	5555554c 	.word	0x5555554c
 8012634:	3fa55555 	.word	0x3fa55555
 8012638:	00000000 	.word	0x00000000
 801263c:	3ff00000 	.word	0x3ff00000
 8012640:	3fe00000 	.word	0x3fe00000
 8012644:	3fd33332 	.word	0x3fd33332
 8012648:	3ff00000 	.word	0x3ff00000
 801264c:	3fe90000 	.word	0x3fe90000
 8012650:	3fd20000 	.word	0x3fd20000
 8012654:	00000000 	.word	0x00000000

08012658 <__kernel_sin>:
 8012658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801265c:	ec55 4b10 	vmov	r4, r5, d0
 8012660:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012664:	b085      	sub	sp, #20
 8012666:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801266a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801266e:	4680      	mov	r8, r0
 8012670:	d205      	bcs.n	801267e <__kernel_sin+0x26>
 8012672:	4620      	mov	r0, r4
 8012674:	4629      	mov	r1, r5
 8012676:	f7ee fa87 	bl	8000b88 <__aeabi_d2iz>
 801267a:	2800      	cmp	r0, #0
 801267c:	d052      	beq.n	8012724 <__kernel_sin+0xcc>
 801267e:	4622      	mov	r2, r4
 8012680:	462b      	mov	r3, r5
 8012682:	4620      	mov	r0, r4
 8012684:	4629      	mov	r1, r5
 8012686:	f7ed ffcf 	bl	8000628 <__aeabi_dmul>
 801268a:	4682      	mov	sl, r0
 801268c:	468b      	mov	fp, r1
 801268e:	4602      	mov	r2, r0
 8012690:	460b      	mov	r3, r1
 8012692:	4620      	mov	r0, r4
 8012694:	4629      	mov	r1, r5
 8012696:	f7ed ffc7 	bl	8000628 <__aeabi_dmul>
 801269a:	a342      	add	r3, pc, #264	@ (adr r3, 80127a4 <__kernel_sin+0x14c>)
 801269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a0:	e9cd 0100 	strd	r0, r1, [sp]
 80126a4:	4650      	mov	r0, sl
 80126a6:	4659      	mov	r1, fp
 80126a8:	f7ed ffbe 	bl	8000628 <__aeabi_dmul>
 80126ac:	a33f      	add	r3, pc, #252	@ (adr r3, 80127ac <__kernel_sin+0x154>)
 80126ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b2:	f7ed fe01 	bl	80002b8 <__aeabi_dsub>
 80126b6:	4652      	mov	r2, sl
 80126b8:	465b      	mov	r3, fp
 80126ba:	f7ed ffb5 	bl	8000628 <__aeabi_dmul>
 80126be:	a33d      	add	r3, pc, #244	@ (adr r3, 80127b4 <__kernel_sin+0x15c>)
 80126c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c4:	f7ed fdfa 	bl	80002bc <__adddf3>
 80126c8:	4652      	mov	r2, sl
 80126ca:	465b      	mov	r3, fp
 80126cc:	f7ed ffac 	bl	8000628 <__aeabi_dmul>
 80126d0:	a33a      	add	r3, pc, #232	@ (adr r3, 80127bc <__kernel_sin+0x164>)
 80126d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d6:	f7ed fdef 	bl	80002b8 <__aeabi_dsub>
 80126da:	4652      	mov	r2, sl
 80126dc:	465b      	mov	r3, fp
 80126de:	f7ed ffa3 	bl	8000628 <__aeabi_dmul>
 80126e2:	a338      	add	r3, pc, #224	@ (adr r3, 80127c4 <__kernel_sin+0x16c>)
 80126e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e8:	f7ed fde8 	bl	80002bc <__adddf3>
 80126ec:	4606      	mov	r6, r0
 80126ee:	460f      	mov	r7, r1
 80126f0:	f1b8 0f00 	cmp.w	r8, #0
 80126f4:	d11b      	bne.n	801272e <__kernel_sin+0xd6>
 80126f6:	4602      	mov	r2, r0
 80126f8:	460b      	mov	r3, r1
 80126fa:	4650      	mov	r0, sl
 80126fc:	4659      	mov	r1, fp
 80126fe:	f7ed ff93 	bl	8000628 <__aeabi_dmul>
 8012702:	a325      	add	r3, pc, #148	@ (adr r3, 8012798 <__kernel_sin+0x140>)
 8012704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012708:	f7ed fdd6 	bl	80002b8 <__aeabi_dsub>
 801270c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012710:	f7ed ff8a 	bl	8000628 <__aeabi_dmul>
 8012714:	4602      	mov	r2, r0
 8012716:	460b      	mov	r3, r1
 8012718:	4620      	mov	r0, r4
 801271a:	4629      	mov	r1, r5
 801271c:	f7ed fdce 	bl	80002bc <__adddf3>
 8012720:	4604      	mov	r4, r0
 8012722:	460d      	mov	r5, r1
 8012724:	ec45 4b10 	vmov	d0, r4, r5
 8012728:	b005      	add	sp, #20
 801272a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801272e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012732:	4b1b      	ldr	r3, [pc, #108]	@ (80127a0 <__kernel_sin+0x148>)
 8012734:	2200      	movs	r2, #0
 8012736:	f7ed ff77 	bl	8000628 <__aeabi_dmul>
 801273a:	4632      	mov	r2, r6
 801273c:	4680      	mov	r8, r0
 801273e:	4689      	mov	r9, r1
 8012740:	463b      	mov	r3, r7
 8012742:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012746:	f7ed ff6f 	bl	8000628 <__aeabi_dmul>
 801274a:	4602      	mov	r2, r0
 801274c:	460b      	mov	r3, r1
 801274e:	4640      	mov	r0, r8
 8012750:	4649      	mov	r1, r9
 8012752:	f7ed fdb1 	bl	80002b8 <__aeabi_dsub>
 8012756:	4652      	mov	r2, sl
 8012758:	465b      	mov	r3, fp
 801275a:	f7ed ff65 	bl	8000628 <__aeabi_dmul>
 801275e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012762:	f7ed fda9 	bl	80002b8 <__aeabi_dsub>
 8012766:	a30c      	add	r3, pc, #48	@ (adr r3, 8012798 <__kernel_sin+0x140>)
 8012768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801276c:	4606      	mov	r6, r0
 801276e:	460f      	mov	r7, r1
 8012770:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012774:	f7ed ff58 	bl	8000628 <__aeabi_dmul>
 8012778:	4602      	mov	r2, r0
 801277a:	460b      	mov	r3, r1
 801277c:	4630      	mov	r0, r6
 801277e:	4639      	mov	r1, r7
 8012780:	f7ed fd9c 	bl	80002bc <__adddf3>
 8012784:	4602      	mov	r2, r0
 8012786:	460b      	mov	r3, r1
 8012788:	4620      	mov	r0, r4
 801278a:	4629      	mov	r1, r5
 801278c:	f7ed fd94 	bl	80002b8 <__aeabi_dsub>
 8012790:	e7c6      	b.n	8012720 <__kernel_sin+0xc8>
 8012792:	bf00      	nop
 8012794:	f3af 8000 	nop.w
 8012798:	55555549 	.word	0x55555549
 801279c:	3fc55555 	.word	0x3fc55555
 80127a0:	3fe00000 	.word	0x3fe00000
 80127a4:	5acfd57c 	.word	0x5acfd57c
 80127a8:	3de5d93a 	.word	0x3de5d93a
 80127ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80127b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80127b4:	57b1fe7d 	.word	0x57b1fe7d
 80127b8:	3ec71de3 	.word	0x3ec71de3
 80127bc:	19c161d5 	.word	0x19c161d5
 80127c0:	3f2a01a0 	.word	0x3f2a01a0
 80127c4:	1110f8a6 	.word	0x1110f8a6
 80127c8:	3f811111 	.word	0x3f811111
 80127cc:	00000000 	.word	0x00000000

080127d0 <__ieee754_rem_pio2>:
 80127d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d4:	ec57 6b10 	vmov	r6, r7, d0
 80127d8:	4bc5      	ldr	r3, [pc, #788]	@ (8012af0 <__ieee754_rem_pio2+0x320>)
 80127da:	b08d      	sub	sp, #52	@ 0x34
 80127dc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80127e0:	4598      	cmp	r8, r3
 80127e2:	4604      	mov	r4, r0
 80127e4:	9704      	str	r7, [sp, #16]
 80127e6:	d807      	bhi.n	80127f8 <__ieee754_rem_pio2+0x28>
 80127e8:	2200      	movs	r2, #0
 80127ea:	2300      	movs	r3, #0
 80127ec:	ed80 0b00 	vstr	d0, [r0]
 80127f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80127f4:	2500      	movs	r5, #0
 80127f6:	e028      	b.n	801284a <__ieee754_rem_pio2+0x7a>
 80127f8:	4bbe      	ldr	r3, [pc, #760]	@ (8012af4 <__ieee754_rem_pio2+0x324>)
 80127fa:	4598      	cmp	r8, r3
 80127fc:	d878      	bhi.n	80128f0 <__ieee754_rem_pio2+0x120>
 80127fe:	9b04      	ldr	r3, [sp, #16]
 8012800:	4dbd      	ldr	r5, [pc, #756]	@ (8012af8 <__ieee754_rem_pio2+0x328>)
 8012802:	2b00      	cmp	r3, #0
 8012804:	4630      	mov	r0, r6
 8012806:	a3ac      	add	r3, pc, #688	@ (adr r3, 8012ab8 <__ieee754_rem_pio2+0x2e8>)
 8012808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801280c:	4639      	mov	r1, r7
 801280e:	dd38      	ble.n	8012882 <__ieee754_rem_pio2+0xb2>
 8012810:	f7ed fd52 	bl	80002b8 <__aeabi_dsub>
 8012814:	45a8      	cmp	r8, r5
 8012816:	4606      	mov	r6, r0
 8012818:	460f      	mov	r7, r1
 801281a:	d01a      	beq.n	8012852 <__ieee754_rem_pio2+0x82>
 801281c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8012ac0 <__ieee754_rem_pio2+0x2f0>)
 801281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012822:	f7ed fd49 	bl	80002b8 <__aeabi_dsub>
 8012826:	4602      	mov	r2, r0
 8012828:	460b      	mov	r3, r1
 801282a:	4680      	mov	r8, r0
 801282c:	4689      	mov	r9, r1
 801282e:	4630      	mov	r0, r6
 8012830:	4639      	mov	r1, r7
 8012832:	f7ed fd41 	bl	80002b8 <__aeabi_dsub>
 8012836:	a3a2      	add	r3, pc, #648	@ (adr r3, 8012ac0 <__ieee754_rem_pio2+0x2f0>)
 8012838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801283c:	f7ed fd3c 	bl	80002b8 <__aeabi_dsub>
 8012840:	e9c4 8900 	strd	r8, r9, [r4]
 8012844:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012848:	2501      	movs	r5, #1
 801284a:	4628      	mov	r0, r5
 801284c:	b00d      	add	sp, #52	@ 0x34
 801284e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012852:	a39d      	add	r3, pc, #628	@ (adr r3, 8012ac8 <__ieee754_rem_pio2+0x2f8>)
 8012854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012858:	f7ed fd2e 	bl	80002b8 <__aeabi_dsub>
 801285c:	a39c      	add	r3, pc, #624	@ (adr r3, 8012ad0 <__ieee754_rem_pio2+0x300>)
 801285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012862:	4606      	mov	r6, r0
 8012864:	460f      	mov	r7, r1
 8012866:	f7ed fd27 	bl	80002b8 <__aeabi_dsub>
 801286a:	4602      	mov	r2, r0
 801286c:	460b      	mov	r3, r1
 801286e:	4680      	mov	r8, r0
 8012870:	4689      	mov	r9, r1
 8012872:	4630      	mov	r0, r6
 8012874:	4639      	mov	r1, r7
 8012876:	f7ed fd1f 	bl	80002b8 <__aeabi_dsub>
 801287a:	a395      	add	r3, pc, #596	@ (adr r3, 8012ad0 <__ieee754_rem_pio2+0x300>)
 801287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012880:	e7dc      	b.n	801283c <__ieee754_rem_pio2+0x6c>
 8012882:	f7ed fd1b 	bl	80002bc <__adddf3>
 8012886:	45a8      	cmp	r8, r5
 8012888:	4606      	mov	r6, r0
 801288a:	460f      	mov	r7, r1
 801288c:	d018      	beq.n	80128c0 <__ieee754_rem_pio2+0xf0>
 801288e:	a38c      	add	r3, pc, #560	@ (adr r3, 8012ac0 <__ieee754_rem_pio2+0x2f0>)
 8012890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012894:	f7ed fd12 	bl	80002bc <__adddf3>
 8012898:	4602      	mov	r2, r0
 801289a:	460b      	mov	r3, r1
 801289c:	4680      	mov	r8, r0
 801289e:	4689      	mov	r9, r1
 80128a0:	4630      	mov	r0, r6
 80128a2:	4639      	mov	r1, r7
 80128a4:	f7ed fd08 	bl	80002b8 <__aeabi_dsub>
 80128a8:	a385      	add	r3, pc, #532	@ (adr r3, 8012ac0 <__ieee754_rem_pio2+0x2f0>)
 80128aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ae:	f7ed fd05 	bl	80002bc <__adddf3>
 80128b2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80128b6:	e9c4 8900 	strd	r8, r9, [r4]
 80128ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80128be:	e7c4      	b.n	801284a <__ieee754_rem_pio2+0x7a>
 80128c0:	a381      	add	r3, pc, #516	@ (adr r3, 8012ac8 <__ieee754_rem_pio2+0x2f8>)
 80128c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c6:	f7ed fcf9 	bl	80002bc <__adddf3>
 80128ca:	a381      	add	r3, pc, #516	@ (adr r3, 8012ad0 <__ieee754_rem_pio2+0x300>)
 80128cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d0:	4606      	mov	r6, r0
 80128d2:	460f      	mov	r7, r1
 80128d4:	f7ed fcf2 	bl	80002bc <__adddf3>
 80128d8:	4602      	mov	r2, r0
 80128da:	460b      	mov	r3, r1
 80128dc:	4680      	mov	r8, r0
 80128de:	4689      	mov	r9, r1
 80128e0:	4630      	mov	r0, r6
 80128e2:	4639      	mov	r1, r7
 80128e4:	f7ed fce8 	bl	80002b8 <__aeabi_dsub>
 80128e8:	a379      	add	r3, pc, #484	@ (adr r3, 8012ad0 <__ieee754_rem_pio2+0x300>)
 80128ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ee:	e7de      	b.n	80128ae <__ieee754_rem_pio2+0xde>
 80128f0:	4b82      	ldr	r3, [pc, #520]	@ (8012afc <__ieee754_rem_pio2+0x32c>)
 80128f2:	4598      	cmp	r8, r3
 80128f4:	f200 80d1 	bhi.w	8012a9a <__ieee754_rem_pio2+0x2ca>
 80128f8:	f000 f966 	bl	8012bc8 <fabs>
 80128fc:	ec57 6b10 	vmov	r6, r7, d0
 8012900:	a375      	add	r3, pc, #468	@ (adr r3, 8012ad8 <__ieee754_rem_pio2+0x308>)
 8012902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012906:	4630      	mov	r0, r6
 8012908:	4639      	mov	r1, r7
 801290a:	f7ed fe8d 	bl	8000628 <__aeabi_dmul>
 801290e:	4b7c      	ldr	r3, [pc, #496]	@ (8012b00 <__ieee754_rem_pio2+0x330>)
 8012910:	2200      	movs	r2, #0
 8012912:	f7ed fcd3 	bl	80002bc <__adddf3>
 8012916:	f7ee f937 	bl	8000b88 <__aeabi_d2iz>
 801291a:	4605      	mov	r5, r0
 801291c:	f7ed fe1a 	bl	8000554 <__aeabi_i2d>
 8012920:	4602      	mov	r2, r0
 8012922:	460b      	mov	r3, r1
 8012924:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012928:	a363      	add	r3, pc, #396	@ (adr r3, 8012ab8 <__ieee754_rem_pio2+0x2e8>)
 801292a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801292e:	f7ed fe7b 	bl	8000628 <__aeabi_dmul>
 8012932:	4602      	mov	r2, r0
 8012934:	460b      	mov	r3, r1
 8012936:	4630      	mov	r0, r6
 8012938:	4639      	mov	r1, r7
 801293a:	f7ed fcbd 	bl	80002b8 <__aeabi_dsub>
 801293e:	a360      	add	r3, pc, #384	@ (adr r3, 8012ac0 <__ieee754_rem_pio2+0x2f0>)
 8012940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012944:	4682      	mov	sl, r0
 8012946:	468b      	mov	fp, r1
 8012948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801294c:	f7ed fe6c 	bl	8000628 <__aeabi_dmul>
 8012950:	2d1f      	cmp	r5, #31
 8012952:	4606      	mov	r6, r0
 8012954:	460f      	mov	r7, r1
 8012956:	dc0c      	bgt.n	8012972 <__ieee754_rem_pio2+0x1a2>
 8012958:	4b6a      	ldr	r3, [pc, #424]	@ (8012b04 <__ieee754_rem_pio2+0x334>)
 801295a:	1e6a      	subs	r2, r5, #1
 801295c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012960:	4543      	cmp	r3, r8
 8012962:	d006      	beq.n	8012972 <__ieee754_rem_pio2+0x1a2>
 8012964:	4632      	mov	r2, r6
 8012966:	463b      	mov	r3, r7
 8012968:	4650      	mov	r0, sl
 801296a:	4659      	mov	r1, fp
 801296c:	f7ed fca4 	bl	80002b8 <__aeabi_dsub>
 8012970:	e00e      	b.n	8012990 <__ieee754_rem_pio2+0x1c0>
 8012972:	463b      	mov	r3, r7
 8012974:	4632      	mov	r2, r6
 8012976:	4650      	mov	r0, sl
 8012978:	4659      	mov	r1, fp
 801297a:	f7ed fc9d 	bl	80002b8 <__aeabi_dsub>
 801297e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012982:	9305      	str	r3, [sp, #20]
 8012984:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012988:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801298c:	2b10      	cmp	r3, #16
 801298e:	dc02      	bgt.n	8012996 <__ieee754_rem_pio2+0x1c6>
 8012990:	e9c4 0100 	strd	r0, r1, [r4]
 8012994:	e039      	b.n	8012a0a <__ieee754_rem_pio2+0x23a>
 8012996:	a34c      	add	r3, pc, #304	@ (adr r3, 8012ac8 <__ieee754_rem_pio2+0x2f8>)
 8012998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801299c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80129a0:	f7ed fe42 	bl	8000628 <__aeabi_dmul>
 80129a4:	4606      	mov	r6, r0
 80129a6:	460f      	mov	r7, r1
 80129a8:	4602      	mov	r2, r0
 80129aa:	460b      	mov	r3, r1
 80129ac:	4650      	mov	r0, sl
 80129ae:	4659      	mov	r1, fp
 80129b0:	f7ed fc82 	bl	80002b8 <__aeabi_dsub>
 80129b4:	4602      	mov	r2, r0
 80129b6:	460b      	mov	r3, r1
 80129b8:	4680      	mov	r8, r0
 80129ba:	4689      	mov	r9, r1
 80129bc:	4650      	mov	r0, sl
 80129be:	4659      	mov	r1, fp
 80129c0:	f7ed fc7a 	bl	80002b8 <__aeabi_dsub>
 80129c4:	4632      	mov	r2, r6
 80129c6:	463b      	mov	r3, r7
 80129c8:	f7ed fc76 	bl	80002b8 <__aeabi_dsub>
 80129cc:	a340      	add	r3, pc, #256	@ (adr r3, 8012ad0 <__ieee754_rem_pio2+0x300>)
 80129ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d2:	4606      	mov	r6, r0
 80129d4:	460f      	mov	r7, r1
 80129d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80129da:	f7ed fe25 	bl	8000628 <__aeabi_dmul>
 80129de:	4632      	mov	r2, r6
 80129e0:	463b      	mov	r3, r7
 80129e2:	f7ed fc69 	bl	80002b8 <__aeabi_dsub>
 80129e6:	4602      	mov	r2, r0
 80129e8:	460b      	mov	r3, r1
 80129ea:	4606      	mov	r6, r0
 80129ec:	460f      	mov	r7, r1
 80129ee:	4640      	mov	r0, r8
 80129f0:	4649      	mov	r1, r9
 80129f2:	f7ed fc61 	bl	80002b8 <__aeabi_dsub>
 80129f6:	9a05      	ldr	r2, [sp, #20]
 80129f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80129fc:	1ad3      	subs	r3, r2, r3
 80129fe:	2b31      	cmp	r3, #49	@ 0x31
 8012a00:	dc20      	bgt.n	8012a44 <__ieee754_rem_pio2+0x274>
 8012a02:	e9c4 0100 	strd	r0, r1, [r4]
 8012a06:	46c2      	mov	sl, r8
 8012a08:	46cb      	mov	fp, r9
 8012a0a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012a0e:	4650      	mov	r0, sl
 8012a10:	4642      	mov	r2, r8
 8012a12:	464b      	mov	r3, r9
 8012a14:	4659      	mov	r1, fp
 8012a16:	f7ed fc4f 	bl	80002b8 <__aeabi_dsub>
 8012a1a:	463b      	mov	r3, r7
 8012a1c:	4632      	mov	r2, r6
 8012a1e:	f7ed fc4b 	bl	80002b8 <__aeabi_dsub>
 8012a22:	9b04      	ldr	r3, [sp, #16]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012a2a:	f6bf af0e 	bge.w	801284a <__ieee754_rem_pio2+0x7a>
 8012a2e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8012a32:	6063      	str	r3, [r4, #4]
 8012a34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012a38:	f8c4 8000 	str.w	r8, [r4]
 8012a3c:	60a0      	str	r0, [r4, #8]
 8012a3e:	60e3      	str	r3, [r4, #12]
 8012a40:	426d      	negs	r5, r5
 8012a42:	e702      	b.n	801284a <__ieee754_rem_pio2+0x7a>
 8012a44:	a326      	add	r3, pc, #152	@ (adr r3, 8012ae0 <__ieee754_rem_pio2+0x310>)
 8012a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a4e:	f7ed fdeb 	bl	8000628 <__aeabi_dmul>
 8012a52:	4606      	mov	r6, r0
 8012a54:	460f      	mov	r7, r1
 8012a56:	4602      	mov	r2, r0
 8012a58:	460b      	mov	r3, r1
 8012a5a:	4640      	mov	r0, r8
 8012a5c:	4649      	mov	r1, r9
 8012a5e:	f7ed fc2b 	bl	80002b8 <__aeabi_dsub>
 8012a62:	4602      	mov	r2, r0
 8012a64:	460b      	mov	r3, r1
 8012a66:	4682      	mov	sl, r0
 8012a68:	468b      	mov	fp, r1
 8012a6a:	4640      	mov	r0, r8
 8012a6c:	4649      	mov	r1, r9
 8012a6e:	f7ed fc23 	bl	80002b8 <__aeabi_dsub>
 8012a72:	4632      	mov	r2, r6
 8012a74:	463b      	mov	r3, r7
 8012a76:	f7ed fc1f 	bl	80002b8 <__aeabi_dsub>
 8012a7a:	a31b      	add	r3, pc, #108	@ (adr r3, 8012ae8 <__ieee754_rem_pio2+0x318>)
 8012a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a80:	4606      	mov	r6, r0
 8012a82:	460f      	mov	r7, r1
 8012a84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012a88:	f7ed fdce 	bl	8000628 <__aeabi_dmul>
 8012a8c:	4632      	mov	r2, r6
 8012a8e:	463b      	mov	r3, r7
 8012a90:	f7ed fc12 	bl	80002b8 <__aeabi_dsub>
 8012a94:	4606      	mov	r6, r0
 8012a96:	460f      	mov	r7, r1
 8012a98:	e764      	b.n	8012964 <__ieee754_rem_pio2+0x194>
 8012a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8012b08 <__ieee754_rem_pio2+0x338>)
 8012a9c:	4598      	cmp	r8, r3
 8012a9e:	d935      	bls.n	8012b0c <__ieee754_rem_pio2+0x33c>
 8012aa0:	4632      	mov	r2, r6
 8012aa2:	463b      	mov	r3, r7
 8012aa4:	4630      	mov	r0, r6
 8012aa6:	4639      	mov	r1, r7
 8012aa8:	f7ed fc06 	bl	80002b8 <__aeabi_dsub>
 8012aac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012ab0:	e9c4 0100 	strd	r0, r1, [r4]
 8012ab4:	e69e      	b.n	80127f4 <__ieee754_rem_pio2+0x24>
 8012ab6:	bf00      	nop
 8012ab8:	54400000 	.word	0x54400000
 8012abc:	3ff921fb 	.word	0x3ff921fb
 8012ac0:	1a626331 	.word	0x1a626331
 8012ac4:	3dd0b461 	.word	0x3dd0b461
 8012ac8:	1a600000 	.word	0x1a600000
 8012acc:	3dd0b461 	.word	0x3dd0b461
 8012ad0:	2e037073 	.word	0x2e037073
 8012ad4:	3ba3198a 	.word	0x3ba3198a
 8012ad8:	6dc9c883 	.word	0x6dc9c883
 8012adc:	3fe45f30 	.word	0x3fe45f30
 8012ae0:	2e000000 	.word	0x2e000000
 8012ae4:	3ba3198a 	.word	0x3ba3198a
 8012ae8:	252049c1 	.word	0x252049c1
 8012aec:	397b839a 	.word	0x397b839a
 8012af0:	3fe921fb 	.word	0x3fe921fb
 8012af4:	4002d97b 	.word	0x4002d97b
 8012af8:	3ff921fb 	.word	0x3ff921fb
 8012afc:	413921fb 	.word	0x413921fb
 8012b00:	3fe00000 	.word	0x3fe00000
 8012b04:	08013bb0 	.word	0x08013bb0
 8012b08:	7fefffff 	.word	0x7fefffff
 8012b0c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012b10:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8012b14:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012b18:	4630      	mov	r0, r6
 8012b1a:	460f      	mov	r7, r1
 8012b1c:	f7ee f834 	bl	8000b88 <__aeabi_d2iz>
 8012b20:	f7ed fd18 	bl	8000554 <__aeabi_i2d>
 8012b24:	4602      	mov	r2, r0
 8012b26:	460b      	mov	r3, r1
 8012b28:	4630      	mov	r0, r6
 8012b2a:	4639      	mov	r1, r7
 8012b2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012b30:	f7ed fbc2 	bl	80002b8 <__aeabi_dsub>
 8012b34:	4b22      	ldr	r3, [pc, #136]	@ (8012bc0 <__ieee754_rem_pio2+0x3f0>)
 8012b36:	2200      	movs	r2, #0
 8012b38:	f7ed fd76 	bl	8000628 <__aeabi_dmul>
 8012b3c:	460f      	mov	r7, r1
 8012b3e:	4606      	mov	r6, r0
 8012b40:	f7ee f822 	bl	8000b88 <__aeabi_d2iz>
 8012b44:	f7ed fd06 	bl	8000554 <__aeabi_i2d>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	460b      	mov	r3, r1
 8012b4c:	4630      	mov	r0, r6
 8012b4e:	4639      	mov	r1, r7
 8012b50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012b54:	f7ed fbb0 	bl	80002b8 <__aeabi_dsub>
 8012b58:	4b19      	ldr	r3, [pc, #100]	@ (8012bc0 <__ieee754_rem_pio2+0x3f0>)
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	f7ed fd64 	bl	8000628 <__aeabi_dmul>
 8012b60:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8012b64:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8012b68:	f04f 0803 	mov.w	r8, #3
 8012b6c:	2600      	movs	r6, #0
 8012b6e:	2700      	movs	r7, #0
 8012b70:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012b74:	4632      	mov	r2, r6
 8012b76:	463b      	mov	r3, r7
 8012b78:	46c2      	mov	sl, r8
 8012b7a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012b7e:	f7ed ffbb 	bl	8000af8 <__aeabi_dcmpeq>
 8012b82:	2800      	cmp	r0, #0
 8012b84:	d1f4      	bne.n	8012b70 <__ieee754_rem_pio2+0x3a0>
 8012b86:	4b0f      	ldr	r3, [pc, #60]	@ (8012bc4 <__ieee754_rem_pio2+0x3f4>)
 8012b88:	9301      	str	r3, [sp, #4]
 8012b8a:	2302      	movs	r3, #2
 8012b8c:	9300      	str	r3, [sp, #0]
 8012b8e:	462a      	mov	r2, r5
 8012b90:	4653      	mov	r3, sl
 8012b92:	4621      	mov	r1, r4
 8012b94:	a806      	add	r0, sp, #24
 8012b96:	f000 f81f 	bl	8012bd8 <__kernel_rem_pio2>
 8012b9a:	9b04      	ldr	r3, [sp, #16]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	4605      	mov	r5, r0
 8012ba0:	f6bf ae53 	bge.w	801284a <__ieee754_rem_pio2+0x7a>
 8012ba4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8012ba8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012bac:	e9c4 2300 	strd	r2, r3, [r4]
 8012bb0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8012bb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012bb8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8012bbc:	e740      	b.n	8012a40 <__ieee754_rem_pio2+0x270>
 8012bbe:	bf00      	nop
 8012bc0:	41700000 	.word	0x41700000
 8012bc4:	08013c30 	.word	0x08013c30

08012bc8 <fabs>:
 8012bc8:	ec51 0b10 	vmov	r0, r1, d0
 8012bcc:	4602      	mov	r2, r0
 8012bce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012bd2:	ec43 2b10 	vmov	d0, r2, r3
 8012bd6:	4770      	bx	lr

08012bd8 <__kernel_rem_pio2>:
 8012bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bdc:	ed2d 8b02 	vpush	{d8}
 8012be0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8012be4:	f112 0f14 	cmn.w	r2, #20
 8012be8:	9306      	str	r3, [sp, #24]
 8012bea:	9104      	str	r1, [sp, #16]
 8012bec:	4bbe      	ldr	r3, [pc, #760]	@ (8012ee8 <__kernel_rem_pio2+0x310>)
 8012bee:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8012bf0:	9008      	str	r0, [sp, #32]
 8012bf2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012bf6:	9300      	str	r3, [sp, #0]
 8012bf8:	9b06      	ldr	r3, [sp, #24]
 8012bfa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8012bfe:	bfa8      	it	ge
 8012c00:	1ed4      	subge	r4, r2, #3
 8012c02:	9305      	str	r3, [sp, #20]
 8012c04:	bfb2      	itee	lt
 8012c06:	2400      	movlt	r4, #0
 8012c08:	2318      	movge	r3, #24
 8012c0a:	fb94 f4f3 	sdivge	r4, r4, r3
 8012c0e:	f06f 0317 	mvn.w	r3, #23
 8012c12:	fb04 3303 	mla	r3, r4, r3, r3
 8012c16:	eb03 0b02 	add.w	fp, r3, r2
 8012c1a:	9b00      	ldr	r3, [sp, #0]
 8012c1c:	9a05      	ldr	r2, [sp, #20]
 8012c1e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8012ed8 <__kernel_rem_pio2+0x300>
 8012c22:	eb03 0802 	add.w	r8, r3, r2
 8012c26:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012c28:	1aa7      	subs	r7, r4, r2
 8012c2a:	ae20      	add	r6, sp, #128	@ 0x80
 8012c2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012c30:	2500      	movs	r5, #0
 8012c32:	4545      	cmp	r5, r8
 8012c34:	dd13      	ble.n	8012c5e <__kernel_rem_pio2+0x86>
 8012c36:	9b06      	ldr	r3, [sp, #24]
 8012c38:	aa20      	add	r2, sp, #128	@ 0x80
 8012c3a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012c3e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8012c42:	f04f 0800 	mov.w	r8, #0
 8012c46:	9b00      	ldr	r3, [sp, #0]
 8012c48:	4598      	cmp	r8, r3
 8012c4a:	dc31      	bgt.n	8012cb0 <__kernel_rem_pio2+0xd8>
 8012c4c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8012ed8 <__kernel_rem_pio2+0x300>
 8012c50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012c54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012c58:	462f      	mov	r7, r5
 8012c5a:	2600      	movs	r6, #0
 8012c5c:	e01b      	b.n	8012c96 <__kernel_rem_pio2+0xbe>
 8012c5e:	42ef      	cmn	r7, r5
 8012c60:	d407      	bmi.n	8012c72 <__kernel_rem_pio2+0x9a>
 8012c62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012c66:	f7ed fc75 	bl	8000554 <__aeabi_i2d>
 8012c6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012c6e:	3501      	adds	r5, #1
 8012c70:	e7df      	b.n	8012c32 <__kernel_rem_pio2+0x5a>
 8012c72:	ec51 0b18 	vmov	r0, r1, d8
 8012c76:	e7f8      	b.n	8012c6a <__kernel_rem_pio2+0x92>
 8012c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012c80:	f7ed fcd2 	bl	8000628 <__aeabi_dmul>
 8012c84:	4602      	mov	r2, r0
 8012c86:	460b      	mov	r3, r1
 8012c88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c8c:	f7ed fb16 	bl	80002bc <__adddf3>
 8012c90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c94:	3601      	adds	r6, #1
 8012c96:	9b05      	ldr	r3, [sp, #20]
 8012c98:	429e      	cmp	r6, r3
 8012c9a:	f1a7 0708 	sub.w	r7, r7, #8
 8012c9e:	ddeb      	ble.n	8012c78 <__kernel_rem_pio2+0xa0>
 8012ca0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ca4:	f108 0801 	add.w	r8, r8, #1
 8012ca8:	ecaa 7b02 	vstmia	sl!, {d7}
 8012cac:	3508      	adds	r5, #8
 8012cae:	e7ca      	b.n	8012c46 <__kernel_rem_pio2+0x6e>
 8012cb0:	9b00      	ldr	r3, [sp, #0]
 8012cb2:	f8dd 8000 	ldr.w	r8, [sp]
 8012cb6:	aa0c      	add	r2, sp, #48	@ 0x30
 8012cb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012cbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8012cbe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012cc0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012cc6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8012cca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012ccc:	ab98      	add	r3, sp, #608	@ 0x260
 8012cce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012cd2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8012cd6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012cda:	ac0c      	add	r4, sp, #48	@ 0x30
 8012cdc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8012cde:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8012ce2:	46a1      	mov	r9, r4
 8012ce4:	46c2      	mov	sl, r8
 8012ce6:	f1ba 0f00 	cmp.w	sl, #0
 8012cea:	f1a5 0508 	sub.w	r5, r5, #8
 8012cee:	dc77      	bgt.n	8012de0 <__kernel_rem_pio2+0x208>
 8012cf0:	4658      	mov	r0, fp
 8012cf2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8012cf6:	f000 fac7 	bl	8013288 <scalbn>
 8012cfa:	ec57 6b10 	vmov	r6, r7, d0
 8012cfe:	2200      	movs	r2, #0
 8012d00:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8012d04:	4630      	mov	r0, r6
 8012d06:	4639      	mov	r1, r7
 8012d08:	f7ed fc8e 	bl	8000628 <__aeabi_dmul>
 8012d0c:	ec41 0b10 	vmov	d0, r0, r1
 8012d10:	f000 fb3a 	bl	8013388 <floor>
 8012d14:	4b75      	ldr	r3, [pc, #468]	@ (8012eec <__kernel_rem_pio2+0x314>)
 8012d16:	ec51 0b10 	vmov	r0, r1, d0
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	f7ed fc84 	bl	8000628 <__aeabi_dmul>
 8012d20:	4602      	mov	r2, r0
 8012d22:	460b      	mov	r3, r1
 8012d24:	4630      	mov	r0, r6
 8012d26:	4639      	mov	r1, r7
 8012d28:	f7ed fac6 	bl	80002b8 <__aeabi_dsub>
 8012d2c:	460f      	mov	r7, r1
 8012d2e:	4606      	mov	r6, r0
 8012d30:	f7ed ff2a 	bl	8000b88 <__aeabi_d2iz>
 8012d34:	9002      	str	r0, [sp, #8]
 8012d36:	f7ed fc0d 	bl	8000554 <__aeabi_i2d>
 8012d3a:	4602      	mov	r2, r0
 8012d3c:	460b      	mov	r3, r1
 8012d3e:	4630      	mov	r0, r6
 8012d40:	4639      	mov	r1, r7
 8012d42:	f7ed fab9 	bl	80002b8 <__aeabi_dsub>
 8012d46:	f1bb 0f00 	cmp.w	fp, #0
 8012d4a:	4606      	mov	r6, r0
 8012d4c:	460f      	mov	r7, r1
 8012d4e:	dd6c      	ble.n	8012e2a <__kernel_rem_pio2+0x252>
 8012d50:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8012d54:	ab0c      	add	r3, sp, #48	@ 0x30
 8012d56:	9d02      	ldr	r5, [sp, #8]
 8012d58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012d5c:	f1cb 0018 	rsb	r0, fp, #24
 8012d60:	fa43 f200 	asr.w	r2, r3, r0
 8012d64:	4415      	add	r5, r2
 8012d66:	4082      	lsls	r2, r0
 8012d68:	1a9b      	subs	r3, r3, r2
 8012d6a:	aa0c      	add	r2, sp, #48	@ 0x30
 8012d6c:	9502      	str	r5, [sp, #8]
 8012d6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012d72:	f1cb 0217 	rsb	r2, fp, #23
 8012d76:	fa43 f902 	asr.w	r9, r3, r2
 8012d7a:	f1b9 0f00 	cmp.w	r9, #0
 8012d7e:	dd64      	ble.n	8012e4a <__kernel_rem_pio2+0x272>
 8012d80:	9b02      	ldr	r3, [sp, #8]
 8012d82:	2200      	movs	r2, #0
 8012d84:	3301      	adds	r3, #1
 8012d86:	9302      	str	r3, [sp, #8]
 8012d88:	4615      	mov	r5, r2
 8012d8a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8012d8e:	4590      	cmp	r8, r2
 8012d90:	f300 80b8 	bgt.w	8012f04 <__kernel_rem_pio2+0x32c>
 8012d94:	f1bb 0f00 	cmp.w	fp, #0
 8012d98:	dd07      	ble.n	8012daa <__kernel_rem_pio2+0x1d2>
 8012d9a:	f1bb 0f01 	cmp.w	fp, #1
 8012d9e:	f000 80bf 	beq.w	8012f20 <__kernel_rem_pio2+0x348>
 8012da2:	f1bb 0f02 	cmp.w	fp, #2
 8012da6:	f000 80c6 	beq.w	8012f36 <__kernel_rem_pio2+0x35e>
 8012daa:	f1b9 0f02 	cmp.w	r9, #2
 8012dae:	d14c      	bne.n	8012e4a <__kernel_rem_pio2+0x272>
 8012db0:	4632      	mov	r2, r6
 8012db2:	463b      	mov	r3, r7
 8012db4:	494e      	ldr	r1, [pc, #312]	@ (8012ef0 <__kernel_rem_pio2+0x318>)
 8012db6:	2000      	movs	r0, #0
 8012db8:	f7ed fa7e 	bl	80002b8 <__aeabi_dsub>
 8012dbc:	4606      	mov	r6, r0
 8012dbe:	460f      	mov	r7, r1
 8012dc0:	2d00      	cmp	r5, #0
 8012dc2:	d042      	beq.n	8012e4a <__kernel_rem_pio2+0x272>
 8012dc4:	4658      	mov	r0, fp
 8012dc6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8012ee0 <__kernel_rem_pio2+0x308>
 8012dca:	f000 fa5d 	bl	8013288 <scalbn>
 8012dce:	4630      	mov	r0, r6
 8012dd0:	4639      	mov	r1, r7
 8012dd2:	ec53 2b10 	vmov	r2, r3, d0
 8012dd6:	f7ed fa6f 	bl	80002b8 <__aeabi_dsub>
 8012dda:	4606      	mov	r6, r0
 8012ddc:	460f      	mov	r7, r1
 8012dde:	e034      	b.n	8012e4a <__kernel_rem_pio2+0x272>
 8012de0:	4b44      	ldr	r3, [pc, #272]	@ (8012ef4 <__kernel_rem_pio2+0x31c>)
 8012de2:	2200      	movs	r2, #0
 8012de4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012de8:	f7ed fc1e 	bl	8000628 <__aeabi_dmul>
 8012dec:	f7ed fecc 	bl	8000b88 <__aeabi_d2iz>
 8012df0:	f7ed fbb0 	bl	8000554 <__aeabi_i2d>
 8012df4:	4b40      	ldr	r3, [pc, #256]	@ (8012ef8 <__kernel_rem_pio2+0x320>)
 8012df6:	2200      	movs	r2, #0
 8012df8:	4606      	mov	r6, r0
 8012dfa:	460f      	mov	r7, r1
 8012dfc:	f7ed fc14 	bl	8000628 <__aeabi_dmul>
 8012e00:	4602      	mov	r2, r0
 8012e02:	460b      	mov	r3, r1
 8012e04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e08:	f7ed fa56 	bl	80002b8 <__aeabi_dsub>
 8012e0c:	f7ed febc 	bl	8000b88 <__aeabi_d2iz>
 8012e10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012e14:	f849 0b04 	str.w	r0, [r9], #4
 8012e18:	4639      	mov	r1, r7
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	f7ed fa4e 	bl	80002bc <__adddf3>
 8012e20:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8012e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e28:	e75d      	b.n	8012ce6 <__kernel_rem_pio2+0x10e>
 8012e2a:	d107      	bne.n	8012e3c <__kernel_rem_pio2+0x264>
 8012e2c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8012e30:	aa0c      	add	r2, sp, #48	@ 0x30
 8012e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e36:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8012e3a:	e79e      	b.n	8012d7a <__kernel_rem_pio2+0x1a2>
 8012e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8012efc <__kernel_rem_pio2+0x324>)
 8012e3e:	2200      	movs	r2, #0
 8012e40:	f7ed fe78 	bl	8000b34 <__aeabi_dcmpge>
 8012e44:	2800      	cmp	r0, #0
 8012e46:	d143      	bne.n	8012ed0 <__kernel_rem_pio2+0x2f8>
 8012e48:	4681      	mov	r9, r0
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	4630      	mov	r0, r6
 8012e50:	4639      	mov	r1, r7
 8012e52:	f7ed fe51 	bl	8000af8 <__aeabi_dcmpeq>
 8012e56:	2800      	cmp	r0, #0
 8012e58:	f000 80bf 	beq.w	8012fda <__kernel_rem_pio2+0x402>
 8012e5c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8012e60:	2200      	movs	r2, #0
 8012e62:	9900      	ldr	r1, [sp, #0]
 8012e64:	428b      	cmp	r3, r1
 8012e66:	da6e      	bge.n	8012f46 <__kernel_rem_pio2+0x36e>
 8012e68:	2a00      	cmp	r2, #0
 8012e6a:	f000 8089 	beq.w	8012f80 <__kernel_rem_pio2+0x3a8>
 8012e6e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012e72:	ab0c      	add	r3, sp, #48	@ 0x30
 8012e74:	f1ab 0b18 	sub.w	fp, fp, #24
 8012e78:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d0f6      	beq.n	8012e6e <__kernel_rem_pio2+0x296>
 8012e80:	4658      	mov	r0, fp
 8012e82:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8012ee0 <__kernel_rem_pio2+0x308>
 8012e86:	f000 f9ff 	bl	8013288 <scalbn>
 8012e8a:	f108 0301 	add.w	r3, r8, #1
 8012e8e:	00da      	lsls	r2, r3, #3
 8012e90:	9205      	str	r2, [sp, #20]
 8012e92:	ec55 4b10 	vmov	r4, r5, d0
 8012e96:	aa70      	add	r2, sp, #448	@ 0x1c0
 8012e98:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8012ef4 <__kernel_rem_pio2+0x31c>
 8012e9c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8012ea0:	4646      	mov	r6, r8
 8012ea2:	f04f 0a00 	mov.w	sl, #0
 8012ea6:	2e00      	cmp	r6, #0
 8012ea8:	f280 80cf 	bge.w	801304a <__kernel_rem_pio2+0x472>
 8012eac:	4644      	mov	r4, r8
 8012eae:	2c00      	cmp	r4, #0
 8012eb0:	f2c0 80fd 	blt.w	80130ae <__kernel_rem_pio2+0x4d6>
 8012eb4:	4b12      	ldr	r3, [pc, #72]	@ (8012f00 <__kernel_rem_pio2+0x328>)
 8012eb6:	461f      	mov	r7, r3
 8012eb8:	ab70      	add	r3, sp, #448	@ 0x1c0
 8012eba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012ebe:	9306      	str	r3, [sp, #24]
 8012ec0:	f04f 0a00 	mov.w	sl, #0
 8012ec4:	f04f 0b00 	mov.w	fp, #0
 8012ec8:	2600      	movs	r6, #0
 8012eca:	eba8 0504 	sub.w	r5, r8, r4
 8012ece:	e0e2      	b.n	8013096 <__kernel_rem_pio2+0x4be>
 8012ed0:	f04f 0902 	mov.w	r9, #2
 8012ed4:	e754      	b.n	8012d80 <__kernel_rem_pio2+0x1a8>
 8012ed6:	bf00      	nop
	...
 8012ee4:	3ff00000 	.word	0x3ff00000
 8012ee8:	08013d78 	.word	0x08013d78
 8012eec:	40200000 	.word	0x40200000
 8012ef0:	3ff00000 	.word	0x3ff00000
 8012ef4:	3e700000 	.word	0x3e700000
 8012ef8:	41700000 	.word	0x41700000
 8012efc:	3fe00000 	.word	0x3fe00000
 8012f00:	08013d38 	.word	0x08013d38
 8012f04:	f854 3b04 	ldr.w	r3, [r4], #4
 8012f08:	b945      	cbnz	r5, 8012f1c <__kernel_rem_pio2+0x344>
 8012f0a:	b123      	cbz	r3, 8012f16 <__kernel_rem_pio2+0x33e>
 8012f0c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8012f10:	f844 3c04 	str.w	r3, [r4, #-4]
 8012f14:	2301      	movs	r3, #1
 8012f16:	3201      	adds	r2, #1
 8012f18:	461d      	mov	r5, r3
 8012f1a:	e738      	b.n	8012d8e <__kernel_rem_pio2+0x1b6>
 8012f1c:	1acb      	subs	r3, r1, r3
 8012f1e:	e7f7      	b.n	8012f10 <__kernel_rem_pio2+0x338>
 8012f20:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8012f24:	ab0c      	add	r3, sp, #48	@ 0x30
 8012f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f2a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012f2e:	a90c      	add	r1, sp, #48	@ 0x30
 8012f30:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012f34:	e739      	b.n	8012daa <__kernel_rem_pio2+0x1d2>
 8012f36:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8012f3a:	ab0c      	add	r3, sp, #48	@ 0x30
 8012f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f40:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012f44:	e7f3      	b.n	8012f2e <__kernel_rem_pio2+0x356>
 8012f46:	a90c      	add	r1, sp, #48	@ 0x30
 8012f48:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012f4c:	3b01      	subs	r3, #1
 8012f4e:	430a      	orrs	r2, r1
 8012f50:	e787      	b.n	8012e62 <__kernel_rem_pio2+0x28a>
 8012f52:	3401      	adds	r4, #1
 8012f54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8012f58:	2a00      	cmp	r2, #0
 8012f5a:	d0fa      	beq.n	8012f52 <__kernel_rem_pio2+0x37a>
 8012f5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012f5e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012f62:	eb0d 0503 	add.w	r5, sp, r3
 8012f66:	9b06      	ldr	r3, [sp, #24]
 8012f68:	aa20      	add	r2, sp, #128	@ 0x80
 8012f6a:	4443      	add	r3, r8
 8012f6c:	f108 0701 	add.w	r7, r8, #1
 8012f70:	3d98      	subs	r5, #152	@ 0x98
 8012f72:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8012f76:	4444      	add	r4, r8
 8012f78:	42bc      	cmp	r4, r7
 8012f7a:	da04      	bge.n	8012f86 <__kernel_rem_pio2+0x3ae>
 8012f7c:	46a0      	mov	r8, r4
 8012f7e:	e6a2      	b.n	8012cc6 <__kernel_rem_pio2+0xee>
 8012f80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f82:	2401      	movs	r4, #1
 8012f84:	e7e6      	b.n	8012f54 <__kernel_rem_pio2+0x37c>
 8012f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f88:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012f8c:	f7ed fae2 	bl	8000554 <__aeabi_i2d>
 8012f90:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8013258 <__kernel_rem_pio2+0x680>
 8012f94:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012f98:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012f9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012fa0:	46b2      	mov	sl, r6
 8012fa2:	f04f 0800 	mov.w	r8, #0
 8012fa6:	9b05      	ldr	r3, [sp, #20]
 8012fa8:	4598      	cmp	r8, r3
 8012faa:	dd05      	ble.n	8012fb8 <__kernel_rem_pio2+0x3e0>
 8012fac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012fb0:	3701      	adds	r7, #1
 8012fb2:	eca5 7b02 	vstmia	r5!, {d7}
 8012fb6:	e7df      	b.n	8012f78 <__kernel_rem_pio2+0x3a0>
 8012fb8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8012fbc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012fc0:	f7ed fb32 	bl	8000628 <__aeabi_dmul>
 8012fc4:	4602      	mov	r2, r0
 8012fc6:	460b      	mov	r3, r1
 8012fc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fcc:	f7ed f976 	bl	80002bc <__adddf3>
 8012fd0:	f108 0801 	add.w	r8, r8, #1
 8012fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fd8:	e7e5      	b.n	8012fa6 <__kernel_rem_pio2+0x3ce>
 8012fda:	f1cb 0000 	rsb	r0, fp, #0
 8012fde:	ec47 6b10 	vmov	d0, r6, r7
 8012fe2:	f000 f951 	bl	8013288 <scalbn>
 8012fe6:	ec55 4b10 	vmov	r4, r5, d0
 8012fea:	4b9d      	ldr	r3, [pc, #628]	@ (8013260 <__kernel_rem_pio2+0x688>)
 8012fec:	2200      	movs	r2, #0
 8012fee:	4620      	mov	r0, r4
 8012ff0:	4629      	mov	r1, r5
 8012ff2:	f7ed fd9f 	bl	8000b34 <__aeabi_dcmpge>
 8012ff6:	b300      	cbz	r0, 801303a <__kernel_rem_pio2+0x462>
 8012ff8:	4b9a      	ldr	r3, [pc, #616]	@ (8013264 <__kernel_rem_pio2+0x68c>)
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	4620      	mov	r0, r4
 8012ffe:	4629      	mov	r1, r5
 8013000:	f7ed fb12 	bl	8000628 <__aeabi_dmul>
 8013004:	f7ed fdc0 	bl	8000b88 <__aeabi_d2iz>
 8013008:	4606      	mov	r6, r0
 801300a:	f7ed faa3 	bl	8000554 <__aeabi_i2d>
 801300e:	4b94      	ldr	r3, [pc, #592]	@ (8013260 <__kernel_rem_pio2+0x688>)
 8013010:	2200      	movs	r2, #0
 8013012:	f7ed fb09 	bl	8000628 <__aeabi_dmul>
 8013016:	460b      	mov	r3, r1
 8013018:	4602      	mov	r2, r0
 801301a:	4629      	mov	r1, r5
 801301c:	4620      	mov	r0, r4
 801301e:	f7ed f94b 	bl	80002b8 <__aeabi_dsub>
 8013022:	f7ed fdb1 	bl	8000b88 <__aeabi_d2iz>
 8013026:	ab0c      	add	r3, sp, #48	@ 0x30
 8013028:	f10b 0b18 	add.w	fp, fp, #24
 801302c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013030:	f108 0801 	add.w	r8, r8, #1
 8013034:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8013038:	e722      	b.n	8012e80 <__kernel_rem_pio2+0x2a8>
 801303a:	4620      	mov	r0, r4
 801303c:	4629      	mov	r1, r5
 801303e:	f7ed fda3 	bl	8000b88 <__aeabi_d2iz>
 8013042:	ab0c      	add	r3, sp, #48	@ 0x30
 8013044:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013048:	e71a      	b.n	8012e80 <__kernel_rem_pio2+0x2a8>
 801304a:	ab0c      	add	r3, sp, #48	@ 0x30
 801304c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013050:	f7ed fa80 	bl	8000554 <__aeabi_i2d>
 8013054:	4622      	mov	r2, r4
 8013056:	462b      	mov	r3, r5
 8013058:	f7ed fae6 	bl	8000628 <__aeabi_dmul>
 801305c:	4652      	mov	r2, sl
 801305e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8013062:	465b      	mov	r3, fp
 8013064:	4620      	mov	r0, r4
 8013066:	4629      	mov	r1, r5
 8013068:	f7ed fade 	bl	8000628 <__aeabi_dmul>
 801306c:	3e01      	subs	r6, #1
 801306e:	4604      	mov	r4, r0
 8013070:	460d      	mov	r5, r1
 8013072:	e718      	b.n	8012ea6 <__kernel_rem_pio2+0x2ce>
 8013074:	9906      	ldr	r1, [sp, #24]
 8013076:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801307a:	9106      	str	r1, [sp, #24]
 801307c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013080:	f7ed fad2 	bl	8000628 <__aeabi_dmul>
 8013084:	4602      	mov	r2, r0
 8013086:	460b      	mov	r3, r1
 8013088:	4650      	mov	r0, sl
 801308a:	4659      	mov	r1, fp
 801308c:	f7ed f916 	bl	80002bc <__adddf3>
 8013090:	3601      	adds	r6, #1
 8013092:	4682      	mov	sl, r0
 8013094:	468b      	mov	fp, r1
 8013096:	9b00      	ldr	r3, [sp, #0]
 8013098:	429e      	cmp	r6, r3
 801309a:	dc01      	bgt.n	80130a0 <__kernel_rem_pio2+0x4c8>
 801309c:	42b5      	cmp	r5, r6
 801309e:	dae9      	bge.n	8013074 <__kernel_rem_pio2+0x49c>
 80130a0:	ab48      	add	r3, sp, #288	@ 0x120
 80130a2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80130a6:	e9c5 ab00 	strd	sl, fp, [r5]
 80130aa:	3c01      	subs	r4, #1
 80130ac:	e6ff      	b.n	8012eae <__kernel_rem_pio2+0x2d6>
 80130ae:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80130b0:	2b02      	cmp	r3, #2
 80130b2:	dc0b      	bgt.n	80130cc <__kernel_rem_pio2+0x4f4>
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	dc39      	bgt.n	801312c <__kernel_rem_pio2+0x554>
 80130b8:	d05d      	beq.n	8013176 <__kernel_rem_pio2+0x59e>
 80130ba:	9b02      	ldr	r3, [sp, #8]
 80130bc:	f003 0007 	and.w	r0, r3, #7
 80130c0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80130c4:	ecbd 8b02 	vpop	{d8}
 80130c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130cc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80130ce:	2b03      	cmp	r3, #3
 80130d0:	d1f3      	bne.n	80130ba <__kernel_rem_pio2+0x4e2>
 80130d2:	9b05      	ldr	r3, [sp, #20]
 80130d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80130d8:	eb0d 0403 	add.w	r4, sp, r3
 80130dc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80130e0:	4625      	mov	r5, r4
 80130e2:	46c2      	mov	sl, r8
 80130e4:	f1ba 0f00 	cmp.w	sl, #0
 80130e8:	f1a5 0508 	sub.w	r5, r5, #8
 80130ec:	dc6b      	bgt.n	80131c6 <__kernel_rem_pio2+0x5ee>
 80130ee:	4645      	mov	r5, r8
 80130f0:	2d01      	cmp	r5, #1
 80130f2:	f1a4 0408 	sub.w	r4, r4, #8
 80130f6:	f300 8087 	bgt.w	8013208 <__kernel_rem_pio2+0x630>
 80130fa:	9c05      	ldr	r4, [sp, #20]
 80130fc:	ab48      	add	r3, sp, #288	@ 0x120
 80130fe:	441c      	add	r4, r3
 8013100:	2000      	movs	r0, #0
 8013102:	2100      	movs	r1, #0
 8013104:	f1b8 0f01 	cmp.w	r8, #1
 8013108:	f300 809c 	bgt.w	8013244 <__kernel_rem_pio2+0x66c>
 801310c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8013110:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8013114:	f1b9 0f00 	cmp.w	r9, #0
 8013118:	f040 80a6 	bne.w	8013268 <__kernel_rem_pio2+0x690>
 801311c:	9b04      	ldr	r3, [sp, #16]
 801311e:	e9c3 7800 	strd	r7, r8, [r3]
 8013122:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8013126:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801312a:	e7c6      	b.n	80130ba <__kernel_rem_pio2+0x4e2>
 801312c:	9d05      	ldr	r5, [sp, #20]
 801312e:	ab48      	add	r3, sp, #288	@ 0x120
 8013130:	441d      	add	r5, r3
 8013132:	4644      	mov	r4, r8
 8013134:	2000      	movs	r0, #0
 8013136:	2100      	movs	r1, #0
 8013138:	2c00      	cmp	r4, #0
 801313a:	da35      	bge.n	80131a8 <__kernel_rem_pio2+0x5d0>
 801313c:	f1b9 0f00 	cmp.w	r9, #0
 8013140:	d038      	beq.n	80131b4 <__kernel_rem_pio2+0x5dc>
 8013142:	4602      	mov	r2, r0
 8013144:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013148:	9c04      	ldr	r4, [sp, #16]
 801314a:	e9c4 2300 	strd	r2, r3, [r4]
 801314e:	4602      	mov	r2, r0
 8013150:	460b      	mov	r3, r1
 8013152:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8013156:	f7ed f8af 	bl	80002b8 <__aeabi_dsub>
 801315a:	ad4a      	add	r5, sp, #296	@ 0x128
 801315c:	2401      	movs	r4, #1
 801315e:	45a0      	cmp	r8, r4
 8013160:	da2b      	bge.n	80131ba <__kernel_rem_pio2+0x5e2>
 8013162:	f1b9 0f00 	cmp.w	r9, #0
 8013166:	d002      	beq.n	801316e <__kernel_rem_pio2+0x596>
 8013168:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801316c:	4619      	mov	r1, r3
 801316e:	9b04      	ldr	r3, [sp, #16]
 8013170:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013174:	e7a1      	b.n	80130ba <__kernel_rem_pio2+0x4e2>
 8013176:	9c05      	ldr	r4, [sp, #20]
 8013178:	ab48      	add	r3, sp, #288	@ 0x120
 801317a:	441c      	add	r4, r3
 801317c:	2000      	movs	r0, #0
 801317e:	2100      	movs	r1, #0
 8013180:	f1b8 0f00 	cmp.w	r8, #0
 8013184:	da09      	bge.n	801319a <__kernel_rem_pio2+0x5c2>
 8013186:	f1b9 0f00 	cmp.w	r9, #0
 801318a:	d002      	beq.n	8013192 <__kernel_rem_pio2+0x5ba>
 801318c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013190:	4619      	mov	r1, r3
 8013192:	9b04      	ldr	r3, [sp, #16]
 8013194:	e9c3 0100 	strd	r0, r1, [r3]
 8013198:	e78f      	b.n	80130ba <__kernel_rem_pio2+0x4e2>
 801319a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801319e:	f7ed f88d 	bl	80002bc <__adddf3>
 80131a2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80131a6:	e7eb      	b.n	8013180 <__kernel_rem_pio2+0x5a8>
 80131a8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80131ac:	f7ed f886 	bl	80002bc <__adddf3>
 80131b0:	3c01      	subs	r4, #1
 80131b2:	e7c1      	b.n	8013138 <__kernel_rem_pio2+0x560>
 80131b4:	4602      	mov	r2, r0
 80131b6:	460b      	mov	r3, r1
 80131b8:	e7c6      	b.n	8013148 <__kernel_rem_pio2+0x570>
 80131ba:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80131be:	f7ed f87d 	bl	80002bc <__adddf3>
 80131c2:	3401      	adds	r4, #1
 80131c4:	e7cb      	b.n	801315e <__kernel_rem_pio2+0x586>
 80131c6:	ed95 7b00 	vldr	d7, [r5]
 80131ca:	ed8d 7b00 	vstr	d7, [sp]
 80131ce:	ed95 7b02 	vldr	d7, [r5, #8]
 80131d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131d6:	ec53 2b17 	vmov	r2, r3, d7
 80131da:	ed8d 7b06 	vstr	d7, [sp, #24]
 80131de:	f7ed f86d 	bl	80002bc <__adddf3>
 80131e2:	4602      	mov	r2, r0
 80131e4:	460b      	mov	r3, r1
 80131e6:	4606      	mov	r6, r0
 80131e8:	460f      	mov	r7, r1
 80131ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131ee:	f7ed f863 	bl	80002b8 <__aeabi_dsub>
 80131f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80131f6:	f7ed f861 	bl	80002bc <__adddf3>
 80131fa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80131fe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8013202:	e9c5 6700 	strd	r6, r7, [r5]
 8013206:	e76d      	b.n	80130e4 <__kernel_rem_pio2+0x50c>
 8013208:	ed94 7b00 	vldr	d7, [r4]
 801320c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8013210:	ec51 0b17 	vmov	r0, r1, d7
 8013214:	4652      	mov	r2, sl
 8013216:	465b      	mov	r3, fp
 8013218:	ed8d 7b00 	vstr	d7, [sp]
 801321c:	f7ed f84e 	bl	80002bc <__adddf3>
 8013220:	4602      	mov	r2, r0
 8013222:	460b      	mov	r3, r1
 8013224:	4606      	mov	r6, r0
 8013226:	460f      	mov	r7, r1
 8013228:	e9dd 0100 	ldrd	r0, r1, [sp]
 801322c:	f7ed f844 	bl	80002b8 <__aeabi_dsub>
 8013230:	4652      	mov	r2, sl
 8013232:	465b      	mov	r3, fp
 8013234:	f7ed f842 	bl	80002bc <__adddf3>
 8013238:	3d01      	subs	r5, #1
 801323a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801323e:	e9c4 6700 	strd	r6, r7, [r4]
 8013242:	e755      	b.n	80130f0 <__kernel_rem_pio2+0x518>
 8013244:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013248:	f7ed f838 	bl	80002bc <__adddf3>
 801324c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8013250:	e758      	b.n	8013104 <__kernel_rem_pio2+0x52c>
 8013252:	bf00      	nop
 8013254:	f3af 8000 	nop.w
	...
 8013260:	41700000 	.word	0x41700000
 8013264:	3e700000 	.word	0x3e700000
 8013268:	9b04      	ldr	r3, [sp, #16]
 801326a:	9a04      	ldr	r2, [sp, #16]
 801326c:	601f      	str	r7, [r3, #0]
 801326e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8013272:	605c      	str	r4, [r3, #4]
 8013274:	609d      	str	r5, [r3, #8]
 8013276:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801327a:	60d3      	str	r3, [r2, #12]
 801327c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013280:	6110      	str	r0, [r2, #16]
 8013282:	6153      	str	r3, [r2, #20]
 8013284:	e719      	b.n	80130ba <__kernel_rem_pio2+0x4e2>
 8013286:	bf00      	nop

08013288 <scalbn>:
 8013288:	b570      	push	{r4, r5, r6, lr}
 801328a:	ec55 4b10 	vmov	r4, r5, d0
 801328e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013292:	4606      	mov	r6, r0
 8013294:	462b      	mov	r3, r5
 8013296:	b991      	cbnz	r1, 80132be <scalbn+0x36>
 8013298:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801329c:	4323      	orrs	r3, r4
 801329e:	d03d      	beq.n	801331c <scalbn+0x94>
 80132a0:	4b35      	ldr	r3, [pc, #212]	@ (8013378 <scalbn+0xf0>)
 80132a2:	4620      	mov	r0, r4
 80132a4:	4629      	mov	r1, r5
 80132a6:	2200      	movs	r2, #0
 80132a8:	f7ed f9be 	bl	8000628 <__aeabi_dmul>
 80132ac:	4b33      	ldr	r3, [pc, #204]	@ (801337c <scalbn+0xf4>)
 80132ae:	429e      	cmp	r6, r3
 80132b0:	4604      	mov	r4, r0
 80132b2:	460d      	mov	r5, r1
 80132b4:	da0f      	bge.n	80132d6 <scalbn+0x4e>
 80132b6:	a328      	add	r3, pc, #160	@ (adr r3, 8013358 <scalbn+0xd0>)
 80132b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132bc:	e01e      	b.n	80132fc <scalbn+0x74>
 80132be:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80132c2:	4291      	cmp	r1, r2
 80132c4:	d10b      	bne.n	80132de <scalbn+0x56>
 80132c6:	4622      	mov	r2, r4
 80132c8:	4620      	mov	r0, r4
 80132ca:	4629      	mov	r1, r5
 80132cc:	f7ec fff6 	bl	80002bc <__adddf3>
 80132d0:	4604      	mov	r4, r0
 80132d2:	460d      	mov	r5, r1
 80132d4:	e022      	b.n	801331c <scalbn+0x94>
 80132d6:	460b      	mov	r3, r1
 80132d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80132dc:	3936      	subs	r1, #54	@ 0x36
 80132de:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80132e2:	4296      	cmp	r6, r2
 80132e4:	dd0d      	ble.n	8013302 <scalbn+0x7a>
 80132e6:	2d00      	cmp	r5, #0
 80132e8:	a11d      	add	r1, pc, #116	@ (adr r1, 8013360 <scalbn+0xd8>)
 80132ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132ee:	da02      	bge.n	80132f6 <scalbn+0x6e>
 80132f0:	a11d      	add	r1, pc, #116	@ (adr r1, 8013368 <scalbn+0xe0>)
 80132f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132f6:	a31a      	add	r3, pc, #104	@ (adr r3, 8013360 <scalbn+0xd8>)
 80132f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132fc:	f7ed f994 	bl	8000628 <__aeabi_dmul>
 8013300:	e7e6      	b.n	80132d0 <scalbn+0x48>
 8013302:	1872      	adds	r2, r6, r1
 8013304:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013308:	428a      	cmp	r2, r1
 801330a:	dcec      	bgt.n	80132e6 <scalbn+0x5e>
 801330c:	2a00      	cmp	r2, #0
 801330e:	dd08      	ble.n	8013322 <scalbn+0x9a>
 8013310:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013314:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013318:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801331c:	ec45 4b10 	vmov	d0, r4, r5
 8013320:	bd70      	pop	{r4, r5, r6, pc}
 8013322:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013326:	da08      	bge.n	801333a <scalbn+0xb2>
 8013328:	2d00      	cmp	r5, #0
 801332a:	a10b      	add	r1, pc, #44	@ (adr r1, 8013358 <scalbn+0xd0>)
 801332c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013330:	dac1      	bge.n	80132b6 <scalbn+0x2e>
 8013332:	a10f      	add	r1, pc, #60	@ (adr r1, 8013370 <scalbn+0xe8>)
 8013334:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013338:	e7bd      	b.n	80132b6 <scalbn+0x2e>
 801333a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801333e:	3236      	adds	r2, #54	@ 0x36
 8013340:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8013344:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013348:	4620      	mov	r0, r4
 801334a:	4b0d      	ldr	r3, [pc, #52]	@ (8013380 <scalbn+0xf8>)
 801334c:	4629      	mov	r1, r5
 801334e:	2200      	movs	r2, #0
 8013350:	e7d4      	b.n	80132fc <scalbn+0x74>
 8013352:	bf00      	nop
 8013354:	f3af 8000 	nop.w
 8013358:	c2f8f359 	.word	0xc2f8f359
 801335c:	01a56e1f 	.word	0x01a56e1f
 8013360:	8800759c 	.word	0x8800759c
 8013364:	7e37e43c 	.word	0x7e37e43c
 8013368:	8800759c 	.word	0x8800759c
 801336c:	fe37e43c 	.word	0xfe37e43c
 8013370:	c2f8f359 	.word	0xc2f8f359
 8013374:	81a56e1f 	.word	0x81a56e1f
 8013378:	43500000 	.word	0x43500000
 801337c:	ffff3cb0 	.word	0xffff3cb0
 8013380:	3c900000 	.word	0x3c900000
 8013384:	00000000 	.word	0x00000000

08013388 <floor>:
 8013388:	ec51 0b10 	vmov	r0, r1, d0
 801338c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013394:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013398:	2e13      	cmp	r6, #19
 801339a:	460c      	mov	r4, r1
 801339c:	4605      	mov	r5, r0
 801339e:	4680      	mov	r8, r0
 80133a0:	dc34      	bgt.n	801340c <floor+0x84>
 80133a2:	2e00      	cmp	r6, #0
 80133a4:	da17      	bge.n	80133d6 <floor+0x4e>
 80133a6:	a332      	add	r3, pc, #200	@ (adr r3, 8013470 <floor+0xe8>)
 80133a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ac:	f7ec ff86 	bl	80002bc <__adddf3>
 80133b0:	2200      	movs	r2, #0
 80133b2:	2300      	movs	r3, #0
 80133b4:	f7ed fbc8 	bl	8000b48 <__aeabi_dcmpgt>
 80133b8:	b150      	cbz	r0, 80133d0 <floor+0x48>
 80133ba:	2c00      	cmp	r4, #0
 80133bc:	da55      	bge.n	801346a <floor+0xe2>
 80133be:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80133c2:	432c      	orrs	r4, r5
 80133c4:	2500      	movs	r5, #0
 80133c6:	42ac      	cmp	r4, r5
 80133c8:	4c2b      	ldr	r4, [pc, #172]	@ (8013478 <floor+0xf0>)
 80133ca:	bf08      	it	eq
 80133cc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80133d0:	4621      	mov	r1, r4
 80133d2:	4628      	mov	r0, r5
 80133d4:	e023      	b.n	801341e <floor+0x96>
 80133d6:	4f29      	ldr	r7, [pc, #164]	@ (801347c <floor+0xf4>)
 80133d8:	4137      	asrs	r7, r6
 80133da:	ea01 0307 	and.w	r3, r1, r7
 80133de:	4303      	orrs	r3, r0
 80133e0:	d01d      	beq.n	801341e <floor+0x96>
 80133e2:	a323      	add	r3, pc, #140	@ (adr r3, 8013470 <floor+0xe8>)
 80133e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e8:	f7ec ff68 	bl	80002bc <__adddf3>
 80133ec:	2200      	movs	r2, #0
 80133ee:	2300      	movs	r3, #0
 80133f0:	f7ed fbaa 	bl	8000b48 <__aeabi_dcmpgt>
 80133f4:	2800      	cmp	r0, #0
 80133f6:	d0eb      	beq.n	80133d0 <floor+0x48>
 80133f8:	2c00      	cmp	r4, #0
 80133fa:	bfbe      	ittt	lt
 80133fc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013400:	4133      	asrlt	r3, r6
 8013402:	18e4      	addlt	r4, r4, r3
 8013404:	ea24 0407 	bic.w	r4, r4, r7
 8013408:	2500      	movs	r5, #0
 801340a:	e7e1      	b.n	80133d0 <floor+0x48>
 801340c:	2e33      	cmp	r6, #51	@ 0x33
 801340e:	dd0a      	ble.n	8013426 <floor+0x9e>
 8013410:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013414:	d103      	bne.n	801341e <floor+0x96>
 8013416:	4602      	mov	r2, r0
 8013418:	460b      	mov	r3, r1
 801341a:	f7ec ff4f 	bl	80002bc <__adddf3>
 801341e:	ec41 0b10 	vmov	d0, r0, r1
 8013422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013426:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801342a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801342e:	40df      	lsrs	r7, r3
 8013430:	4207      	tst	r7, r0
 8013432:	d0f4      	beq.n	801341e <floor+0x96>
 8013434:	a30e      	add	r3, pc, #56	@ (adr r3, 8013470 <floor+0xe8>)
 8013436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801343a:	f7ec ff3f 	bl	80002bc <__adddf3>
 801343e:	2200      	movs	r2, #0
 8013440:	2300      	movs	r3, #0
 8013442:	f7ed fb81 	bl	8000b48 <__aeabi_dcmpgt>
 8013446:	2800      	cmp	r0, #0
 8013448:	d0c2      	beq.n	80133d0 <floor+0x48>
 801344a:	2c00      	cmp	r4, #0
 801344c:	da0a      	bge.n	8013464 <floor+0xdc>
 801344e:	2e14      	cmp	r6, #20
 8013450:	d101      	bne.n	8013456 <floor+0xce>
 8013452:	3401      	adds	r4, #1
 8013454:	e006      	b.n	8013464 <floor+0xdc>
 8013456:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801345a:	2301      	movs	r3, #1
 801345c:	40b3      	lsls	r3, r6
 801345e:	441d      	add	r5, r3
 8013460:	4545      	cmp	r5, r8
 8013462:	d3f6      	bcc.n	8013452 <floor+0xca>
 8013464:	ea25 0507 	bic.w	r5, r5, r7
 8013468:	e7b2      	b.n	80133d0 <floor+0x48>
 801346a:	2500      	movs	r5, #0
 801346c:	462c      	mov	r4, r5
 801346e:	e7af      	b.n	80133d0 <floor+0x48>
 8013470:	8800759c 	.word	0x8800759c
 8013474:	7e37e43c 	.word	0x7e37e43c
 8013478:	bff00000 	.word	0xbff00000
 801347c:	000fffff 	.word	0x000fffff

08013480 <_init>:
 8013480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013482:	bf00      	nop
 8013484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013486:	bc08      	pop	{r3}
 8013488:	469e      	mov	lr, r3
 801348a:	4770      	bx	lr

0801348c <_fini>:
 801348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801348e:	bf00      	nop
 8013490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013492:	bc08      	pop	{r3}
 8013494:	469e      	mov	lr, r3
 8013496:	4770      	bx	lr
